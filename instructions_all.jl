{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Parallel Construct. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Serial Construct. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Kernels Construct. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of if clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of self clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of async clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of wait clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of num gangs clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of num workers clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of vector length clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of private clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of firstprivate clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of reduction clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of default clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Variables with Predetermined Data Attributes. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Variables with Implicitly Determined Data Attributes. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Data Regions and Data Lifetimes. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Data Structures with Pointers. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Data Construct. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Enter Data and Exit Data Directives. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Reference Counters. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Attachment Counter. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Data Clauses. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Data Specification in Data Clauses. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Data Clause Actions. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Data Clause Errors. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of deviceptr clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of present clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of copy clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of copyin clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of copyout clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of create clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of no create clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of delete clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of attach clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of detach clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Host Data Construct. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of use device clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of if clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of if present clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Loop Construct. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of collapse clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of gang clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of worker clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of vector clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of seq clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of independent clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of auto clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of tile clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of device type clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of private clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of reduction clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Cache Directive. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Combined Constructs. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Atomic Construct. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Declare Directive. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of device resident clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of create clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of link clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Executable Directives. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Init Directive. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Shutdown Directive. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Set Directive. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Update Directive. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Wait Directive. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Enter Data Directive. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Exit Data Directive. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Procedure Calls in Compute Regions. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Routine Directive. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Global Data Access. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Asynchronous Behavior. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of async clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of wait clause. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Wait Directive. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Fortran Specific Behavior. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of Do Concurrent Construct. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc get num devices. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc set device type. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc get device type. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc set device num. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc get device num. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc get property. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc init. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc shutdown. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc async test. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc wait. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc wait async. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc wait any. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc get default async. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc set default async. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc on device. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc malloc. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc free. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc copyin and acc create. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc copyout and acc delete. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc update device and acc update self. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc map data. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc unmap data. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc deviceptr. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc hostptr. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc is present. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc memcpy to device. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc memcpy from device. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc memcpy device. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc init. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc shutdown. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc async test. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc wait. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc wait async. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc wait any. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc get default async. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc set default async. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc on device. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc malloc. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc free. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc copyin and acc create. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc copyout and acc delete. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc update device and acc update self. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc map data. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc unmap data. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc deviceptr. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc hostptr. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc is present. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc memcpy to device. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc memcpy from device. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc memcpy device. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc attach and acc detach. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
{"idx": 1, "Instruction": "Write a C code to validate and verify compiler implementation of the OpenACC specification of acc memcpy d2d. Return 1 if the feature is not working properly, and 0 if it passes. Implement the logic inside the template code below. Include main in the response.\nTemplate:\n#include \"acc_testsuite.h\"\n#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n\nint main(){\n    int failcode = 0;\n    int failed;\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n    return failcode;\n}"}
