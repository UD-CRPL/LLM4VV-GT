{
    "configs": [
        {
            "CC": "nvc",
            "CCFlags": [
                "-I",
                "~/Nvidia/OpenACCV-V/",
                "-acc=gpu",
                "-Minfo=all"
            ],
            "CC_ACC_Version": "2.6",
            "CPP": "nvc++",
            "CPPFlags": [
                "-I",
                "~/Nvidia/OpenACCV-V/",
                "-acc=gpu",
                "-Minfo=all"
            ],
            "CPP_ACC_Version": "2.6",
            "FC": "nvfortran",
            "FCFlags": [
                "-I",
                "~/Nvidia/OpenACCV-V/",
                "-acc=gpu",
                "-Minfo=all"
            ],
            "FC_ACC_Version": "2.6",
            "PostCompileCommands": [],
            "PostRunCommands": [],
            "PreCompileCommands": [],
            "PreRunCommands": [],
            "build_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/build",
            "config_id": -1,
            "config_name": "init_config.txt",
            "env": null,
            "exclude_tags": [],
            "exclude_tests": [
                "acc_testsuite.Fh",
                "acc_testsuite.h",
                "acc_testsuite_declare.h"
            ],
            "export_format": "json",
            "fast": false,
            "id": 1,
            "include_by_default": true,
            "include_tags": [],
            "include_tests": [],
            "keep_build_dir": false,
            "keep_mutated_tests": false,
            "keep_partial_results": false,
            "keep_policy": "on-error",
            "mutated_test_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/build/mutated_tests",
            "mutators": [],
            "partial": false,
            "partial_results_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/build/partial_results",
            "runAll": false,
            "runtime_prefix": "",
            "seed": null,
            "system_name": null,
            "tag_evaluation": null,
            "test_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/Tests",
            "timeout": 10
        }
    ],
    "runs": {
        "acc_async_test.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_async_test.c/acc_async_test.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31503307199454866
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007755355996778235,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_attach.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_attach.c/acc_attach.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c\", line 11: warning: argument of type \"int *\" is incompatible with parameter of type \"void **\" [incompatible_param]\n      acc_attach(dev_array, sizeof(int) * 10);\n                 ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c\", line 11: error: too many arguments in function call\n      acc_attach(dev_array, sizeof(int) * 10);\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c\", line 11: warning: variable \"dev_array\" is used before its value is set [used_before_set]\n      acc_attach(dev_array, sizeof(int) * 10);\n                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c\", line 19: warning: argument of type \"int *\" is incompatible with parameter of type \"void **\" [incompatible_param]\n      acc_detach(dev_array);\n                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c\", line 22: warning: function \"acc_is_attached\" declared implicitly [implicit_func_decl]\n      if (acc_is_attached(dev_array)) {\n          ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16439837598591112
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_attach.c/acc_attach.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c\", line 32: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36489066598005593
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007724668015725911,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_copyin.c/acc_copyin.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 10: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16444765898631886
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_create.c/acc_create.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31478581999544986
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36495201199431904,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_delete.c/acc_delete.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3146787059959024
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36500922101549804,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_detach.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_detach.c/acc_detach.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 17: warning: argument of type \"int **\" is incompatible with parameter of type \"unsigned long\" [incompatible_param]\n      acc_malloc(&dev_data, sizeof(int) * 10);\n                 ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 17: error: too many arguments in function call\n      acc_malloc(&dev_data, sizeof(int) * 10);\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 23: warning: argument of type \"int *\" is incompatible with parameter of type \"void **\" [incompatible_param]\n      acc_detach(dev_data);\n                 ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1642086339998059
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_detach.c/acc_detach.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 41: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31495942099718377
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007794061006279662,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_deviceptr.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_deviceptr.c/acc_deviceptr.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_deviceptr.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_deviceptr.c\", line 4: catastrophic error: cannot open source file \"acc_runtime.h\"\n  #include <acc_runtime.h>\n                          ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_deviceptr.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11422392801614478
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_free.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_free.c/acc_free.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26447108399588615
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007989643985638395,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_default_async.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_default_async.c/acc_get_default_async.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3151328030216973
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06428219302324578,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_num.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_device_num.c/acc_get_device_num.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\", line 9: error: identifier \"ACC_DEVICE_TYPE_GPU\" is undefined\n      int device_num = acc_get_device_num(ACC_DEVICE_TYPE_GPU);\n                                          ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11424155099666677
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_device_num.c/acc_get_device_num.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\", line 20: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31494256999576464
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007640867988811806,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_type.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_device_type.c/acc_get_device_type.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_type.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_type.c\", line 12: warning: function \"acc_get_device_type_from_id\" declared implicitly [implicit_func_decl]\n      device_type = acc_get_device_type_from_id(device_id);\n                    ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_type.c\", line 12: warning: enumerated type mixed with another type [mixed_enum_type]\n      device_type = acc_get_device_type_from_id(device_id);\n                  ^\n\n/usr/bin/ld: /usr/lib/x86_64-linux-gnu/crt1.o: in function `_start':\n(.text+0x1b): undefined reference to `main'\n/usr/bin/ld: /tmp/nvcZdeLbzzF0Hy3Z.o: in function `acc_get_device_type':\n/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_type.c:12: undefined reference to `acc_get_device_type_from_id'\npgacclnk: child process exit status 1: /usr/bin/ld\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.31479392599430867
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_num_devices.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_num_devices.c/acc_get_num_devices.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\", line 9: error: identifier \"ACC_DEVICE_TYPE_ALL\" is undefined\n      int num_devices = acc_get_num_devices(ACC_DEVICE_TYPE_ALL);\n                                            ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1642845890019089
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_num_devices.c/acc_get_num_devices.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\", line 20: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3151269609807059
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007798278995323926,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_property.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_property.c/acc_get_property.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 15: error: too many arguments in function call\n      acc_device_t dev_type = acc_get_device_type(dev_num);\n                                                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 35: error: identifier \"acc_property_shared_memory_support\" is undefined\n      if (acc_get_property(dev_num, dev_type, acc_property_shared_memory_support) != 0) {\n                                              ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16455189799307846
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_hostptr.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_hostptr.c/acc_hostptr.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\", line 9: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\", line 12: warning: function \"acc_deviceptr\" declared implicitly [implicit_func_decl]\n      void *data_dev = acc_deviceptr(malloc(1024));\n                       ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\", line 12: warning: a value of type \"int\" cannot be used to initialize an entity of type \"void *\" [bad_initializer_type]\n      void *data_dev = acc_deviceptr(malloc(1024));\n                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\", line 15: warning: function \"acc_hostptr\" declared implicitly [implicit_func_decl]\n      void *data_host = acc_hostptr(data_dev);\n                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\", line 15: warning: a value of type \"int\" cannot be used to initialize an entity of type \"void *\" [bad_initializer_type]\n      void *data_host = acc_hostptr(data_dev);\n                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\", line 23: warning: function \"acc_free\" declared implicitly [implicit_func_decl]\n      acc_free(data_dev);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\", line 34: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16458763598348014
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_hostptr.c/acc_hostptr.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\", line 31: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26476205000653863
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007769914984237403,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_init.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_init.c/acc_init.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 10: error: identifier \"ACC_DEVICE_TYPE_GPU\" is undefined\n      acc_init(ACC_DEVICE_TYPE_GPU);\n               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 11: warning: function \"acc_init_device\" declared implicitly [implicit_func_decl]\n      acc_init_device(0, ACC_DEVICE_TYPE_GPU);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 14: error: too few arguments in function call\n      if (acc_get_device_type() != ACC_DEVICE_TYPE_GPU || acc_get_device_num() != 0) {\n                                                                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 19: error: too few arguments in function call\n      acc_shutdown();\n                   ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21431664397823624
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_init.c/acc_init.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 27: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31533875601598993
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.008164656988810748,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_is_present.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_is_present.c/acc_is_present.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 9: warning: function \"acc_is_shared\" declared implicitly [implicit_func_decl]\n          if (acc_is_shared(data_arg, bytes)) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 13: warning: function \"acc_is_present_in_device\" declared implicitly [implicit_func_decl]\n          if (acc_is_present_in_device(data_arg, bytes)) {\n              ^\n\n/usr/bin/ld: /tmp/nvcIjgLbMun4DBf2.o: in function `acc_is_present':\n/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c:9: undefined reference to `acc_is_shared'\n/usr/bin/ld: /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c:13: undefined reference to `acc_is_present_in_device'\npgacclnk: child process exit status 1: /usr/bin/ld\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.36471646299469285
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_malloc.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_malloc.c/acc_malloc.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c\", line 8: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c\", line 10: error: expected an expression\n      if(){\n         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c\", line 23: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16409659999771975
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_malloc.c/acc_malloc.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c\", line 20: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31520531099522486
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007840428006602451,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_map_data.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_map_data.c/acc_map_data.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 4: catastrophic error: cannot open source file \"acc_runtime.h\"\n  #include <acc_runtime.h>\n                          ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16479179600719362
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_d2d.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_d2d.c/acc_memcpy_d2d.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\", line 4: catastrophic error: cannot open source file \"acc_runtime.h\"\n  #include <acc_runtime.h>\n                          ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16408499900717288
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_device.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_device.c/acc_memcpy_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 9: error: expected an expression\n      if(){\n         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 32: error: identifier \"d_void\" is undefined\n  void acc_memcpy_device(d_void *data_dev_dest, d_void *data_dev_src, size_t bytes) {\n                         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 32: error: identifier \"d_void\" is undefined\n  void acc_memcpy_device(d_void *data_dev_dest, d_void *data_dev_src, size_t bytes) {\n                                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 32: error: declaration is incompatible with \"void *acc_memcpy_device(void *, void *, unsigned long)\" (declared at line 140 of \"/opt/nvidia/hpc_sdk/Linux_x86_64/23.5/compilers/include/openacc.h\")\n  void acc_memcpy_device(d_void *data_dev_dest, d_void *data_dev_src, size_t bytes) {\n       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 55: error: identifier \"d_void\" is undefined\n  void acc_memcpy_device_async(d_void *data_dev_dest, d_void *data_dev_src, size_t bytes, int async_arg) {\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 55: error: identifier \"d_void\" is undefined\n  void acc_memcpy_device_async(d_void *data_dev_dest, d_void *data_dev_src, size_t bytes, int async_arg) {\n                                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 55: error: declaration is incompatible with \"void *acc_memcpy_device_async(void *, void *, unsigned long, long)\" (declared at line 142 of \"/opt/nvidia/hpc_sdk/Linux_x86_64/23.5/compilers/include/openacc.h\")\n  void acc_memcpy_device_async(d_void *data_dev_dest, d_void *data_dev_src, size_t bytes, int async_arg) {\n       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 75: warning: function \"memcpy_async\" declared implicitly [implicit_func_decl]\n      memcpy_async(data_dev_dest, data_dev_src, bytes, async_arg);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n7 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16461828598403372
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_device.c/acc_memcpy_device.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 19: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 32: error: identifier \"d_void\" is undefined\n  void acc_memcpy_device(d_void *data_dev_dest, d_void *data_dev_src, size_t bytes) {\n                         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 32: error: identifier \"d_void\" is undefined\n  void acc_memcpy_device(d_void *data_dev_dest, d_void *data_dev_src, size_t bytes) {\n                                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 32: error: declaration is incompatible with \"void *acc_memcpy_device(void *, void *, unsigned long)\" (declared at line 140 of \"/opt/nvidia/hpc_sdk/Linux_x86_64/23.5/compilers/include/openacc.h\")\n  void acc_memcpy_device(d_void *data_dev_dest, d_void *data_dev_src, size_t bytes) {\n       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 55: error: identifier \"d_void\" is undefined\n  void acc_memcpy_device_async(d_void *data_dev_dest, d_void *data_dev_src, size_t bytes, int async_arg) {\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 55: error: identifier \"d_void\" is undefined\n  void acc_memcpy_device_async(d_void *data_dev_dest, d_void *data_dev_src, size_t bytes, int async_arg) {\n                                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 55: error: declaration is incompatible with \"void *acc_memcpy_device_async(void *, void *, unsigned long, long)\" (declared at line 142 of \"/opt/nvidia/hpc_sdk/Linux_x86_64/23.5/compilers/include/openacc.h\")\n  void acc_memcpy_device_async(d_void *data_dev_dest, d_void *data_dev_src, size_t bytes, int async_arg) {\n       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 75: warning: function \"memcpy_async\" declared implicitly [implicit_func_decl]\n      memcpy_async(data_dev_dest, data_dev_src, bytes, async_arg);\n      ^\n\n6 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16478621598798782
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_from_device.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_from_device.c/acc_memcpy_from_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\", line 4: catastrophic error: cannot open source file \"acc_runtime.h\"\n  #include <acc_runtime.h>\n                          ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1642236129846424
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_to_device.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_to_device.c/acc_memcpy_to_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_to_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_to_device.c\", line 4: catastrophic error: cannot open source file \"acc_runtime.h\"\n  #include <acc_runtime.h>\n                          ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_to_device.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16445580500294454
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_on_device.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_on_device.c/acc_on_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_on_device.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31485469100880437
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0077718079846818,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_default_async.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_default_async.c/acc_set_default_async.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 4: error: identifier \"acc_async_var_t\" is undefined\n      acc_async_var_t async_var;\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 8: error: identifier \"ACC_ASYNC_MAX\" is undefined\n      if (async_arg < 0 || async_arg > ACC_ASYNC_MAX) {\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 9: warning: function \"acc_error_invalid_async\" declared implicitly [implicit_func_decl]\n          acc_error_invalid_async(async_arg);\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 14: warning: function \"acc_async_var_create\" declared implicitly [implicit_func_decl]\n      async_var = acc_async_var_create(async_arg);\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 15: warning: function \"acc_async_var_get\" declared implicitly [implicit_func_decl]\n      async_arg_val = acc_async_var_get(async_var);\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 16: warning: function \"acc_set_default_async_var\" declared implicitly [implicit_func_decl]\n      acc_set_default_async_var(async_arg_val);\n      ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16406477001146413
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_num.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_device_num.c/acc_set_device_num.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 13: warning: enumerated type mixed with another type [mixed_enum_type]\n      acc_device_t dev_type = (acc_device_t)rand() % 2;\n                              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 19: error: too few arguments in function call\n      if (acc_get_device_num() != dev_num) {\n                             ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.2146211149811279
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_device_num.c/acc_set_device_num.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 34: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31472002499504015
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007909901993116364,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_type.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_device_type.c/acc_set_device_type.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 9: error: identifier \"ACC_DEVICE_TYPE_GPU\" is undefined\n      if (acc_set_device_type(ACC_DEVICE_TYPE_GPU) != ACC_SUCCESS) {\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 9: error: identifier \"ACC_SUCCESS\" is undefined\n      if (acc_set_device_type(ACC_DEVICE_TYPE_GPU) != ACC_SUCCESS) {\n                                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 9: error: expression must have arithmetic or pointer type but has type \"void\"\n      if (acc_set_device_type(ACC_DEVICE_TYPE_GPU) != ACC_SUCCESS) {\n          ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21437793198856525
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_device_type.c/acc_set_device_type.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 19: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26528411600156687
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007743803987978026,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_shutdown.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_shutdown.c/acc_shutdown.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 12: error: expected an expression\n      if(){\n         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 37: error: too many arguments in function call\n      acc_device_t device = acc_get_device(dev_type);\n                                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 38: warning: operand types are incompatible (\"acc_device_t\" and \"void *\") [incompatible_operands]\n      if (device == NULL) {\n                 ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 42: warning: function \"acc_shutdown_device\" declared implicitly [implicit_func_decl]\n      acc_shutdown_device(device);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 45: warning: declaration is incompatible with previous \"acc_shutdown_device\" (declared at line 42) [decl_incompatible_with_previous_use]\n  void acc_shutdown_device(int dev_num, acc_device_t dev_type){\n       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 47: error: too many arguments in function call\n      acc_device_t device = acc_get_device(dev_type);\n                                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 48: warning: operand types are incompatible (\"acc_device_t\" and \"void *\") [incompatible_operands]\n      if (device == NULL) {\n                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 52: error: operator -> or ->* applied to \"acc_device_t\" instead of to a pointer type\n      if (dev_num < 0 || dev_num >= device->num_devices) {\n                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 56: error: operator -> or ->* applied to \"acc_device_t\" instead of to a pointer type\n      acc_shutdown_device(device->devices[dev_num]);\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 56: error: too few arguments in function call\n      acc_shutdown_device(device->devices[dev_num]);\n                                                  ^\n\n6 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16412318099173717
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_shutdown.c/acc_shutdown.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 22: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 37: error: too many arguments in function call\n      acc_device_t device = acc_get_device(dev_type);\n                                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 38: warning: operand types are incompatible (\"acc_device_t\" and \"void *\") [incompatible_operands]\n      if (device == NULL) {\n                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 42: warning: function \"acc_shutdown_device\" declared implicitly [implicit_func_decl]\n      acc_shutdown_device(device);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 45: warning: declaration is incompatible with previous \"acc_shutdown_device\" (declared at line 42) [decl_incompatible_with_previous_use]\n  void acc_shutdown_device(int dev_num, acc_device_t dev_type){\n       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 47: error: too many arguments in function call\n      acc_device_t device = acc_get_device(dev_type);\n                                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 48: warning: operand types are incompatible (\"acc_device_t\" and \"void *\") [incompatible_operands]\n      if (device == NULL) {\n                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 52: error: operator -> or ->* applied to \"acc_device_t\" instead of to a pointer type\n      if (dev_num < 0 || dev_num >= device->num_devices) {\n                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 56: error: operator -> or ->* applied to \"acc_device_t\" instead of to a pointer type\n      acc_shutdown_device(device->devices[dev_num]);\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 56: error: too few arguments in function call\n      acc_shutdown_device(device->devices[dev_num]);\n                                                  ^\n\n5 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16444135800702497
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_unmap_data.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 13: warning: argument of type \"unsigned long\" is incompatible with parameter of type \"void *\" [incompatible_param]\n      int *device_array = (int*)acc_map_data(host_array, sizeof(int) * 10);\n                                                         ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 13: warning: conversion of nonzero integer to pointer [non_zero_int_conv_to_pointer]\n      int *device_array = (int*)acc_map_data(host_array, sizeof(int) * 10);\n                                                         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 13: error: too few arguments in function call\n      int *device_array = (int*)acc_map_data(host_array, sizeof(int) * 10);\n                                                                         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 13: error: invalid type conversion\n      int *device_array = (int*)acc_map_data(host_array, sizeof(int) * 10);\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16430429700994864
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 32: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.314888995984802
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007946781988721341,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_update_device.c/acc_update_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c\", line 4: catastrophic error: cannot open source file \"acc_runtime.h\"\n  #include <acc_runtime.h>\n                          ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1646939500060398
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_update_self.c/acc_update_self.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 4: catastrophic error: cannot open source file \"acc_runtime.h\"\n  #include <acc_runtime.h>\n                          ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11432916802004911
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait.c/acc_wait.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 10: error: identifier \"acc_async_queue_t\" is undefined\n      acc_async_queue_t queue;\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 11: warning: function \"acc_async_queue_create\" declared implicitly [implicit_func_decl]\n      acc_async_queue_create(&queue);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 14: error: identifier \"acc_async_operation_t\" is undefined\n      acc_async_operation_t operation;\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 15: warning: function \"acc_async_operation_create\" declared implicitly [implicit_func_decl]\n      acc_async_operation_create(&operation, queue);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 21: warning: function \"acc_async_operation_status\" declared implicitly [implicit_func_decl]\n      if (acc_async_operation_status(operation) != ACC_ASYNC_OPERATION_COMPLETE) {\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 21: error: identifier \"ACC_ASYNC_OPERATION_COMPLETE\" is undefined\n      if (acc_async_operation_status(operation) != ACC_ASYNC_OPERATION_COMPLETE) {\n                                                   ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 26: warning: function \"acc_async_queue_destroy\" declared implicitly [implicit_func_decl]\n      acc_async_queue_destroy(queue);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 27: warning: function \"acc_async_operation_destroy\" declared implicitly [implicit_func_decl]\n      acc_async_operation_destroy(operation);\n      ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16427042102441192
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait.c/acc_wait.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 35: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26481578199309297
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.008021114015718922,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_any.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait_any.c/acc_wait_any.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_any.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_any.c\", line 4: catastrophic error: cannot open source file \"acc_runtime.h\"\n  #include <acc_runtime.h>\n                          ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_any.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16455275999032892
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_async.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait_async.c/acc_wait_async.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c\", line 4: catastrophic error: cannot open source file \"acc_runtime.h\"\n  #include <acc_runtime.h>\n                          ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16456112600280903
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "async_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/async_clause.c/async_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3147411039972212
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0077715080115012825,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "attachment_counter.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/attachment_counter.c/attachment_counter.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/attachment_counter.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/attachment_counter.c\", line 16: warning: argument of type \"int *\" is incompatible with parameter of type \"void **\" [incompatible_param]\n      acc_attach(ptr, sizeof(int), 0);\n                 ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/attachment_counter.c\", line 16: error: too many arguments in function call\n      acc_attach(ptr, sizeof(int), 0);\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/attachment_counter.c\", line 22: warning: argument of type \"int *\" is incompatible with parameter of type \"void **\" [incompatible_param]\n      acc_detach(ptr);\n                 ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/attachment_counter.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21476231500855647
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/attachment_counter.c/attachment_counter.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/attachment_counter.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/attachment_counter.c\", line 42: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31483031500829384
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.008055439015151933,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "cache_directive.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/cache_directive.c/cache_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/cache_directive.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3645935289969202
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007923256984213367,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "combined_constucts.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/combined_constucts.c/combined_constucts.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c",
                    "config": 1,
                    "errors": "test1:\n      7, Generating implicit firstprivate(i)\n         Generating NVIDIA GPU code\n         11, #pragma acc loop gang /* blockIdx.x */\n     13, Generating implicit firstprivate(i)\n         Accelerator serial kernel generated\n         Generating NVIDIA GPU code\n         17, #pragma acc for seq\n     23, Loop is parallelizable\n         Generating NVIDIA GPU code\n         23, #pragma acc loop gang, vector(32) /* blockIdx.x threadIdx.x */\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.715274212998338
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41556275298353285,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_async_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_async_clause.c/compute_construct_async_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_async_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_async_clause.c\", line 28: error: invalid text in pragma\n      #pragma acc compute async(device_data)\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_async_clause.c\", line 10: warning: variable \"data\" was set but never used [set_but_not_used]\n      int data[100];\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_async_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21442040198598988
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_async_clause.c/compute_construct_async_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_async_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_async_clause.c\", line 53: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31487090297741815
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.032304634019965306,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_default_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_default_clause.c/compute_construct_default_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36483510900870897
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03199269901961088,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_firstprivate_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_firstprivate_clause.c/compute_construct_firstprivate_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_firstprivate_clause.c",
                    "config": 1,
                    "errors": "test1:\n     14, Generating NVIDIA GPU code\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5153622500074562
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3651272169954609,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_if_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_if_clause.c/compute_construct_if_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_if_clause.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3148148150066845
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0646399770048447,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_num_gangs_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_num_gangs_clause.c/compute_construct_num_gangs_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c\", line 5: catastrophic error: cannot open source file \"acc/acc.h\"\n  #include <acc/acc.h>\n                      ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1644152280059643
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_num_workersclause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_num_workersclause.c/compute_construct_num_workersclause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c\", line 18: warning: function \"acc_get_num_workers\" declared implicitly [implicit_func_decl]\n      if (acc_get_num_workers() != num_workers) {\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\ntest1:\n     13, Generating NVIDIA GPU code\n/usr/bin/ld: /tmp/nvc9EpLb3cBF4NUp.o: in function `test1':\n/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c:18: undefined reference to `acc_get_num_workers'\npgacclnk: child process exit status 1: /usr/bin/ld\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.5654542910051532
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_num_workersclause.c/compute_construct_num_workersclause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c\", line 28: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3150538819900248
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007870466011809185,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_private_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_private_clause.c/compute_construct_private_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c",
                    "config": 1,
                    "errors": "test1:\n     13, Accelerator clause: upper bound for dimension 0 of array 'b,a' is unknown\n         Generating NVIDIA GPU code\n         14, #pragma acc loop seq\n     13, CUDA shared memory used for b,a\n     14, Complex loop carried dependence of a-> prevents parallelization\n         Loop carried dependence of b-> prevents parallelization\n         Loop carried backward dependence of b-> prevents vectorization\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.515414930996485
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36512839898932725,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_reduction_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_reduction_clause.c/compute_construct_reduction_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 58: error: invalid text in pragma\n      #pragma acc parallel loop reduction(eqv:c[0:100])\n                                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 58: error: identifier \"eqv\" is undefined\n      #pragma acc parallel loop reduction(eqv:c[0:100])\n                                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 58: error: invalid text in pragma\n      #pragma acc parallel loop reduction(eqv:c[0:100])\n                                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 63: error: invalid text in pragma\n      #pragma acc parallel loop reduction(neqv:c[0:100])\n                                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 63: error: identifier \"neqv\" is undefined\n      #pragma acc parallel loop reduction(neqv:c[0:100])\n                                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 63: error: invalid text in pragma\n      #pragma acc parallel loop reduction(neqv:c[0:100])\n                                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 6: warning: variable \"err\" was declared but never referenced [declared_but_not_referenced]\n      int err = 0;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n6 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21468926602392457
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_reduction_clause.c/compute_construct_reduction_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 74: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3146986239880789
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007811854011379182,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_self_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_self_clause.c/compute_construct_self_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3646988999971654
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0646172130072955,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_vector_length_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_vector_length_clause.c/compute_construct_vector_length_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\", line 24: warning: function \"acc_get_vector_length\" declared implicitly [implicit_func_decl]\n      if (acc_get_vector_length() != vector_length) {\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\ntest1:\n     15, Generating implicit firstprivate(num_vectors)\n         Generating NVIDIA GPU code\n         18, #pragma acc loop vector(vector_length), worker(num_workers) threadIdx.x threadIdx.y */\n     18, Loop is parallelizable\n/usr/bin/ld: /tmp/nvczcsLblAh25Xgg.o: in function `test1':\n/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c:24: undefined reference to `acc_get_vector_length'\npgacclnk: child process exit status 1: /usr/bin/ld\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.5147937650035601
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_vector_length_clause.c/compute_construct_vector_length_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\", line 34: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31534704100340605
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.008181087992852554,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct.c/data_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 13: error: identifier \"x\" is undefined\n      acc_memcpy_to_device(dev_ptr, &x, sizeof(int));\n                                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 16: warning: function \"acc_kernel_launch\" declared implicitly [implicit_func_decl]\n      acc_kernel_launch(dev_ptr, sizeof(int));\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16437110397964716
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct.c/data_construct.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 30: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36501029299688525
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007757240004139021,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_attach_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_attach_clause.c/data_construct_attach_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c\", line 18: warning: argument of type \"int *\" is incompatible with parameter of type \"void **\" [incompatible_param]\n      acc_attach(ptr, ptr2);\n                 ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c\", line 18: error: too many arguments in function call\n      acc_attach(ptr, ptr2);\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c\", line 26: warning: argument of type \"int *\" is incompatible with parameter of type \"void **\" [incompatible_param]\n      acc_detach(ptr, ptr2);\n                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c\", line 26: error: too many arguments in function call\n      acc_detach(ptr, ptr2);\n                      ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21450550499139354
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_attach_clause.c/data_construct_attach_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c\", line 39: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3647993800113909
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007844826992368326,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_copyin_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copyin_clause.c/data_construct_copyin_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c",
                    "config": 1,
                    "errors": "test1:\n     14, Generating enter data copyin(b[:10],a[:10],c[:10])\n     20, Generating exit data delete(c[:10],b[:10],a[:10])\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3647863359947223
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Present table dump for device[1]: NVIDIA Tesla GPU 0, compute capability 7.0, threadid=1\nHint: specify 0x800 bit in NV_ACC_DEBUG for verbose info.\nhost:0x21952a0 device:0x7fbe37afa000 size:40 presentcount:0+1 line:14 name:a[:10]\nallocated block device:0x7fbe37afa000 size:512 thread:1\n\nPresent table errors:\nb[:10] lives at 0x21952c0 size 40 partially present in\nhost:0x21952a0 device:0x7fbe37afa000 size:40 presentcount:0+1 line:14 name:a[:10] file:/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\nFATAL ERROR: variable in data clause is partially present on the device: name=b[:10]\n file:/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c test1 line:14\n\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31543618100113235,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copyin_clause.c/data_construct_copyin_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\", line 30: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31481916399206966
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00792386700049974,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_copyout_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copyout_clause.c/data_construct_copyout_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyout_clause.c",
                    "config": 1,
                    "errors": "test1:\n     13, Generating copyout(a[:10]) [if not already present]\n         Generating implicit firstprivate(i)\n         Generating NVIDIA GPU code\n         15, #pragma acc loop gang /* blockIdx.x */\n     21, Generating copyout(b[:10]) [if not already present]\n         Generating implicit firstprivate(i)\n         Generating NVIDIA GPU code\n         23, #pragma acc loop gang /* blockIdx.x */\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6153718279965688
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4146818819863256,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_create_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_create_clause.c/data_construct_create_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36479731800500304
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Segmentation fault (core dumped)\n",
                    "export": false,
                    "output": "",
                    "result": 139,
                    "runtime": 0.41534792198217474,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_create_clause.c/data_construct_create_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 41: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31475189499906264
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00782116298796609,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_delete_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_delete_clause.c/data_construct_delete_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 14: error: invalid text in pragma\n          #pragma acc delete var\n                             ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16445623600156978
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_delete_clause.c/data_construct_delete_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 29: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31513030698988587
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00783243399928324,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_detach_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_detach_clause.c/data_construct_detach_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_detach_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_detach_clause.c\", line 20: error: invalid text in pragma\n          #pragma acc detach(a[0:10], b[0:10])\n                            ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_detach_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16456399200251326
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_detach_clause.c/data_construct_detach_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_detach_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_detach_clause.c\", line 39: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3146545790077653
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007941963005578145,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_no_create_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_no_create_clause.c/data_construct_no_create_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\", line 17: error: identifier \"acc_structured_data_region_t\" is undefined\n      acc_structured_data_region_t region;\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\", line 18: error: identifier \"acc_structured_data_region_type_t\" is undefined\n      region.type = acc_structured_data_region_type_t::acc_structured_data_region_type_shared;\n                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\", line 18: error: expected a \";\"\n      region.type = acc_structured_data_region_type_t::acc_structured_data_region_type_shared;\n                                                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\", line 24: error: identifier \"acc_compute_region_t\" is undefined\n      acc_compute_region_t compute_region;\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\", line 25: error: identifier \"acc_compute_region_type_t\" is undefined\n      compute_region.type = acc_compute_region_type_t::acc_compute_region_type_kernel;\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\", line 25: error: expected a \";\"\n      compute_region.type = acc_compute_region_type_t::acc_compute_region_type_kernel;\n                                                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\", line 31: error: identifier \"acc_no_create_clause_t\" is undefined\n      acc_no_create_clause_t no_create_clause;\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\", line 32: error: identifier \"acc_no_create_clause_type_t\" is undefined\n      no_create_clause.type = acc_no_create_clause_type_t::acc_no_create_clause_type_structured;\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\", line 32: error: expected a \";\"\n      no_create_clause.type = acc_no_create_clause_type_t::acc_no_create_clause_type_structured;\n                                                         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\", line 38: warning: function \"acc_attach_no_create_clause\" declared implicitly [implicit_func_decl]\n      acc_attach_no_create_clause(compute_region, no_create_clause);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\", line 41: warning: function \"acc_run_kernel\" declared implicitly [implicit_func_decl]\n      acc_run_kernel(compute_region, (void*)&test1_kernel, 1, 1, 1);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\", line 41: error: identifier \"test1_kernel\" is undefined\n      acc_run_kernel(compute_region, (void*)&test1_kernel, 1, 1, 1);\n                                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\", line 44: warning: function \"acc_detach_no_create_clause\" declared implicitly [implicit_func_decl]\n      acc_detach_no_create_clause(compute_region, no_create_clause);\n      ^\n\n10 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11416434301645495
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_deviceptr_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_deviceptr_clause.c/data_deviceptr_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_deviceptr_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_deviceptr_clause.c\", line 25: error: invalid text in pragma\n      #pragma acc end parallel loop\n                      ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_deviceptr_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21455738399527036
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_deviceptr_clause.c/data_deviceptr_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_deviceptr_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_deviceptr_clause.c\", line 43: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31454419798683375
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.008093922981061041,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_present_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_present_clause.c/data_present_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\", line 19: error: invalid text in pragma\n      #pragma acc present(data)\n                         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\", line 28: error: invalid text in pragma\n      #pragma acc present(present_data)\n                         ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16458758700173348
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_present_clause.c/data_present_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\", line 53: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3148679159930907
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007873010996263474,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_directive.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive.c/declare_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive.c",
                    "config": 1,
                    "errors": "NVC++-S-0000-Internal compiler error. unrecognized pragma type     220  (/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive.c: 31)\nNVC++/x86-64 Linux 23.5-0: compilation completed with severe errors\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21455311600584537
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive.c/declare_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive.c\", line 55: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3147888150124345
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00795635100803338,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_directive_device_resident_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_device_resident_clause.c/declare_directive_device_resident_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c\", line 9: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16410514601739123
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_directive_link_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_link_clause.c/declare_directive_link_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 19: warning: function \"acc_declare_link\" declared implicitly [implicit_func_decl]\n      acc_declare_link(global_var);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\ntest1:\n     22, Generating implicit firstprivate(i)\n         Generating NVIDIA GPU code\n         24, #pragma acc loop seq\n     22, Generating implicit copyin(global_var) [if not already present]\n     24, Generating implicit firstprivate(result)\n     25, Accelerator restriction: induction variable live-out from loop: result\n/usr/bin/ld: /tmp/nvcpBzLbTVNiS95u.o: in function `test1':\n/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c:19: undefined reference to `acc_declare_link'\npgacclnk: child process exit status 1: /usr/bin/ld\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.46488991400110535
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_link_clause.c/declare_directive_link_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 42: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36497377397608943
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007756567996693775,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_directive.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/enter_data_directive.c/enter_data_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/enter_data_directive.c",
                    "config": 1,
                    "errors": "test1:\n     13, Generating enter data copyin(data[:])\n     29, Generating exit data delete(data[:])\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36505059100454673
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4157059860008303,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_directive.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/exit_data_directive.c/exit_data_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/exit_data_directive.c",
                    "config": 1,
                    "errors": "test1:\n     14, Generating enter data copyin(b[:10],c[:10],a[:10])\n         Generating implicit firstprivate(i)\n         Generating NVIDIA GPU code\n         16, #pragma acc loop gang /* blockIdx.x */\n     14, Generating implicit copyout(a[:10],c[:10],b[:10]) [if not already present]\n     21, Generating exit data delete(c[:10],b[:10],a[:10])\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5151397949957754
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3649591960129328,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "host_data_construct_if_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_if_clause.c/host_data_construct_if_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c\", line 9: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1646829590026755
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "host_data_construct_if_present_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_if_present_clause.c/host_data_construct_if_present_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 10: error: invalid text in pragma\n      #pragma acc host_data if_present(var)\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 10: error: OpenACC data clause expected\n      #pragma acc host_data if_present(var)\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 10: error: extra text after expected end of preprocessing directive\n      #pragma acc host_data if_present(var)\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 13: error: identifier \"var\" is undefined\n          var = 1;\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 16: error: too few arguments in function call\n          if (acc_is_present(var)) {\n                                ^\n\n5 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16423907200805843
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_if_present_clause.c/host_data_construct_if_present_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 28: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41544542799238116
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007805090979672968,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "host_data_construct_use_device_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_use_device_clause.c/host_data_construct_use_device_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_use_device_clause.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3651868099987041
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "FATAL ERROR: data in use_device clause was not found on device 1: host:0x13912d0\n\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3651289700064808,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_use_device_clause.c/host_data_construct_use_device_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_use_device_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_use_device_clause.c\", line 44: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31513885300955735
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007942093012388796,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_directive.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/init_directive.c/init_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\", line 9: error: identifier \"ACC_DEVICE_TYPE_GPU\" is undefined\n      if (acc_init(ACC_DEVICE_TYPE_GPU, 0) != ACC_SUCCESS) {\n                   ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\", line 9: error: too many arguments in function call\n      if (acc_init(ACC_DEVICE_TYPE_GPU, 0) != ACC_SUCCESS) {\n                                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\", line 9: error: identifier \"ACC_SUCCESS\" is undefined\n      if (acc_init(ACC_DEVICE_TYPE_GPU, 0) != ACC_SUCCESS) {\n                                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\", line 9: error: expression must have arithmetic or pointer type but has type \"void\"\n      if (acc_init(ACC_DEVICE_TYPE_GPU, 0) != ACC_SUCCESS) {\n          ^\n\n4 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16459243599092588
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/init_directive.c/init_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\", line 19: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3146761409880128
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00768679499742575,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_construct.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/kernels_construct.c/kernels_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/kernels_construct.c",
                    "config": 1,
                    "errors": "test1:\n     10, Accelerator serial kernel generated\n         Generating NVIDIA GPU code\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4655747599899769
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3650512610038277,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_auto_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_auto_clause.c/loop_construct_auto_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41495006301556714
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.007855868025217205,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_collapse_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_collapse_clause.c/loop_construct_collapse_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c\", line 12: error: identifier \"N\" is undefined\n          for (int j = 0; j < N; j++) {\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c\", line 18: warning: function \"acc_get_num_gangs\" declared implicitly [implicit_func_decl]\n      if (acc_get_num_gangs(acc_get_device_type()) != 2) {\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1641110980126541
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_collapse_clause.c/loop_construct_collapse_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c\", line 28: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3149575779971201
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007763002009596676,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_device_type_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_device_type_clause.c/loop_construct_device_type_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 11: warning: enumerated type mixed with another type [mixed_enum_type]\n      acc_set_device_type(device_type);\n                          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 14: error: Specified device type is not a valid device type. Currently accepted device types are 'nvidia, host, multicore, and default'\n      #pragma acc loop device_type(device_type)\n                                   ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16443070702371188
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_device_type_clause.c/loop_construct_device_type_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 30: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3146975309937261
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.008052732999203727,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_gang_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_gang_clause.c/loop_construct_gang_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\", line 10: warning: function \"acc_get_parent_construct_type\" declared implicitly [implicit_func_decl]\n      if (acc_get_parent_construct_type() == ACC_PARALLEL ||\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\", line 10: error: identifier \"ACC_PARALLEL\" is undefined\n      if (acc_get_parent_construct_type() == ACC_PARALLEL ||\n                                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\", line 11: error: identifier \"ACC_LOOP\" is undefined\n          acc_get_parent_construct_type() == ACC_LOOP) {\n                                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\", line 13: warning: function \"acc_get_gang_clause\" declared implicitly [implicit_func_decl]\n          if (acc_get_gang_clause() != NULL) {\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\", line 13: warning: operand types are incompatible (\"int\" and \"void *\") [incompatible_operands]\n          if (acc_get_gang_clause() != NULL) {\n                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\", line 15: warning: function \"acc_get_gang_dimension\" declared implicitly [implicit_func_decl]\n              if (acc_get_gang_dimension() != 1 && acc_get_gang_dimension() != 2 &&\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\", line 20: warning: function \"acc_get_num_gangs\" declared implicitly [implicit_func_decl]\n              if (acc_get_num_gangs() != 0 && acc_get_num_gangs() != 1 &&\n                  ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21475907901185565
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_gang_clause.c/loop_construct_gang_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\", line 33: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3149754909973126
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007854394993046299,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_private_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_private_clause.c/loop_construct_private_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_private_clause.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36498899199068546
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007983481977134943,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_reduction_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_reduction_clause.c/loop_construct_reduction_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_reduction_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_reduction_clause.c\", line 20: error: complex type is not allowed\n          for (int i = 0; i < I; ++i) {\n                              ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_reduction_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21456900698831305
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_reduction_clause.c/loop_construct_reduction_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_reduction_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_reduction_clause.c\", line 37: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3652175079914741
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007841480983188376,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_seq_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_seq_clause.c/loop_construct_seq_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_seq_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_seq_clause.c\", line 23: error: branching into or out of a parallel region is not allowed\n              break;\n              ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_seq_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16458503200556152
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_seq_clause.c/loop_construct_seq_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_seq_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_seq_clause.c\", line 33: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3150460969773121
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007827563997125253,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_tile_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_tile_clause.c/loop_construct_tile_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_tile_clause.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3649655379995238
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0080062749912031,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_vector_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_vector_clause.c/loop_construct_vector_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 32: warning: expression has no effect [expr_has_no_effect]\n      #pragma acc parallel loop vector(vector_length, vector_stride, vector_offset)\n                                       ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 32: warning: expression has no effect [expr_has_no_effect]\n      #pragma acc parallel loop vector(vector_length, vector_stride, vector_offset)\n                                       ^\n\nNVC++-S-0155-Illegal context for gang(num:) or worker(num:) or vector(length:)  (/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c: 33)\nNVC++/x86-64 Linux 23.5-0: compilation completed with severe errors\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.2647883399913553
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_vector_clause.c/loop_construct_vector_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 55: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3150627189897932
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007842872990295291,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_worker_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_worker_clause.c/loop_construct_worker_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c",
                    "config": 1,
                    "errors": "NVC++-S-1065-Unsupported nested compute construct in compute construct or acc routine (/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c: 13)\nNVC++-S-1061-Procedures called in a compute region must have acc routine information - srand (/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c: 10)\ntest1:\n     10, Accelerator restriction: call to 'srand' with no acc routine information\nmain:\n     28, Generating NVIDIA GPU code\n         30, #pragma acc loop worker(4) /* threadIdx.y */\n     28, Generating implicit copy(failcode) [if not already present]\n     30, Loop is parallelizable\n         Generating implicit firstprivate(failed)\nNVC++/x86-64 Linux 23.5-0: compilation completed with severe errors\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21444423799403012
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_construct.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/parallel_construct.c/parallel_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 9: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 11: error: Specified device type is not a valid device type. Currently accepted device types are 'nvidia, host, multicore, and default'\n      #pragma acc parallel num_gangs(1) num_workers(1) vector_length(1) device_type(acc_device_default)\n                                                                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 15: warning: function \"acc_get_gang_id\" declared implicitly [implicit_func_decl]\n              printf(\"Gang %d, Worker %d, Vector %d: %d\\n\", acc_get_gang_id(), acc_get_worker_id(), acc_get_vector_id(), i);\n                                                            ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 15: warning: function \"acc_get_worker_id\" declared implicitly [implicit_func_decl]\n              printf(\"Gang %d, Worker %d, Vector %d: %d\\n\", acc_get_gang_id(), acc_get_worker_id(), acc_get_vector_id(), i);\n                                                                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 15: warning: function \"acc_get_vector_id\" declared implicitly [implicit_func_decl]\n              printf(\"Gang %d, Worker %d, Vector %d: %d\\n\", acc_get_gang_id(), acc_get_worker_id(), acc_get_vector_id(), i);\n                                                                                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 26: error: Specified device type is not a valid device type. Currently accepted device types are 'nvidia, host, multicore, and default'\n      #pragma acc parallel num_gangs(1) num_workers(1) vector_length(1) device_type(acc_device_default)\n                                                                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 30: warning: function \"acc_get_gang_id\" declared implicitly [implicit_func_decl]\n              printf(\"Gang %d, Worker %d, Vector %d: %d\\n\", acc_get_gang_id(), acc_get_worker_id(), acc_get_vector_id(), i);\n                                                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 30: warning: function \"acc_get_worker_id\" declared implicitly [implicit_func_decl]\n              printf(\"Gang %d, Worker %d, Vector %d: %d\\n\", acc_get_gang_id(), acc_get_worker_id(), acc_get_vector_id(), i);\n                                                                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 30: warning: function \"acc_get_vector_id\" declared implicitly [implicit_func_decl]\n              printf(\"Gang %d, Worker %d, Vector %d: %d\\n\", acc_get_gang_id(), acc_get_worker_id(), acc_get_vector_id(), i);\n                                                                                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 24: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16415091400267556
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_construct.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/serial_construct.c/serial_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c",
                    "config": 1,
                    "errors": "test1:\n     10, Accelerator serial kernel generated\n         Generating NVIDIA GPU code\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46556774599594064
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41522529799840413,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_directive.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/set_directive.c/set_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 27: error: expression must be a modifiable lvalue\n          ACC_DEFAULT_ASYNC_VAR = ACC_ASYNC_DEFAULT;\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 29: error: expression must be a modifiable lvalue\n          ACC_DEFAULT_ASYNC_VAR = ACC_ASYNC_SYNC;\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 31: error: expression must be a modifiable lvalue\n          ACC_DEFAULT_ASYNC_VAR = ACC_ASYNC_NONE;\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 42: error: expression must be a modifiable lvalue\n      ACC_DEVICE_NUM_VAR = device_num;\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 50: error: expression must be a modifiable lvalue\n      ACC_DEVICE_TYPE_VAR = device_type;\n      ^\n\n5 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1641394209873397
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_directive.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/shutdown_directive.c/shutdown_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 12: error: identifier \"ACC_DEVICE_TYPE_GPU\" is undefined\n      if(acc_shutdown(ACC_DEVICE_TYPE_GPU) != ACC_SUCCESS){\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 12: error: identifier \"ACC_SUCCESS\" is undefined\n      if(acc_shutdown(ACC_DEVICE_TYPE_GPU) != ACC_SUCCESS){\n                                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 12: error: expression must have arithmetic or pointer type but has type \"void\"\n      if(acc_shutdown(ACC_DEVICE_TYPE_GPU) != ACC_SUCCESS){\n         ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16476954298559576
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/shutdown_directive.c/shutdown_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 22: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31508182498509996
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0077255190117284656,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "update_directive.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/update_directive.c/update_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/update_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/update_directive.c\", line 9: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/update_directive.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1643863329954911
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "variable_implicit_data_attributes.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/variable_implicit_data_attributes.c/variable_implicit_data_attributes.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\", line 10: warning: function \"acc_get_default_clause\" declared implicitly [implicit_func_decl]\n      if (acc_get_default_clause() == ACC_DEFAULT_NONE) {\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\", line 10: error: identifier \"ACC_DEFAULT_NONE\" is undefined\n      if (acc_get_default_clause() == ACC_DEFAULT_NONE) {\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\", line 12: warning: function \"acc_get_data_clause\" declared implicitly [implicit_func_decl]\n          if (acc_get_data_clause() == ACC_DATA_NONE) {\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\", line 12: error: identifier \"ACC_DATA_NONE\" is undefined\n          if (acc_get_data_clause() == ACC_DATA_NONE) {\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\", line 14: warning: function \"acc_get_reduction_clause\" declared implicitly [implicit_func_decl]\n              if (acc_get_reduction_clause() == ACC_REDUCTION_NONE) {\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\", line 14: error: identifier \"ACC_REDUCTION_NONE\" is undefined\n              if (acc_get_reduction_clause() == ACC_REDUCTION_NONE) {\n                                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\", line 16: warning: function \"acc_get_firstprivate_clause\" declared implicitly [implicit_func_decl]\n                  if (acc_get_firstprivate_clause() == ACC_FIRSTPRIVATE_NONE &&\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\", line 16: error: identifier \"ACC_FIRSTPRIVATE_NONE\" is undefined\n                  if (acc_get_firstprivate_clause() == ACC_FIRSTPRIVATE_NONE &&\n                                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\", line 17: warning: function \"acc_get_private_clause\" declared implicitly [implicit_func_decl]\n                      acc_get_private_clause() == ACC_PRIVATE_NONE &&\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\", line 17: error: identifier \"ACC_PRIVATE_NONE\" is undefined\n                      acc_get_private_clause() == ACC_PRIVATE_NONE &&\n                                                  ^\n\n5 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21431508200475946
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/variable_implicit_data_attributes.c/variable_implicit_data_attributes.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\", line 34: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3151511370087974
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007777970022289082,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "variable_predetermined_data_attributes.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/variable_predetermined_data_attributes.c/variable_predetermined_data_attributes.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3145340989867691
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "Loop variable: 0\nLoop variable: 1\nLoop variable: 2\nLoop variable: 3\nLoop variable: 4\nLoop variable: 5\nLoop variable: 6\nLoop variable: 7\nLoop variable: 8\nLoop variable: 9\n",
                    "result": 1,
                    "runtime": 0.007830649992683902,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "wait_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/wait_clause.c/wait_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\", line 9: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\", line 15: warning: function \"acc_get_thread_num\" declared implicitly [implicit_func_decl]\n          printf(\"Hello from thread %d\\n\", acc_get_thread_num());\n                                           ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\", line 22: warning: function \"acc_get_thread_num\" declared implicitly [implicit_func_decl]\n          printf(\"Hello from thread %d\\n\", acc_get_thread_num());\n                                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\", line 29: warning: function \"acc_get_thread_num\" declared implicitly [implicit_func_decl]\n          printf(\"Hello from thread %d\\n\", acc_get_thread_num());\n                                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\", line 36: warning: function \"acc_get_thread_num\" declared implicitly [implicit_func_decl]\n          printf(\"Hello from thread %d\\n\", acc_get_thread_num());\n                                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\", line 40: error: OpenACC data clause expected\n      #pragma acc enter data wait(1)\n                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\", line 43: warning: function \"acc_get_thread_num\" declared implicitly [implicit_func_decl]\n          printf(\"Hello from thread %d\\n\", acc_get_thread_num());\n                                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\", line 47: error: OpenACC data clause expected\n      #pragma acc exit data wait(1)\n                                   ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\", line 50: warning: function \"acc_get_thread_num\" declared implicitly [implicit_func_decl]\n          printf(\"Hello from thread %d\\n\", acc_get_thread_num());\n                                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\", line 54: error: OpenACC data clause expected\n      #pragma acc update wait(1)\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\", line 57: warning: function \"acc_get_thread_num\" declared implicitly [implicit_func_decl]\n          printf(\"Hello from thread %d\\n\", acc_get_thread_num());\n                                           ^\n\n4 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1649224259890616
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "wait_directive.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/wait_directive.c/wait_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_directive.c\", line 9: error: identifier \"acc_async_sync_all\" is undefined\n      if (acc_async_test(acc_async_sync, acc_async_sync_all) == 0) {\n                                         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_directive.c\", line 9: error: too many arguments in function call\n      if (acc_async_test(acc_async_sync, acc_async_sync_all) == 0) {\n                                         ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_directive.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1642271490127314
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/wait_directive.c/wait_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_directive.c\", line 19: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.315139434998855
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00793578999582678,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ]
    },
    "summary": {
        "1": {
            "1": {
                "1": {
                    "acc_async_test.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_attach.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_create.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "acc_detach.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_default_async.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_num_devices.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_hostptr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_init.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_malloc.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_type.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_shutdown.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_unmap_data.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "async_clause.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "attachment_counter.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "cache_directive.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "combined_constucts.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "compute_construct_async_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_default_clause.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_firstprivate_clause.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_if_clause.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "compute_construct_num_workersclause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_private_clause.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "compute_construct_reduction_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_self_clause.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_vector_length_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_attach_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_copyin_clause.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "data_construct_copyout_clause.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_construct_create_clause.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "data_construct_delete_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_detach_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_deviceptr_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_present_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "declare_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "declare_directive_link_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "enter_data_directive.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_directive.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "host_data_construct_if_present_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "host_data_construct_use_device_clause.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "init_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_construct.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "loop_construct_auto_clause.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_collapse_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_device_type_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_gang_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_private_clause.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "loop_construct_reduction_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_seq_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_tile_clause.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_vector_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_construct.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "shutdown_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "variable_implicit_data_attributes.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "variable_predetermined_data_attributes.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "wait_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    }
                }
            }
        }
    },
    "systems": [
        {
            "id": 1,
            "machine": "x86_64",
            "name": null,
            "node": "leia",
            "processor": "x86_64",
            "release": "5.15.0-82-generic",
            "version": "#91-Ubuntu SMP Mon Aug 14 14:14:14 UTC 2023"
        }
    ],
    "testsuites": [
        {
            "acc_async_test.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if (acc_async_test(0) == 0) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_attach.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a device array\n    int *dev_array;\n    acc_attach(dev_array, sizeof(int) * 10);\n\n    // Fill the device array with random values\n    for (int i = 0; i < 10; i++) {\n        dev_array[i] = rand();\n    }\n\n    // Detach the device array\n    acc_detach(dev_array);\n\n    // Check that the device array is no longer attached\n    if (acc_is_attached(dev_array)) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_create.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a random array of integers\n    int* data = (int*)malloc(sizeof(int) * 10);\n    for (int i = 0; i < 10; i++) {\n        data[i] = rand();\n    }\n\n    // Create a device memory region using acc_create\n    int* d_data = (int*)acc_create(data, sizeof(int) * 10);\n\n    // Check if the data is present in the current device memory\n    if (!acc_is_present(d_data, sizeof(int) * 10)) {\n        err = 1;\n    }\n\n    // Free the device memory region\n    acc_free(d_data);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_detach.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a data array\n    int data[10];\n    for (int i = 0; i < 10; i++) {\n        data[i] = i;\n    }\n\n    // Create a device array\n    int *dev_data;\n    acc_malloc(&dev_data, sizeof(int) * 10);\n\n    // Copy data to device\n    acc_memcpy_to_device(dev_data, data, sizeof(int) * 10);\n\n    // Detach device memory\n    acc_detach(dev_data);\n\n    // Check if device memory is still accessible\n    int *dev_data_ptr = (int *)acc_deviceptr(dev_data);\n    if (dev_data_ptr == NULL) {\n        // Device memory is not accessible\n        err = 1;\n    }\n\n    // Free device memory\n    acc_free(dev_data);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_deviceptr.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_free.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_get_default_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if (acc_get_default_async() != acc_async_noval){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int device_num = acc_get_device_num(ACC_DEVICE_TYPE_GPU);\n    if (device_num == -1) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_type.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_get_num_devices.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int num_devices = acc_get_num_devices(ACC_DEVICE_TYPE_ALL);\n    if (num_devices == 0) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_hostptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a device pointer\n    void *data_dev = acc_deviceptr(malloc(1024));\n\n    // Get the host pointer associated with the device pointer\n    void *data_host = acc_hostptr(data_dev);\n\n    // Check if the host pointer is the same as the incoming address\n    if (data_host != data_dev) {\n        err = 1;\n    }\n\n    // Free the device pointer\n    acc_free(data_dev);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_init.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Initialize the runtime for the specified device type and device number\n    acc_init(ACC_DEVICE_TYPE_GPU);\n    acc_init_device(0, ACC_DEVICE_TYPE_GPU);\n\n    // Check if the device is initialized correctly\n    if (acc_get_device_type() != ACC_DEVICE_TYPE_GPU || acc_get_device_num() != 0) {\n        err = 1;\n    }\n\n    // Shut down the device\n    acc_shutdown();\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_malloc.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_map_data.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_memcpy_d2d.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_memcpy_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_from_device.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_memcpy_to_device.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_on_device.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_set_default_async.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_set_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Set the device number to a random value\n    int dev_num = rand() % 10;\n\n    // Set the device type to a random value\n    acc_device_t dev_type = (acc_device_t)rand() % 2;\n\n    // Call acc_set_device_num with the random device number and type\n    acc_set_device_num(dev_num, dev_type);\n\n    // Check that the device number was set correctly\n    if (acc_get_device_num() != dev_num) {\n        err = 1;\n    }\n\n    // Check that the device type was set correctly\n    if (acc_get_device_type() != dev_type) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_type.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if (acc_set_device_type(ACC_DEVICE_TYPE_GPU) != ACC_SUCCESS) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_shutdown.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_unmap_data.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a host array\n    int *host_array = (int*)malloc(sizeof(int) * 10);\n\n    // Map the host array to a device array\n    int *device_array = (int*)acc_map_data(host_array, sizeof(int) * 10);\n\n    // Unmap the device array\n    acc_unmap_data(device_array);\n\n    // Check that the device array is no longer mapped\n    if (acc_is_present(device_array, sizeof(int) * 10) == 0) {\n        err = 1;\n    }\n\n    // Free the host array\n    free(host_array);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_update_self.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create an async queue\n    acc_async_queue_t queue;\n    acc_async_queue_create(&queue);\n\n    // Create an async operation\n    acc_async_operation_t operation;\n    acc_async_operation_create(&operation, queue);\n\n    // Wait for the async operation to complete\n    acc_wait(operation);\n\n    // Check if the async operation completed successfully\n    if (acc_async_operation_status(operation) != ACC_ASYNC_OPERATION_COMPLETE) {\n        err = 1;\n    }\n\n    // Clean up the async queue and operation\n    acc_async_queue_destroy(queue);\n    acc_async_operation_destroy(operation);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_any.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_wait_async.c": {
                "num tests": 0,
                "tests": {}
            },
            "async_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if (acc_async_sync != acc_async_noval){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "attachment_counter.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Initialize the attachment counter for the pointer\n    int attachment_counter = 0;\n\n    // Allocate a pointer in device memory\n    int* ptr = (int*)acc_malloc(sizeof(int));\n\n    // Attach the pointer to a device address\n    acc_attach(ptr, sizeof(int), 0);\n\n    // Increment the attachment counter\n    attachment_counter++;\n\n    // Detach the pointer from the device address\n    acc_detach(ptr);\n\n    // Decrement the attachment counter\n    attachment_counter--;\n\n    // Check if the attachment counter is zero\n    if (attachment_counter == 0) {\n        // The pointer is detached, so we can free the memory\n        acc_free(ptr);\n    } else {\n        // The pointer is still attached, so we cannot free the memory\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "cache_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int arr[100];\n    int i;\n\n    #pragma acc cache(arr[0:10])\n    for (i = 0; i < 10; i++) {\n        arr[i] = i;\n    }\n\n    #pragma acc cache(arr[10:20])\n    for (i = 10; i < 20; i++) {\n        arr[i] = i;\n    }\n\n    #pragma acc cache(arr[20:30])\n    for (i = 20; i < 30; i++) {\n        arr[i] = i;\n    }\n\n    #pragma acc cache(arr[30:40])\n    for (i = 30; i < 40; i++) {\n        arr[i] = i;\n    }\n\n    #pragma acc cache(arr[40:50])\n    for (i = 40; i < 50; i++) {\n        arr[i] = i;\n    }\n\n    #pragma acc cache(arr[50:60])\n    for (i = 50; i < 60; i++) {\n        arr[i] = i;\n    }\n\n    #pragma acc cache(arr[60:70])\n    for (i = 60; i < 70; i++) {\n        arr[i] = i;\n    }\n\n    #pragma acc cache(arr[70:80])\n    for (i = 70; i < 80; i++) {\n        arr[i] = i;\n    }\n\n    #pragma acc cache(arr[80:90])\n    for (i = 80; i < 90; i++) {\n        arr[i] = i;\n    }\n\n    #pragma acc cache(arr[90:100])\n    for (i = 90; i < 100; i++) {\n        arr[i] = i;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "combined_constucts.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Test parallelloop construct\n    #pragma acc parallel loop\n    for (int i = 0; i < 10; i++) {\n        // Do some work\n    }\n\n    // Test serialloop construct\n    #pragma acc serial loop\n    for (int i = 0; i < 10; i++) {\n        // Do some work\n    }\n\n    // Test kernelsloop construct\n    #pragma acc kernels loop\n    for (int i = 0; i < 10; i++) {\n        // Do some work\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_async_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a data array\n    int data[100];\n    for (int i = 0; i < 100; i++) {\n        data[i] = i;\n    }\n\n    // Create a device array\n    int device_data[100];\n    for (int i = 0; i < 100; i++) {\n        device_data[i] = i;\n    }\n\n    // Create a host array\n    int host_data[100];\n    for (int i = 0; i < 100; i++) {\n        host_data[i] = i;\n    }\n\n    // Create a compute construct with the async clause\n    #pragma acc compute async(device_data)\n    {\n        // Perform some computation on the device data\n        for (int i = 0; i < 100; i++) {\n            device_data[i] += 1;\n        }\n    }\n\n    // Wait for the computation to complete\n    #pragma acc wait\n\n    // Check the results\n    for (int i = 0; i < 100; i++) {\n        if (device_data[i] != host_data[i] + 1) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_default_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if (acc_get_default_async() != acc_async_sync){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_firstprivate_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int x = 0;\n    int y = 0;\n    int z = 0;\n\n    #pragma acc parallel firstprivate(x, y, z)\n    {\n        x = 1;\n        y = 2;\n        z = 3;\n    }\n\n    if (x != 1 || y != 2 || z != 3) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_if_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if (acc_get_device_type() == acc_device_current){\n        // The region will execute on the current device\n        err = 1;\n    } else {\n        // The local thread will execute the region\n        err = 0;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_num_gangs_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "compute_construct_num_workersclause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int num_workers = 4; // set the number of workers to 4\n\n    // create a parallel region with the num_workers clause\n    #pragma acc parallel num_workers(num_workers)\n    {\n        // do some work here\n    }\n\n    // check that the number of workers is correct\n    if (acc_get_num_workers() != num_workers) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_private_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(10 * sizeof(int));\n    int *b = (int *)malloc(10 * sizeof(int));\n\n    #pragma acc parallel private(a, b)\n    {\n        for (int i = 0; i < 10; i++) {\n            a[i] = i;\n            b[i] = i;\n        }\n    }\n\n    for (int i = 0; i < 10; i++) {\n        if (a[i] != b[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_reduction_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int a[100];\n    int b[100];\n    int c[100];\n\n    #pragma acc parallel loop reduction(+:a[0:100])\n    for (int i = 0; i < 100; i++) {\n        a[i] = i;\n    }\n\n    #pragma acc parallel loop reduction(*:b[0:100])\n    for (int i = 0; i < 100; i++) {\n        b[i] = i;\n    }\n\n    #pragma acc parallel loop reduction(max:c[0:100])\n    for (int i = 0; i < 100; i++) {\n        c[i] = i;\n    }\n\n    #pragma acc parallel loop reduction(min:c[0:100])\n    for (int i = 0; i < 100; i++) {\n        c[i] = i;\n    }\n\n    #pragma acc parallel loop reduction(&:a[0:100])\n    for (int i = 0; i < 100; i++) {\n        a[i] = i;\n    }\n\n    #pragma acc parallel loop reduction(|:b[0:100])\n    for (int i = 0; i < 100; i++) {\n        b[i] = i;\n    }\n\n    #pragma acc parallel loop reduction(^:c[0:100])\n    for (int i = 0; i < 100; i++) {\n        c[i] = i;\n    }\n\n    #pragma acc parallel loop reduction(&&:a[0:100])\n    for (int i = 0; i < 100; i++) {\n        a[i] = i;\n    }\n\n    #pragma acc parallel loop reduction(||:b[0:100])\n    for (int i = 0; i < 100; i++) {\n        b[i] = i;\n    }\n\n    #pragma acc parallel loop reduction(eqv:c[0:100])\n    for (int i = 0; i < 100; i++) {\n        c[i] = i;\n    }\n\n    #pragma acc parallel loop reduction(neqv:c[0:100])\n    for (int i = 0; i < 100; i++) {\n        c[i] = i;\n    }\n\n    return 0;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_self_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if (acc_get_device_type() == acc_device_host) {\n        // The self clause is not supported on the host device, so we expect an error\n        err = 1;\n    } else {\n        // The self clause is supported on the device, so we expect the region to execute on the device\n        int device_type = acc_get_device_type();\n        if (device_type != acc_device_host) {\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_vector_length_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int vector_length = 4;\n    int num_workers = 4;\n    int num_vectors = 16;\n\n    // Create a parallel region with the vector_length clause\n    #pragma acc parallel num_workers(num_workers) vector_length(vector_length)\n    {\n        // Create a loop with the vector clause\n        #pragma acc loop vector\n        for (int i = 0; i < num_vectors; i++) {\n            // Do some work\n        }\n    }\n\n    // Check that the vector length was set correctly\n    if (acc_get_vector_length() != vector_length) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a new device memory space\n    int *dev_ptr = (int *)acc_malloc(sizeof(int));\n\n    // Copy data from local memory to device memory\n    acc_memcpy_to_device(dev_ptr, &x, sizeof(int));\n\n    // Execute a kernel on the device\n    acc_kernel_launch(dev_ptr, sizeof(int));\n\n    // Copy data from device memory to local memory\n    acc_memcpy_from_device(dev_ptr, &x, sizeof(int));\n\n    // Free device memory\n    acc_free(dev_ptr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_attach_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a pointer to a variable in shared memory\n    int *ptr = (int *)malloc(sizeof(int));\n    *ptr = 1234;\n\n    // Create a pointer to a variable in private memory\n    int *ptr2 = (int *)malloc(sizeof(int));\n    *ptr2 = 5678;\n\n    // Attach the private variable to the shared variable\n    acc_attach(ptr, ptr2);\n\n    // Check that the private variable is now in shared memory\n    if (*ptr != *ptr2) {\n        err = 1;\n    }\n\n    // Detach the private variable from the shared variable\n    acc_detach(ptr, ptr2);\n\n    // Check that the private variable is no longer in shared memory\n    if (*ptr == *ptr2) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_copyin_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int* a = (int*)malloc(sizeof(int));\n    int* b = (int*)malloc(sizeof(int));\n    int* c = (int*)malloc(sizeof(int));\n\n    #pragma acc enter data copyin(a[0:10], b[0:10], c[0:10])\n    {\n        // Do some work with the data\n    }\n\n    #pragma acc exit data delete(a[0:10], b[0:10], c[0:10])\n\n    free(a);\n    free(b);\n    free(c);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_copyout_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(10 * sizeof(int));\n    int *b = (int *)malloc(10 * sizeof(int));\n\n    #pragma acc data copyout(a[0:10])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            a[i] = i;\n        }\n    }\n\n    #pragma acc data copyout(b[0:10])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            b[i] = i;\n        }\n    }\n\n    for (int i = 0; i < 10; i++) {\n        if (a[i] != b[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_create_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a new array on the device\n    int *arr = (int *)acc_malloc(sizeof(int) * 10);\n\n    // Initialize the array with random values\n    for (int i = 0; i < 10; i++) {\n        arr[i] = rand();\n    }\n\n    // Create a new array on the host\n    int *arr_host = (int *)malloc(sizeof(int) * 10);\n\n    // Copy the array from the device to the host\n    acc_memcpy(arr_host, arr, sizeof(int) * 10);\n\n    // Check that the arrays are equal\n    for (int i = 0; i < 10; i++) {\n        if (arr_host[i] != arr[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free the arrays\n    acc_free(arr);\n    free(arr_host);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_delete_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int* var = (int*)malloc(sizeof(int));\n    *var = 1;\n\n    #pragma acc enter data copyin(var)\n    {\n        #pragma acc delete var\n    }\n\n    if (*var != 0) {\n        err = 1;\n    }\n\n    free(var);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_detach_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(sizeof(int) * 10);\n    int *b = (int *)malloc(sizeof(int) * 10);\n\n    #pragma acc data copy(a[0:10], b[0:10])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            a[i] = i;\n            b[i] = i;\n        }\n\n        #pragma acc detach(a[0:10], b[0:10])\n    }\n\n    for (int i = 0; i < 10; i++) {\n        if (a[i] != i || b[i] != i) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_no_create_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "data_deviceptr_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(sizeof(int) * 10);\n    int *b = (int *)malloc(sizeof(int) * 10);\n\n    #pragma acc data deviceptr(a, b)\n    {\n        for (int i = 0; i < 10; i++) {\n            a[i] = i;\n            b[i] = i;\n        }\n    }\n\n    #pragma acc parallel loop deviceptr(a, b)\n    for (int i = 0; i < 10; i++) {\n        a[i] += b[i];\n    }\n\n    #pragma acc end parallel loop\n\n    for (int i = 0; i < 10; i++) {\n        if (a[i] != i + i) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_present_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int* data = (int*)malloc(sizeof(int));\n    int* present_data = (int*)malloc(sizeof(int));\n\n    // Initialize data and present_data\n    for (int i = 0; i < 10; i++) {\n        data[i] = i;\n        present_data[i] = i;\n    }\n\n    // Use the present clause to ensure that data is present in the current device memory\n    #pragma acc present(data)\n    {\n        // Perform some computation on data\n        for (int i = 0; i < 10; i++) {\n            data[i] += 1;\n        }\n    }\n\n    // Use the present clause to ensure that present_data is present in the current device memory\n    #pragma acc present(present_data)\n    {\n        // Perform some computation on present_data\n        for (int i = 0; i < 10; i++) {\n            present_data[i] += 1;\n        }\n    }\n\n    // Check that data and present_data are equal\n    for (int i = 0; i < 10; i++) {\n        if (data[i] != present_data[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(data);\n    free(present_data);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc declare copy(x)\n    int x = 0;\n\n    #pragma acc declare copyin(y)\n    int y = 0;\n\n    #pragma acc declare copyout(z)\n    int z = 0;\n\n    #pragma acc declare create(w)\n    int w = 0;\n\n    #pragma acc declare present(v)\n    int v = 0;\n\n    #pragma acc declare deviceptr(u)\n    int u = 0;\n\n    #pragma acc declare device_resident(t)\n    int t = 0;\n\n    #pragma acc declare link(s)\n    int s = 0;\n\n    #pragma acc parallel\n    {\n        x = 1;\n        y = 2;\n        z = 3;\n        w = 4;\n        v = 5;\n        u = 6;\n        t = 7;\n        s = 8;\n    }\n\n    if (x != 1 || y != 2 || z != 3 || w != 4 || v != 5 || u != 6 || t != 7 || s != 8) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_directive_device_resident_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "declare_directive_link_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Declare a global variable that will be linked to the device\n    int *global_var;\n\n    // Allocate memory for the global variable on the device\n    global_var = (int *)acc_malloc(sizeof(int));\n\n    // Initialize the global variable on the device\n    *global_var = 1;\n\n    // Declare a link clause for the global variable\n    acc_declare_link(global_var);\n\n    // Use the global variable in an accelerator routine\n    int result = 0;\n    #pragma acc parallel loop\n    for (int i = 0; i < 10; i++) {\n        result += *global_var;\n    }\n\n    // Check the result\n    if (result != 10) {\n        err = 1;\n    }\n\n    // Free the memory for the global variable on the device\n    acc_free(global_var);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a data array\n    int data[10];\n    for (int i = 0; i < 10; i++) {\n        data[i] = rand();\n    }\n\n    // Enter data into the device\n    #pragma acc enter data copyin(data)\n\n    // Verify that the data has been copied to the device\n    for (int i = 0; i < 10; i++) {\n        if (data[i] != data[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Exit data from the device\n    #pragma acc exit data delete(data)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(sizeof(int) * 10);\n    int *b = (int *)malloc(sizeof(int) * 10);\n    int *c = (int *)malloc(sizeof(int) * 10);\n\n    #pragma acc enter data copyin(a[0:10], b[0:10], c[0:10])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            a[i] = i;\n            b[i] = i * 2;\n            c[i] = i * 3;\n        }\n    }\n\n    #pragma acc exit data delete(a[0:10], b[0:10], c[0:10])\n\n    for (int i = 0; i < 10; i++) {\n        if (a[i] != i || b[i] != i * 2 || c[i] != i * 3) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "host_data_construct_if_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "host_data_construct_if_present_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a host_data construct with an if_present clause\n    #pragma acc host_data if_present(var)\n    {\n        // Initialize the var variable\n        var = 1;\n\n        // Check if the var variable is present in the current device memory\n        if (acc_is_present(var)) {\n            // If the var variable is present, set the err variable to 1\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "host_data_construct_use_device_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(sizeof(int) * 10);\n    int *b = (int *)malloc(sizeof(int) * 10);\n\n    // Initialize the arrays with random values\n    for (int i = 0; i < 10; i++) {\n        a[i] = rand();\n        b[i] = rand();\n    }\n\n    // Use the use_device clause to tell the compiler to use the current device address of a and b\n    #pragma acc host_data use_device(a, b)\n    {\n        // Perform some operations on the arrays\n        for (int i = 0; i < 10; i++) {\n            a[i] += b[i];\n        }\n    }\n\n    // Check that the arrays have been updated correctly\n    for (int i = 0; i < 10; i++) {\n        if (a[i] != b[i] + a[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "id": 1,
            "init_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if (acc_init(ACC_DEVICE_TYPE_GPU, 0) != ACC_SUCCESS) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_construct.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc kernels\n    {\n        // Kernel code goes here\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_auto_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int data[10];\n    for (int i = 0; i < 10; i++) {\n        data[i] = rand() % 100;\n    }\n\n    #pragma acc loop auto\n    for (int i = 0; i < 10; i++) {\n        data[i] = data[i] + 1;\n    }\n\n    for (int i = 0; i < 10; i++) {\n        if (data[i] != i + 1) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_collapse_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Set up the loop construct with the collapse clause\n    #pragma acc parallel loop collapse(2)\n    for (int i = 0; i < 360; i++) {\n        for (int j = 0; j < N; j++) {\n            // Do something\n        }\n    }\n\n    // Check if the collapse clause was applied correctly\n    if (acc_get_num_gangs(acc_get_device_type()) != 2) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_device_type_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a device_type clause with a random device type\n    int device_type = rand() % 2;\n    acc_set_device_type(device_type);\n\n    // Create a loop construct with the device_type clause\n    #pragma acc loop device_type(device_type)\n    for (int i = 0; i < 10; i++) {\n        // Do some work\n    }\n\n    // Check if the device type was set correctly\n    if (acc_get_device_type() != device_type) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_gang_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Check if the parent compute construct is a parallel construct or an orphaned loop construct\n    if (acc_get_parent_construct_type() == ACC_PARALLEL ||\n        acc_get_parent_construct_type() == ACC_LOOP) {\n        // Check if the gang clause is present\n        if (acc_get_gang_clause() != NULL) {\n            // Check if the associated dimension is valid\n            if (acc_get_gang_dimension() != 1 && acc_get_gang_dimension() != 2 &&\n                acc_get_gang_dimension() != 3) {\n                err = 1;\n            }\n            // Check if the number of gangs is valid\n            if (acc_get_num_gangs() != 0 && acc_get_num_gangs() != 1 &&\n                acc_get_num_gangs() != 2 && acc_get_num_gangs() != 3) {\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_private_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int n = 10;\n    int a[n][n];\n    int b[n][n];\n    int c[n][n];\n    int tmp[n][n];\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            a[i][j] = 0;\n            b[i][j] = 0;\n            c[i][j] = 0;\n            tmp[i][j] = 0;\n        }\n    }\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            for (int k = 0; k < n; k++) {\n                tmp[i][j] = b[j][k] + c[j][k];\n                a[i][j] = a[i][j] + tmp[i][j];\n            }\n        }\n    }\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            for (int k = 0; k < n; k++) {\n                if (a[i][j] != b[j][k] + c[j][k]) {\n                    err = 1;\n                    break;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_reduction_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int x = 0;\n    int y = 0;\n    int z = 0;\n\n    #pragma acc parallel copy(x) reduction(+:x,y)\n    {\n        #pragma acc loop gang vector reduction(+:x,z)\n        for (int i = 0; i < I; ++i) {\n            x += 1;\n            z += 2;\n        }\n        y += z;\n    }\n\n    if (x != I || y != I * 2) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_seq_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int N = 100;\n    int a[N];\n    int b[N];\n\n    #pragma acc parallel loop seq\n    for (int i = 0; i < N; i++) {\n        a[i] = i;\n        b[i] = i;\n    }\n\n    #pragma acc parallel loop seq\n    for (int i = 0; i < N; i++) {\n        if (a[i] != b[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_tile_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Set up the tile sizes\n    int tile_sizes[3] = {16, 32, 64};\n\n    // Set up the loop nest\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            for (int k = 0; k < 3; k++) {\n                // Do some work\n            }\n        }\n    }\n\n    // Check that the tile sizes are correct\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            for (int k = 0; k < 3; k++) {\n                if (tile_sizes[i] != 16 || tile_sizes[j] != 32 || tile_sizes[k] != 64) {\n                    err = 1;\n                    break;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_vector_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Set up the loop\n    int i, j;\n    int N = 100;\n    int M = 10;\n    int A[N][M];\n    int B[N][M];\n    int C[N][M];\n\n    // Initialize the arrays\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            A[i][j] = i + j;\n            B[i][j] = i - j;\n            C[i][j] = 0;\n        }\n    }\n\n    // Set up the vector clause\n    int vector_length = 4;\n    int vector_stride = 1;\n    int vector_offset = 0;\n\n    // Execute the loop with vector processing\n    #pragma acc parallel loop vector(vector_length, vector_stride, vector_offset)\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            C[i][j] = A[i][j] + B[i][j];\n        }\n    }\n\n    // Check the results\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            if (C[i][j] != A[i][j] + B[i][j]) {\n                err = 1;\n                break;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_worker_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "parallel_construct.c": {
                "num tests": 0,
                "tests": {}
            },
            "serial_construct.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc serial\n    {\n        // Serial code goes here\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_directive.c": {
                "num tests": 0,
                "tests": {}
            },
            "shutdown_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(acc_shutdown(ACC_DEVICE_TYPE_GPU) != ACC_SUCCESS){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "update_directive.c": {
                "num tests": 0,
                "tests": {}
            },
            "variable_implicit_data_attributes.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Check if there is a default(none) clause visible at the compute construct\n    if (acc_get_default_clause() == ACC_DEFAULT_NONE) {\n        // Check if the variable appears in a data clause visible at the compute construct\n        if (acc_get_data_clause() == ACC_DATA_NONE) {\n            // Check if the variable appears in a reduction clause on the compute construct\n            if (acc_get_reduction_clause() == ACC_REDUCTION_NONE) {\n                // Check if the variable appears in a firstprivate, private, or reduction clause on the compute construct\n                if (acc_get_firstprivate_clause() == ACC_FIRSTPRIVATE_NONE &&\n                    acc_get_private_clause() == ACC_PRIVATE_NONE &&\n                    acc_get_reduction_clause() == ACC_REDUCTION_NONE) {\n                    // The variable is not private to a scope lexically enc losed within the compute construct\n                    // and does not appear in a data clause, reduction clause, or firstprivate, private, or reduction clause\n                    // on the compute construct, so it is treated as if it appears in a copy clause\n                    err = 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "variable_predetermined_data_attributes.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a loop variable\n    int i = 0;\n\n    // Associate the loop variable with a loop directive\n    #pragma acc loop\n    for (i = 0; i < 10; i++) {\n        // Do something with the loop variable\n        printf(\"Loop variable: %d\\n\", i);\n    }\n\n    // Check if the loop variable is private to each thread\n    if (i != 0) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "wait_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "wait_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if (acc_async_test(acc_async_sync, acc_async_sync_all) == 0) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            }
        }
    ]
}