{
    "configs": [
        {
            "CC": "nvc",
            "CCFlags": [
                "-acc=gpu",
                "-Minfo=all",
                "-lm"
            ],
            "CC_ACC_Version": "2.6",
            "CPP": "nvc++",
            "CPPFlags": [
                "-acc=gpu",
                "-Minfo=all",
                "-lm"
            ],
            "CPP_ACC_Version": "2.6",
            "FC": "nvfortran",
            "FCFlags": [
                "-acc=gpu",
                "-Minfo=all",
                "-lm"
            ],
            "FC_ACC_Version": "2.6",
            "PostCompileCommands": [],
            "PostRunCommands": [],
            "PreCompileCommands": [],
            "PreRunCommands": [],
            "build_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/build",
            "config_id": -1,
            "config_name": "init_config.txt",
            "env": null,
            "exclude_tags": [],
            "exclude_tests": [
                "acc_testsuite.Fh",
                "acc_testsuite.h",
                "acc_testsuite_declare.h"
            ],
            "export_format": "json",
            "fast": false,
            "id": 1,
            "include_by_default": true,
            "include_tags": [],
            "include_tests": [],
            "keep_build_dir": false,
            "keep_mutated_tests": false,
            "keep_partial_results": false,
            "keep_policy": "on-error",
            "mutated_test_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/build/mutated_tests",
            "mutators": [],
            "partial": false,
            "partial_results_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/build/partial_results",
            "runAll": false,
            "runtime_prefix": "",
            "seed": null,
            "system_name": null,
            "tag_evaluation": null,
            "test_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/Tests",
            "timeout": 10
        }
    ],
    "runs": {
        "acc_async_test.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_async_test.c/acc_async_test.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_async_test.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_async_test.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16467089499928989
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_async_test.c/acc_async_test.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_async_test.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_async_test.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16413587499118876
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_attach.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_attach.c/acc_attach.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16476829099701717
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_attach.c/acc_attach.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11398800900497008
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_copyin.c/acc_copyin.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11454196399427019
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_copyin.c/acc_copyin.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11408802999358159
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_copyout.c/acc_copyout.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyout.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyout.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyout.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16456176800420508
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_copyout.c/acc_copyout.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyout.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyout.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyout.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11395829099637922
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_create.c/acc_create.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1645697929925518
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_create.c/acc_create.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16423304000636563
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_delete.c/acc_delete.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11450801099999808
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_delete.c/acc_delete.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11400462000165135
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_detach.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_detach.c/acc_detach.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16449926800851244
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_detach.c/acc_detach.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11400568200042471
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_deviceptr.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_deviceptr.c/acc_deviceptr.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_deviceptr.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_deviceptr.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_deviceptr.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.114595767998253
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_deviceptr.c/acc_deviceptr.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_deviceptr.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_deviceptr.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_deviceptr.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16422789100033697
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_free.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_free.c/acc_free.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1143757379904855
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_free.c/acc_free.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11402740399353206
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_default_async.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_default_async.c/acc_get_default_async.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11445015999197494
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_default_async.c/acc_get_default_async.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1642320350074442
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_num.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_device_num.c/acc_get_device_num.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16493203400750645
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_device_num.c/acc_get_device_num.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16460850600560661
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_type.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_device_type.c/acc_get_device_type.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_type.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_type.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_type.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16472627100301906
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_device_type.c/acc_get_device_type.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_type.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_type.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_type.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1643714339879807
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_num_devices.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_num_devices.c/acc_get_num_devices.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1647514779906487
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_num_devices.c/acc_get_num_devices.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11430022300919518
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_property.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_property.c/acc_get_property.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1647622489981586
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_property.c/acc_get_property.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21441761699679773
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_hostptr.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_hostptr.c/acc_hostptr.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1148402449907735
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_hostptr.c/acc_hostptr.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16465049600810744
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_init.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_init.c/acc_init.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16498823100118898
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_init.c/acc_init.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16431875299895182
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_is_present.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_is_present.c/acc_is_present.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1644734889996471
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_is_present.c/acc_is_present.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16451715199218597
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_malloc.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_malloc.c/acc_malloc.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11463676500716247
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_malloc.c/acc_malloc.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16428474699205253
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_map_data.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_map_data.c/acc_map_data.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16504676200565882
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_map_data.c/acc_map_data.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11477943799400236
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_d2d.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_d2d.c/acc_memcpy_d2d.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11469061899697408
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_d2d.c/acc_memcpy_d2d.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1647997270047199
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_device.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_device.c/acc_memcpy_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1650311630073702
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_device.c/acc_memcpy_device.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.164205919005326
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_from_device.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_from_device.c/acc_memcpy_from_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16487926300032996
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_from_device.c/acc_memcpy_from_device.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16437111100822221
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_to_device.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_to_device.c/acc_memcpy_to_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_to_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_to_device.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_to_device.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1646980779914884
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_to_device.c/acc_memcpy_to_device.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_to_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_to_device.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_to_device.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11427769099827856
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_on_device.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_on_device.c/acc_on_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_on_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_on_device.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_on_device.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16500353999435902
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_on_device.c/acc_on_device.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_on_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_on_device.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_on_device.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16432397499738727
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_default_async.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_default_async.c/acc_set_default_async.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16476340200460982
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_default_async.c/acc_set_default_async.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11415519799629692
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_num.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_device_num.c/acc_set_device_num.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21470727999985684
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_device_num.c/acc_set_device_num.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.2150300840003183
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_type.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_device_type.c/acc_set_device_type.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1650317549938336
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_device_type.c/acc_set_device_type.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1644129129999783
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_shutdown.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_shutdown.c/acc_shutdown.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16480211599264294
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_shutdown.c/acc_shutdown.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16438822700001765
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_unmap_data.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16478167701279745
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1642893370008096
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_update_device.c/acc_update_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11456845399516169
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_update_device.c/acc_update_device.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1643913820007583
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_update_self.c/acc_update_self.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1651534059928963
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_update_self.c/acc_update_self.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1643698010011576
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait.c/acc_wait.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11449434400128666
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait.c/acc_wait.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1144222059956519
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_any.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait_any.c/acc_wait_any.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_any.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_any.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_any.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16491539300477598
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait_any.c/acc_wait_any.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_any.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_any.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_any.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16426921800302807
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_async.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait_async.c/acc_wait_async.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16486186899419408
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait_async.c/acc_wait_async.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16439394898770843
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "async_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/async_clause.c/async_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16467720600485336
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/async_clause.c/async_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16455782900447957
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_construct.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/atomic_construct.c/atomic_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/atomic_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/atomic_construct.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/atomic_construct.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16475681000156328
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/atomic_construct.c/atomic_construct.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/atomic_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/atomic_construct.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/atomic_construct.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1647088879981311
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "attachment_counter.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/attachment_counter.c/attachment_counter.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/attachment_counter.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/attachment_counter.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/attachment_counter.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16503081200062297
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/attachment_counter.c/attachment_counter.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/attachment_counter.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/attachment_counter.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/attachment_counter.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16477479400055017
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "cache_directive.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/cache_directive.c/cache_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/cache_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/cache_directive.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/cache_directive.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1647212509997189
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/cache_directive.c/cache_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/cache_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/cache_directive.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/cache_directive.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11429085601412226
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "combined_constucts.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/combined_constucts.c/combined_constucts.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16459221599507146
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/combined_constucts.c/combined_constucts.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16431909499806352
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_async_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_async_clause.c/compute_construct_async_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_async_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_async_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_async_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16480892901017796
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_async_clause.c/compute_construct_async_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_async_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_async_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_async_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16445784900861327
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_default_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_default_clause.c/compute_construct_default_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1646694540104363
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_default_clause.c/compute_construct_default_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16446130599069875
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_firstprivate_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_firstprivate_clause.c/compute_construct_firstprivate_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_firstprivate_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_firstprivate_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_firstprivate_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1647664780030027
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_firstprivate_clause.c/compute_construct_firstprivate_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_firstprivate_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_firstprivate_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_firstprivate_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11439201900793705
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_if_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_if_clause.c/compute_construct_if_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_if_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_if_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_if_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16486311200424097
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_if_clause.c/compute_construct_if_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_if_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_if_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_if_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16438344700145535
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_num_gangs_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_num_gangs_clause.c/compute_construct_num_gangs_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16485934400407132
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_num_gangs_clause.c/compute_construct_num_gangs_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16465347200573888
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_num_workersclause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_num_workersclause.c/compute_construct_num_workersclause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16488540499994997
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_num_workersclause.c/compute_construct_num_workersclause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16447825799696147
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_private_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_private_clause.c/compute_construct_private_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1647230149974348
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_private_clause.c/compute_construct_private_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16475803199864458
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_reduction_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_reduction_clause.c/compute_construct_reduction_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11489527899539098
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_reduction_clause.c/compute_construct_reduction_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16424145699420478
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_self_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_self_clause.c/compute_construct_self_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16493366700888146
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_self_clause.c/compute_construct_self_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11447249300545081
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_vector_length_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_vector_length_clause.c/compute_construct_vector_length_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11457655100093689
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_vector_length_clause.c/compute_construct_vector_length_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16439187299693003
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_wait_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_wait_clause.c/compute_construct_wait_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_wait_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_wait_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_wait_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16468965100648347
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_wait_clause.c/compute_construct_wait_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_wait_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_wait_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_wait_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1642993870045757
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_attach_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_attach_clause.c/data_construct_attach_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1649226560111856
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_attach_clause.c/data_construct_attach_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1643677269894397
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_copy_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copy_clause.c/data_construct_copy_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1647978580003837
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copy_clause.c/data_construct_copy_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1644197370042093
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_copyin_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copyin_clause.c/data_construct_copyin_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16479346899723168
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copyin_clause.c/data_construct_copyin_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1647522199928062
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_copyout_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copyout_clause.c/data_construct_copyout_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyout_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyout_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyout_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1648474629910197
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copyout_clause.c/data_construct_copyout_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyout_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyout_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyout_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1143379559944151
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_delete_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_delete_clause.c/data_construct_delete_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16454044698912185
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_delete_clause.c/data_construct_delete_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16439326599356718
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_detach_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_detach_clause.c/data_construct_detach_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_detach_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_detach_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_detach_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1648255699983565
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_detach_clause.c/data_construct_detach_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_detach_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_detach_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_detach_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1644058399979258
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_no_create_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_no_create_clause.c/data_construct_no_create_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16500164600438438
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_no_create_clause.c/data_construct_no_create_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16456146699783858
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_deviceptr_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_deviceptr_clause.c/data_deviceptr_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_deviceptr_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_deviceptr_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_deviceptr_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1648377239907859
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_deviceptr_clause.c/data_deviceptr_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_deviceptr_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_deviceptr_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_deviceptr_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16438599200046156
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_present_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_present_clause.c/data_present_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16528777200437617
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_present_clause.c/data_present_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1644573380035581
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_directive_create_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_create_clause.c/declare_directive_create_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16478705700137652
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_create_clause.c/declare_directive_create_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1643345939955907
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_directive_device_resident_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_device_resident_clause.c/declare_directive_device_resident_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16489383099542465
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_device_resident_clause.c/declare_directive_device_resident_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16452985699288547
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_directive_link_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_link_clause.c/declare_directive_link_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16471187400748022
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_link_clause.c/declare_directive_link_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16452725199633278
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_directive.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/enter_data_directive.c/enter_data_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/enter_data_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/enter_data_directive.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/enter_data_directive.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16449179300980177
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/enter_data_directive.c/enter_data_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/enter_data_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/enter_data_directive.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/enter_data_directive.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11453002199414186
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "host_data_construct_if_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_if_clause.c/host_data_construct_if_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11493717800476588
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_if_clause.c/host_data_construct_if_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16442120900319424
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "host_data_construct_if_present_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_if_present_clause.c/host_data_construct_if_present_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16510204700171016
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_if_present_clause.c/host_data_construct_if_present_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16461640200577676
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "host_data_construct_use_device_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_use_device_clause.c/host_data_construct_use_device_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_use_device_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_use_device_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_use_device_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16481798600580078
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_use_device_clause.c/host_data_construct_use_device_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_use_device_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_use_device_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_use_device_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11431045300560072
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_directive.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/init_directive.c/init_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.164813666997361
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/init_directive.c/init_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16449870700307656
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_construct.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/kernels_construct.c/kernels_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/kernels_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/kernels_construct.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/kernels_construct.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16454626800259575
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/kernels_construct.c/kernels_construct.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/kernels_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/kernels_construct.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/kernels_construct.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16447537299245596
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_auto_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_auto_clause.c/loop_construct_auto_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16508684800646733
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_auto_clause.c/loop_construct_auto_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16433450400654692
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_collapse_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_collapse_clause.c/loop_construct_collapse_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16507150999677833
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_collapse_clause.c/loop_construct_collapse_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16485220100730658
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_device_type_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_device_type_clause.c/loop_construct_device_type_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11453218600945547
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_device_type_clause.c/loop_construct_device_type_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16464829299366102
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_gang_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_gang_clause.c/loop_construct_gang_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16482783399987966
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_gang_clause.c/loop_construct_gang_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16477734899672214
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_independent_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_independent_clause.c/loop_construct_independent_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1650183180026943
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_independent_clause.c/loop_construct_independent_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11426667899650056
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_private_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_private_clause.c/loop_construct_private_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_private_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_private_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_private_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16463341400958598
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_private_clause.c/loop_construct_private_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_private_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_private_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_private_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1645843199949013
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_reduction_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_reduction_clause.c/loop_construct_reduction_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_reduction_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_reduction_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_reduction_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16453885300143156
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_reduction_clause.c/loop_construct_reduction_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_reduction_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_reduction_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_reduction_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16430413600755855
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_seq_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_seq_clause.c/loop_construct_seq_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_seq_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_seq_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_seq_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16481126300641336
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_seq_clause.c/loop_construct_seq_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_seq_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_seq_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_seq_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16428034000273328
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_tile_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_tile_clause.c/loop_construct_tile_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_tile_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_tile_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_tile_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11498551099793985
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_tile_clause.c/loop_construct_tile_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_tile_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_tile_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_tile_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11427263099176344
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_vector_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_vector_clause.c/loop_construct_vector_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1149659530055942
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_vector_clause.c/loop_construct_vector_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16443770099431276
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_worker_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_worker_clause.c/loop_construct_worker_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16505450700060464
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_worker_clause.c/loop_construct_worker_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16441117000067607
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_construct.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/parallel_construct.c/parallel_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16493167300359346
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/parallel_construct.c/parallel_construct.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16446672601159662
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "reference_counters.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/reference_counters.c/reference_counters.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/reference_counters.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/reference_counters.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/reference_counters.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1648189979896415
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/reference_counters.c/reference_counters.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/reference_counters.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/reference_counters.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/reference_counters.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16472379700280726
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_directive.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/routine_directive.c/routine_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/routine_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/routine_directive.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/routine_directive.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16478469299909193
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/routine_directive.c/routine_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/routine_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/routine_directive.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/routine_directive.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16432433501177002
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_construct.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/serial_construct.c/serial_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16475136899680365
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/serial_construct.c/serial_construct.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11413822500617243
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_directive.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/set_directive.c/set_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11479601899918634
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/set_directive.c/set_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1644530310004484
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_directive.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/shutdown_directive.c/shutdown_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11464406999584753
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/shutdown_directive.c/shutdown_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21479548700153828
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "update_directive.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/update_directive.c/update_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/update_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/update_directive.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/update_directive.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16501818799588364
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/update_directive.c/update_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/update_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/update_directive.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/update_directive.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11479259299812838
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "variable_implicit_data_attributes.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/variable_implicit_data_attributes.c/variable_implicit_data_attributes.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1648816670058295
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/variable_implicit_data_attributes.c/variable_implicit_data_attributes.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16456590600137133
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "variable_predetermined_data_attributes.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/variable_predetermined_data_attributes.c/variable_predetermined_data_attributes.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16485352300514933
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/variable_predetermined_data_attributes.c/variable_predetermined_data_attributes.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1144947449938627
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "wait_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/wait_clause.c/wait_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1647458179941168
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/wait_clause.c/wait_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11430092500813771
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "wait_directive.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/wait_directive.c/wait_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_directive.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_directive.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11483871999371331
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/wait_directive.c/wait_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_directive.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_directive.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1642627480032388
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ]
    },
    "summary": {
        "1": {
            "1": {
                "1": {
                    "acc_async_test.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_attach.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_copyin.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_copyout.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_create.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_delete.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_detach.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_deviceptr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_free.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_default_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_device_type.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_num_devices.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_property.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_hostptr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_init.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_is_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_malloc.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_map_data.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_d2d.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_from_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_to_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_on_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_default_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_type.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_shutdown.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_unmap_data.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_update_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_update_self.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_any.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "async_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_construct.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "attachment_counter.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "cache_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "combined_constucts.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_async_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_default_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_firstprivate_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_if_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_num_gangs_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_num_workersclause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_private_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_reduction_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_self_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_vector_length_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_wait_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_attach_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_copy_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_copyin_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_copyout_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_delete_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_detach_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_no_create_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_deviceptr_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_present_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "declare_directive_create_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "declare_directive_device_resident_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "declare_directive_link_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "enter_data_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "host_data_construct_if_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "host_data_construct_if_present_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "host_data_construct_use_device_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_construct.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_auto_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_collapse_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_device_type_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_gang_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_independent_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_private_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_reduction_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_seq_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_tile_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_vector_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_worker_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_construct.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "reference_counters.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "routine_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_construct.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "update_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "variable_implicit_data_attributes.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "variable_predetermined_data_attributes.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "wait_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "wait_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    }
                }
            }
        }
    },
    "systems": [
        {
            "id": 1,
            "machine": "x86_64",
            "name": null,
            "node": "leia",
            "processor": "x86_64",
            "release": "5.15.0-82-generic",
            "version": "#91-Ubuntu SMP Mon Aug 14 14:14:14 UTC 2023"
        }
    ],
    "testsuites": [
        {
            "acc_async_test.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a data array\n    int data[10];\n    for (int i = 0; i < 10; i++) {\n        data[i] = i;\n    }\n\n    // Create a device array\n    int device_data[10];\n    #pragma acc enter data copyin(data[:10])\n    #pragma acc parallel loop async(1)\n    for (int i = 0; i < 10; i++) {\n        device_data[i] = data[i];\n    }\n    #pragma acc exit data delete(device_data[:10])\n\n    // Verify that the data has been copied correctly\n    for (int i = 0; i < 10; i++) {\n        if (device_data[i] != data[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_attach.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a new device\n    acc_device_t device = acc_get_device(acc_device_default);\n\n    // Create a new context\n    acc_context_t context = acc_create_context(device, NULL);\n\n    // Attach the context to the device\n    acc_attach_context(context, device);\n\n    // Create a new data region\n    acc_data_region_t data_region = acc_create_data_region(context, NULL);\n\n    // Attach the data region to the device\n    acc_attach_data_region(data_region, device);\n\n    // Create a new executable data region\n    acc_executable_data_region_t executable_data_region = acc_create_executable_data_region(context, NULL);\n\n    // Attach the executable data region to the device\n    acc_attach_executable_data_region(executable_data_region, device);\n\n    // Create a new construct\n    acc_construct_t construct = acc_create_construct(context, NULL);\n\n    // Attach the construct to the device\n    acc_attach_construct(construct, device);\n\n    // Create a new executable construct\n    acc_executable_construct_t executable_construct = acc_create_executable_construct(context, NULL);\n\n    // Attach the executable construct to the device\n    acc_attach_executable_construct(executable_construct, device);\n\n    // Create a new data region\n    acc_data_region_t data_region2 = acc_create_data_region(context, NULL);\n\n    // Attach the data region to the device\n    acc_attach_data_region(data_region2, device);\n\n    // Create a new executable data region\n    acc_executable_data_region_t executable_data_region2 = acc_create_executable_data_region(context, NULL);\n\n    // Attach the executable data region to the device\n    acc_attach_executable_data_region(executable_data_region2, device);\n\n    // Create a new construct\n    acc_construct_t construct2 = acc_create_construct(context, NULL);\n\n    // Attach the construct to the device\n    acc_attach_construct(construct2, device);\n\n    // Create a new executable construct\n    acc_executable_construct_t executable_construct2 = acc_create_executable_construct(context, NULL);\n\n    // Attach the executable construct to the device\n    acc_attach_executable_construct(executable_construct2, device);\n\n    // Detach the data region from the device\n    acc_detach_data_region(data_region, device);\n\n    // Detach the executable data region from the device\n    acc_detach_executable_data_region(executable_data_region, device);\n\n    // Detach the construct from the device\n    acc_detach_construct(construct, device);\n\n    // Detach the executable construct from the device\n    acc_detach_executable_construct(executable_construct, device);\n\n    // Detach the data region from the device\n    acc_detach_data_region(data_region2, device);\n\n    // Detach the executable data region from the device\n    acc_detach_executable_data_region(executable_data_region2, device);\n\n    // Detach the construct from the device\n    acc_detach_construct(construct2, device);\n\n    // Detach the executable construct from the device\n    acc_detach_executable_construct(executable_construct2, device);\n\n    // Destroy the context\n    acc_destroy_context(context);\n\n    // Destroy the device\n    acc_destroy_device(device);\n\n    return 0;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a data array\n    int data[10];\n    for (int i = 0; i < 10; i++) {\n        data[i] = i;\n    }\n\n    // Copy the data array to the device\n    acc_copyin(data, 10);\n\n    // Verify that the data has been copied correctly\n    for (int i = 0; i < 10; i++) {\n        if (data[i] != i) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(sizeof(int) * 10);\n    int *b = (int *)malloc(sizeof(int) * 10);\n\n    #pragma acc data copy(a[0:10])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            a[i] = i;\n        }\n\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            b[i] = a[i];\n        }\n    }\n\n    for (int i = 0; i < 10; i++) {\n        if (a[i] != b[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a new array on the device\n    int *device_array = (int *)acc_malloc(sizeof(int) * 10);\n\n    // Initialize the array with random values\n    for (int i = 0; i < 10; i++) {\n        device_array[i] = rand();\n    }\n\n    // Create a new array on the host\n    int *host_array = (int *)malloc(sizeof(int) * 10);\n\n    // Copy the device array to the host array\n    acc_memcpy(host_array, device_array, sizeof(int) * 10);\n\n    // Verify that the host array contains the same values as the device array\n    for (int i = 0; i < 10; i++) {\n        if (host_array[i] != device_array[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free the device array\n    acc_free(device_array);\n\n    // Free the host array\n    free(host_array);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a new device\n    acc_device_t device = acc_get_device(acc_device_default);\n\n    // Allocate memory on the device\n    void *device_ptr = acc_malloc(device, 1024);\n\n    // Delete the memory on the device\n    acc_delete(device_ptr);\n\n    // Check that the memory has been deleted\n    if (acc_is_present(device_ptr) != 0) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_detach.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a device array\n    int *dev_array;\n    acc_malloc(&dev_array, sizeof(int) * 10);\n\n    // Initialize the device array with random values\n    for (int i = 0; i < 10; i++) {\n        dev_array[i] = rand();\n    }\n\n    // Detach the device array from the host\n    acc_detach(dev_array);\n\n    // Check if the device array is still accessible from the host\n    for (int i = 0; i < 10; i++) {\n        if (dev_array[i] != rand()) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free the device array\n    acc_free(dev_array);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_deviceptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a device pointer\n    int *device_ptr = acc_deviceptr(malloc(sizeof(int)));\n\n    // Set the device pointer to a random value\n    *device_ptr = rand();\n\n    // Check that the device pointer is not null\n    if (device_ptr == NULL) {\n        err = 1;\n    }\n\n    // Free the device pointer\n    free(device_ptr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_free.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a random array of integers\n    int* arr = (int*)malloc(sizeof(int) * 10);\n    for (int i = 0; i < 10; i++) {\n        arr[i] = rand() % 100;\n    }\n\n    // Create a copy of the array on the device\n    int* dev_arr = (int*)acc_malloc(sizeof(int) * 10);\n    acc_memcpy(dev_arr, arr, sizeof(int) * 10);\n\n    // Free the device memory\n    acc_free(dev_arr);\n\n    // Check that the device memory has been freed\n    if (acc_is_present(dev_arr)) {\n        err = 1;\n    }\n\n    // Free the host memory\n    free(arr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_default_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Set the default async mode to async\n    acc_set_default_async(ACC_ASYNC);\n\n    // Create a data region with the default async mode\n    acc_data_region_t data_region = acc_create_data_region(ACC_DEFAULT_ASYNC);\n\n    // Verify that the data region is created with the default async mode\n    if (data_region->async != ACC_ASYNC) {\n        err = 1;\n    }\n\n    // Clean up the data region\n    acc_destroy_data_region(data_region);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Get the number of devices\n    int num_devices = acc_get_num_devices();\n\n    // Check if the number of devices is greater than 0\n    if (num_devices <= 0) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_type.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int device_type = acc_get_device_type();\n    if (device_type != acc_device_type_host && device_type != acc_device_type_nvidia && device_type != acc_device_type_amd) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_num_devices.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int num_devices = acc_get_num_devices(acc_device_host);\n    if (num_devices != 1) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a new OpenACC context\n    acc_context_t context = acc_create_context();\n\n    // Set the OpenACC device to the current device\n    acc_set_device(context, acc_get_device());\n\n    // Get the OpenACC device properties\n    acc_device_properties_t properties;\n    acc_get_device_properties(context, &properties);\n\n    // Check if the device supports the OpenACC runtime\n    if (!properties.runtime_support) {\n        err = 1;\n    }\n\n    // Check if the device supports the OpenACC data construct\n    if (!properties.data_support) {\n        err = 1;\n    }\n\n    // Check if the device supports the OpenACC executable-data construct\n    if (!properties.executable_data_support) {\n        err = 1;\n    }\n\n    // Check if the device supports the OpenACC construct-independent construct\n    if (!properties.construct_independent_support) {\n        err = 1;\n    }\n\n    // Check if the device supports the OpenACC V:2.0-2.7 version\n    if (!properties.version_support) {\n        err = 1;\n    }\n\n    // Destroy the OpenACC context\n    acc_destroy_context(context);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_hostptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a host pointer to a data array\n    int *data = (int *)malloc(sizeof(int) * 10);\n\n    // Initialize the data array with random values\n    for (int i = 0; i < 10; i++) {\n        data[i] = rand();\n    }\n\n    // Create an OpenACC region and copy the data array to the device\n    #pragma acc enter data copyin(data[:10])\n\n    // Create a device pointer to the data array\n    int *dev_data = (int *)acc_malloc(sizeof(int) * 10);\n\n    // Copy the data array from the host to the device\n    #pragma acc parallel loop present(data[:10])\n    for (int i = 0; i < 10; i++) {\n        dev_data[i] = data[i];\n    }\n\n    // Create a host pointer to the device data array\n    int *host_data = (int *)acc_malloc(sizeof(int) * 10);\n\n    // Copy the data array from the device to the host\n    #pragma acc parallel loop present(dev_data[:10])\n    for (int i = 0; i < 10; i++) {\n        host_data[i] = dev_data[i];\n    }\n\n    // Check that the data array has been copied correctly\n    for (int i = 0; i < 10; i++) {\n        if (data[i] != host_data[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free the device memory\n    #pragma acc exit data delete(dev_data[:10])\n\n    // Free the host memory\n    free(data);\n    free(host_data);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_init.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Initialize the device\n    acc_init(acc_device_default);\n\n    // Create a data array on the device\n    int *data;\n    acc_malloc(data, sizeof(int) * 10);\n\n    // Initialize the data array on the device\n    acc_init(data, sizeof(int) * 10);\n\n    // Verify that the data array is initialized correctly\n    for (int i = 0; i < 10; i++) {\n        if (data[i] != 0) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free the data array\n    acc_free(data);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Check if the OpenACC runtime is present\n    if (!acc_runtime_present()) {\n        err = 1;\n    }\n\n    // Check if the OpenACC data construct is present\n    if (!acc_data_present()) {\n        err = 1;\n    }\n\n    // Check if the OpenACC executable-data construct is present\n    if (!acc_executable_data_present()) {\n        err = 1;\n    }\n\n    // Check if the OpenACC construct-independent construct is present\n    if (!acc_construct_independent_present()) {\n        err = 1;\n    }\n\n    // Check if the OpenACC version is 2.0-2.7\n    if (acc_version() < 2.0 || acc_version() > 2.7) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_malloc.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Allocate memory on the device\n    void *dev_ptr = acc_malloc(1024);\n    if (dev_ptr == NULL) {\n        err = 1;\n    }\n\n    // Initialize the memory on the device\n    acc_memset(dev_ptr, 0, 1024);\n\n    // Free the memory on the device\n    acc_free(dev_ptr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_map_data.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *data = (int *)malloc(sizeof(int) * 10);\n    int *map = (int *)malloc(sizeof(int) * 10);\n\n    // Initialize data and map\n    for (int i = 0; i < 10; i++) {\n        data[i] = i;\n        map[i] = i;\n    }\n\n    // Map data to the device\n    acc_map_data(data, map, 10);\n\n    // Verify that the data has been mapped correctly\n    for (int i = 0; i < 10; i++) {\n        if (data[i] != map[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free memory\n    free(data);\n    free(map);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_d2d.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create two arrays of random values\n    int *a = (int *)malloc(sizeof(int) * 10);\n    int *b = (int *)malloc(sizeof(int) * 10);\n    for (int i = 0; i < 10; i++) {\n        a[i] = rand();\n        b[i] = rand();\n    }\n\n    // Copy the values from a to b using the OpenACC memcpy directive\n    #pragma acc memcpy(b, a, 10)\n\n    // Check that the values in b are the same as the values in a\n    for (int i = 0; i < 10; i++) {\n        if (b[i] != a[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free the memory allocated for the arrays\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a device array\n    int *dev_array;\n    acc_malloc(&dev_array, sizeof(int) * 10);\n\n    // Copy data to the device array\n    acc_memcpy(dev_array, &data, sizeof(int) * 10);\n\n    // Verify that the data was copied correctly\n    for (int i = 0; i < 10; i++) {\n        if (dev_array[i] != data[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free the device array\n    acc_free(dev_array);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_from_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Initialize data\n    int *data = (int *)malloc(sizeof(int) * 10);\n    for (int i = 0; i < 10; i++) {\n        data[i] = i;\n    }\n\n    // Copy data to device\n    int *device_data = (int *)acc_malloc(sizeof(int) * 10);\n    acc_memcpy(device_data, data, sizeof(int) * 10);\n\n    // Verify data on device\n    for (int i = 0; i < 10; i++) {\n        if (device_data[i] != data[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free device memory\n    acc_free(device_data);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_to_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a device memory region\n    acc_device_t device = acc_get_device();\n    acc_device_memory_t device_mem = acc_malloc(device, sizeof(int) * 10);\n\n    // Copy data from host to device\n    int* host_data = (int*)malloc(sizeof(int) * 10);\n    for (int i = 0; i < 10; i++) {\n        host_data[i] = i;\n    }\n    acc_memcpy(device_mem, host_data, sizeof(int) * 10);\n\n    // Verify that the data was copied correctly\n    int* device_data = (int*)acc_device_memory_get_pointer(device_mem);\n    for (int i = 0; i < 10; i++) {\n        if (device_data[i] != host_data[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free device memory\n    acc_free(device_mem);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_on_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a device and a queue\n    acc_device_t device = acc_get_device(acc_device_default);\n    acc_queue_t queue = acc_get_queue(device);\n\n    // Allocate memory on the device\n    size_t size = 1024;\n    void* device_ptr = acc_malloc(size);\n\n    // Initialize the memory on the device\n    acc_memset(device_ptr, 0, size);\n\n    // Create a kernel that writes to the device memory\n    acc_kernel_t kernel = acc_create_kernel(device, \"my_kernel\", 1, 1);\n    acc_set_kernel_arg(kernel, 0, device_ptr);\n\n    // Launch the kernel on the device\n    acc_launch_kernel(kernel, 1, 1, 1);\n\n    // Synchronize the device\n    acc_synchronize_device(device);\n\n    // Check the result\n    if (acc_get_device_memory(device_ptr) != 0) {\n        err = 1;\n    }\n\n    // Free the device memory\n    acc_free(device_ptr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_default_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Set the default async mode to true\n    acc_set_default_async(true);\n\n    // Create a data array\n    int data[10];\n\n    // Initialize the data array with random values\n    for (int i = 0; i < 10; i++) {\n        data[i] = rand();\n    }\n\n    // Create a host array\n    int host[10];\n\n    // Copy the data array to the host array\n    acc_copy(host, data, 10);\n\n    // Check if the data array is equal to the host array\n    for (int i = 0; i < 10; i++) {\n        if (data[i] != host[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Set the default async mode to false\n    acc_set_default_async(false);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Set the device number to a random value\n    int device_num = rand() % 10;\n\n    // Create an OpenACC device object\n    acc_device_t device;\n    acc_device_create(&device, device_num);\n\n    // Set the device number on the device object\n    acc_set_device_num(device, device_num);\n\n    // Verify that the device number was set correctly\n    if (acc_get_device_num(device) != device_num) {\n        err = 1;\n    }\n\n    // Clean up the device object\n    acc_device_destroy(device);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_type.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Set the device type to GPU\n    acc_set_device_type(ACC_DEVICE_TYPE_GPU);\n\n    // Check if the device type is set correctly\n    if (acc_get_device_type() != ACC_DEVICE_TYPE_GPU) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_shutdown.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if (acc_shutdown() != 0) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_unmap_data.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a new data region\n    acc_data_region_t data_region;\n    data_region.type = ACC_DATA_REGION_TYPE_UNDEFINED;\n    data_region.size = 0;\n    data_region.host_ptr = NULL;\n    data_region.device_ptr = NULL;\n\n    // Map the data region to the device\n    acc_map_data(data_region, ACC_DATA_REGION_TYPE_UNDEFINED, 0, 0, 0, 0, 0);\n\n    // Unmap the data region from the device\n    acc_unmap_data(data_region, ACC_DATA_REGION_TYPE_UNDEFINED, 0, 0, 0, 0, 0);\n\n    // Check that the data region is no longer mapped to the device\n    if (data_region.device_ptr != NULL) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a device array\n    int *device_array = (int *)acc_malloc(sizeof(int) * 10);\n\n    // Initialize the device array with random values\n    for (int i = 0; i < 10; i++) {\n        device_array[i] = rand();\n    }\n\n    // Update the device array with new values\n    for (int i = 0; i < 10; i++) {\n        device_array[i] = i * 2;\n    }\n\n    // Verify that the device array has been updated correctly\n    for (int i = 0; i < 10; i++) {\n        if (device_array[i] != i * 2) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free the device array\n    acc_free(device_array);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Initialize data\n    int data[100];\n    for (int i = 0; i < 100; i++) {\n        data[i] = i;\n    }\n\n    // Update data using acc_update_self\n    #pragma acc update self(data[0:100])\n\n    // Check that data has been updated\n    for (int i = 0; i < 100; i++) {\n        if (data[i] != i + 1) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a new OpenACC context\n    acc_context_t context = acc_create_context(ACC_DEVICE_TYPE_GPU, ACC_DEVICE_TYPE_GPU);\n\n    // Create a new OpenACC queue\n    acc_queue_t queue = acc_create_queue(context, ACC_QUEUE_TYPE_DEFAULT);\n\n    // Create a new OpenACC event\n    acc_event_t event = acc_create_event(context, ACC_EVENT_TYPE_DEFAULT);\n\n    // Wait for the event to complete\n    acc_wait(event, queue);\n\n    // Check if the event has completed\n    if (acc_event_test(event) != ACC_EVENT_COMPLETE){\n        err = 1;\n    }\n\n    // Destroy the OpenACC context and queue\n    acc_destroy_context(context);\n    acc_destroy_queue(queue);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_any.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a device array\n    int *dev_array;\n    acc_malloc(&dev_array, sizeof(int) * 10);\n\n    // Initialize the device array with random values\n    for (int i = 0; i < 10; i++) {\n        dev_array[i] = rand() % 100;\n    }\n\n    // Create a host array\n    int *host_array = (int *)acc_malloc(sizeof(int) * 10);\n\n    // Copy the device array to the host array\n    acc_memcpy(host_array, dev_array, sizeof(int) * 10);\n\n    // Wait for the device array to be ready\n    acc_wait(dev_array, 10);\n\n    // Check if the device array is ready\n    if (acc_is_ready(dev_array, 10) == 0) {\n        // The device array is not ready, so we need to wait for it to be ready\n        acc_wait(dev_array, 10);\n    }\n\n    // Copy the host array back to the device array\n    acc_memcpy(dev_array, host_array, sizeof(int) * 10);\n\n    // Free the device array\n    acc_free(dev_array);\n\n    // Free the host array\n    acc_free(host_array);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a new OpenACC context\n    acc_context_t context = acc_create_context(ACC_DEVICE_HOST, ACC_CONTEXT_DEFAULT);\n\n    // Create a new OpenACC queue\n    acc_queue_t queue = acc_create_queue(context, ACC_QUEUE_DEFAULT);\n\n    // Create a new OpenACC event\n    acc_event_t event = acc_create_event(context, ACC_EVENT_DEFAULT);\n\n    // Set the event to be triggered when the queue is empty\n    acc_set_event(queue, event, ACC_EVENT_QUEUE_EMPTY);\n\n    // Wait for the event to be triggered\n    acc_wait_async(queue, event);\n\n    // Check if the event was triggered\n    if (acc_get_event_status(event) == ACC_EVENT_STATUS_TRIGGERED) {\n        // The event was triggered, so the queue is empty\n        err = 1;\n    }\n\n    // Clean up the OpenACC context and queue\n    acc_destroy_context(context);\n    acc_destroy_queue(queue);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "async_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(10 * sizeof(int));\n    int *b = (int *)malloc(10 * sizeof(int));\n    int *c = (int *)malloc(10 * sizeof(int));\n\n    #pragma acc parallel loop async(a)\n    for (int i = 0; i < 10; i++) {\n        a[i] = i;\n    }\n\n    #pragma acc parallel loop async(b)\n    for (int i = 0; i < 10; i++) {\n        b[i] = i;\n    }\n\n    #pragma acc parallel loop async(c)\n    for (int i = 0; i < 10; i++) {\n        c[i] = i;\n    }\n\n    #pragma acc wait\n\n    for (int i = 0; i < 10; i++) {\n        if (a[i] != i || b[i] != i || c[i] != i) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_construct.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(sizeof(int) * 10);\n    int *b = (int *)malloc(sizeof(int) * 10);\n\n    #pragma acc atomic\n    {\n        a[0] = 1;\n        b[0] = 2;\n    }\n\n    if (a[0] != 1 || b[0] != 2){\n        err = 1;\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "attachment_counter.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a new attachment counter\n    acc_attach_counter(0, 0, 0, 0, 0);\n\n    // Increment the attachment counter\n    acc_attach_counter(0, 0, 0, 0, 1);\n\n    // Check if the attachment counter is equal to 1\n    if (acc_attach_counter(0, 0, 0, 0, 0) != 1) {\n        err = 1;\n    }\n\n    // Decrement the attachment counter\n    acc_attach_counter(0, 0, 0, 0, -1);\n\n    // Check if the attachment counter is equal to 0\n    if (acc_attach_counter(0, 0, 0, 0, 0) != 0) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "cache_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc cache(device)\n    {\n        int *a = (int *)malloc(sizeof(int) * 10);\n        int *b = (int *)malloc(sizeof(int) * 10);\n        int *c = (int *)malloc(sizeof(int) * 10);\n\n        #pragma acc data copy(a[0:10], b[0:10], c[0:10])\n        {\n            for (int i = 0; i < 10; i++) {\n                a[i] = i;\n                b[i] = i * 2;\n                c[i] = a[i] + b[i];\n            }\n        }\n\n        #pragma acc cache(a[0:10], b[0:10], c[0:10])\n        {\n            for (int i = 0; i < 10; i++) {\n                a[i] = i * 2;\n                b[i] = i * 3;\n                c[i] = a[i] + b[i];\n            }\n        }\n\n        #pragma acc cache(a[0:10], b[0:10], c[0:10])\n        {\n            for (int i = 0; i < 10; i++) {\n                a[i] = i * 3;\n                b[i] = i * 4;\n                c[i] = a[i] + b[i];\n            }\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "combined_constucts.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a random number between 1 and 10\n    int num = rand() % 10 + 1;\n\n    // Create a parallel region with the num threads\n    #pragma acc parallel num_threads(num)\n    {\n        // Create a data region with the num threads\n        #pragma acc data num_threads(num)\n        {\n            // Create a loop with the num threads\n            #pragma acc loop num_threads(num)\n            for (int i = 0; i < num; i++) {\n                // Do some work\n                #pragma acc loop num_threads(num)\n                for (int j = 0; j < num; j++) {\n                    // Do some work\n                }\n            }\n        }\n    }\n\n    // Check if the data region was executed correctly\n    if (acc_get_num_threads() != num) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_async_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a random number between 1 and 100\n    int num = rand() % 100 + 1;\n\n    // Create an array of size num\n    int* arr = (int*)malloc(num * sizeof(int));\n\n    // Initialize the array with random values\n    for (int i = 0; i < num; i++) {\n        arr[i] = rand() % 100;\n    }\n\n    // Create a parallel region with the async clause\n    #pragma acc parallel async(arr)\n    {\n        // Perform some computation on the array\n        for (int i = 0; i < num; i++) {\n            arr[i] = arr[i] + 1;\n        }\n    }\n\n    // Check that the array has been updated correctly\n    for (int i = 0; i < num; i++) {\n        if (arr[i] != arr[i] + 1) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free the array\n    free(arr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_default_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a random number between 1 and 10\n    int num = rand() % 10 + 1;\n\n    // Create an array of integers with the same size as the number of threads\n    int* arr = (int*)malloc(num * sizeof(int));\n\n    // Initialize the array with random values\n    for (int i = 0; i < num; i++) {\n        arr[i] = rand() % 100;\n    }\n\n    // Create a compute construct with the default clause\n    #pragma acc compute default(present)\n    {\n        // Compute the sum of the array elements\n        int sum = 0;\n        for (int i = 0; i < num; i++) {\n            sum += arr[i];\n        }\n\n        // Check if the sum is correct\n        if (sum != num * (num + 1) / 2) {\n            err = 1;\n        }\n    }\n\n    free(arr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_firstprivate_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int a = 1;\n    int b = 2;\n    int c = 3;\n\n    #pragma acc compute firstprivate(a, b, c)\n    {\n        a = a + b + c;\n    }\n\n    if (a != 6){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_if_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if (acc_get_num_devices(acc_device_host) > 0) {\n        // If there are any host devices, we can use the if clause\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_num_gangs_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int num_gangs = 10;\n    int num_workers = 10;\n    int num_threads = num_gangs * num_workers;\n\n    // Create a parallel region with the specified number of gangs and workers\n    #pragma acc parallel num_gangs(num_gangs) num_workers(num_workers)\n    {\n        // Create a loop with the specified number of iterations\n        #pragma acc loop\n        for (int i = 0; i < num_threads; i++) {\n            // Do some work\n            #pragma acc loop\n            for (int j = 0; j < 10; j++) {\n                // Do some more work\n            }\n        }\n    }\n\n    // Check that the number of threads created matches the expected number\n    if (num_threads != acc_get_num_threads()) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_num_workersclause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int num_workers = 4; // Set the number of workers to 4\n    int num_threads = 8; // Set the number of threads to 8\n\n    // Create a parallel region with the specified number of workers\n    #pragma acc parallel num_workers(num_workers)\n    {\n        // Create a loop with the specified number of iterations\n        #pragma acc loop\n        for (int i = 0; i < num_threads; i++) {\n            // Do some work\n        }\n    }\n\n    // Check that the number of workers is correct\n    if (num_workers != acc_get_num_workers()) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_private_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(sizeof(int) * 10);\n    int *b = (int *)malloc(sizeof(int) * 10);\n    int *c = (int *)malloc(sizeof(int) * 10);\n\n    #pragma acc parallel loop private(a, b, c)\n    for (int i = 0; i < 10; i++) {\n        a[i] = i;\n        b[i] = i * 2;\n        c[i] = a[i] + b[i];\n    }\n\n    #pragma acc parallel loop private(a, b, c)\n    for (int i = 0; i < 10; i++) {\n        a[i] = i * 2;\n        b[i] = i * 3;\n        c[i] = a[i] + b[i];\n    }\n\n    #pragma acc parallel loop private(a, b, c)\n    for (int i = 0; i < 10; i++) {\n        a[i] = i * 3;\n        b[i] = i * 4;\n        c[i] = a[i] + b[i];\n    }\n\n    #pragma acc parallel loop private(a, b, c)\n    for (int i = 0; i < 10; i++) {\n        a[i] = i * 4;\n        b[i] = i * 5;\n        c[i] = a[i] + b[i];\n    }\n\n    #pragma acc parallel loop private(a, b, c)\n    for (int i = 0; i < 10; i++) {\n        a[i] = i * 5;\n        b[i] = i * 6;\n        c[i] = a[i] + b[i];\n    }\n\n    #pragma acc parallel loop private(a, b, c)\n    for (int i = 0; i < 10; i++) {\n        a[i] = i * 6;\n        b[i] = i * 7;\n        c[i] = a[i] + b[i];\n    }\n\n    #pragma acc parallel loop private(a, b, c)\n    for (int i = 0; i < 10; i++) {\n        a[i] = i * 7;\n        b[i] = i * 8;\n        c[i] = a[i] + b[i];\n    }\n\n    #pragma acc parallel loop private(a, b, c)\n    for (int i = 0; i < 10; i++) {\n        a[i] = i * 8;\n        b[i] = i * 9;\n        c[i] = a[i] + b[i];\n    }\n\n    #pragma acc parallel loop private(a, b, c)\n    for (int i = 0; i < 10; i++) {\n        a[i] = i * 9;\n        b[i] = i * 10;\n        c[i] = a[i] + b[i];\n    }\n\n    for (int i = 0; i < 10; i++) {\n        if (a[i] != i * 10 || b[i] != i * 10 || c[i] != i * 20) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_reduction_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int a[100];\n    int b[100];\n    int c[100];\n\n    // Initialize arrays\n    for (int i = 0; i < 100; i++) {\n        a[i] = i;\n        b[i] = i;\n        c[i] = 0;\n    }\n\n    // Perform reduction\n    #pragma acc parallel loop reduction(+:c[0:100])\n    for (int i = 0; i < 100; i++) {\n        c[i] += a[i] + b[i];\n    }\n\n    // Check result\n    for (int i = 0; i < 100; i++) {\n        if (c[i] != a[i] + b[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_self_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(10 * sizeof(int));\n    int *b = (int *)malloc(10 * sizeof(int));\n\n    #pragma acc parallel loop self(a[0:10])\n    for (int i = 0; i < 10; i++) {\n        a[i] = i;\n    }\n\n    #pragma acc parallel loop self(b[0:10])\n    for (int i = 0; i < 10; i++) {\n        b[i] = i;\n    }\n\n    #pragma acc parallel loop self(a[0:10], b[0:10])\n    for (int i = 0; i < 10; i++) {\n        a[i] += b[i];\n    }\n\n    #pragma acc parallel loop self(a[0:10])\n    for (int i = 0; i < 10; i++) {\n        if (a[i] != i + i) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_vector_length_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int vector_length = 16;\n    int num_vectors = 10;\n    int num_elements = vector_length * num_vectors;\n\n    int* data = (int*)malloc(num_elements * sizeof(int));\n    int* result = (int*)malloc(num_elements * sizeof(int));\n\n    #pragma acc parallel loop vector_length(vector_length)\n    for (int i = 0; i < num_vectors; i++) {\n        for (int j = 0; j < vector_length; j++) {\n            result[i * vector_length + j] = data[i * vector_length + j] + 1;\n        }\n    }\n\n    #pragma acc parallel loop vector_length(vector_length)\n    for (int i = 0; i < num_vectors; i++) {\n        for (int j = 0; j < vector_length; j++) {\n            if (result[i * vector_length + j] != data[i * vector_length + j] + 1) {\n                err = 1;\n                break;\n            }\n        }\n    }\n\n    free(data);\n    free(result);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_wait_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc parallel loop\n    for (int i = 0; i < 10; i++) {\n        #pragma acc loop\n        for (int j = 0; j < 10; j++) {\n            #pragma acc wait\n            int result = i + j;\n            if (result != i + j) {\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_attach_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a data construct with a single data region\n    acc_data_construct_t data_construct;\n    data_construct.type = ACC_DATA_CONSTRUCT_TYPE_DATA;\n    data_construct.data_region = ACC_DATA_REGION_TYPE_HOST;\n    data_construct.data_region_size = 1;\n    data_construct.data_region_ptr = (void*)&data;\n    data_construct.data_region_ptr_size = sizeof(data);\n\n    // Attach the data construct to the current device\n    acc_attach_data_construct(&data_construct);\n\n    // Verify that the data construct is attached to the current device\n    if (acc_get_data_construct_device(&data_construct) != acc_get_current_device()) {\n        err = 1;\n    }\n\n    // Detach the data construct from the current device\n    acc_detach_data_construct(&data_construct);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_copy_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a data array\n    int data[10];\n    for (int i = 0; i < 10; i++) {\n        data[i] = rand();\n    }\n\n    // Copy the data array to the device\n    #pragma acc enter data copyin(data[:10])\n\n    // Modify the data array on the device\n    #pragma acc parallel loop\n    for (int i = 0; i < 10; i++) {\n        data[i] += 1;\n    }\n\n    // Copy the modified data array back to the host\n    #pragma acc exit data copyout(data[:10])\n\n    // Check that the data array has been modified correctly\n    for (int i = 0; i < 10; i++) {\n        if (data[i] != rand() + 1) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_copyin_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(sizeof(int) * 10);\n    int *b = (int *)malloc(sizeof(int) * 10);\n\n    #pragma acc data copyin(a[0:10])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            a[i] = i;\n        }\n    }\n\n    #pragma acc data copyin(b[0:10])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            b[i] = i;\n        }\n    }\n\n    #pragma acc data copyin(a[0:10], b[0:10])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            a[i] = b[i];\n        }\n    }\n\n    #pragma acc data copyin(a[0:10])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            if (a[i] != b[i]) {\n                err = 1;\n                break;\n            }\n        }\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_copyout_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(sizeof(int) * 10);\n    int *b = (int *)malloc(sizeof(int) * 10);\n\n    #pragma acc data copyout(a[0:10])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            a[i] = i;\n        }\n    }\n\n    #pragma acc data copyout(b[0:10])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            b[i] = i;\n        }\n    }\n\n    for (int i = 0; i < 10; i++) {\n        if (a[i] != b[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_delete_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a data array\n    int data[10];\n    for (int i = 0; i < 10; i++) {\n        data[i] = i;\n    }\n\n    // Create a delete clause\n    #pragma acc delete(data)\n\n    // Check that the data array has been deleted\n    for (int i = 0; i < 10; i++) {\n        if (data[i] != 0) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_detach_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(10 * sizeof(int));\n    int *b = (int *)malloc(10 * sizeof(int));\n    int *c = (int *)malloc(10 * sizeof(int));\n\n    #pragma acc data copy(a[0:10], b[0:10], c[0:10])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; ++i) {\n            a[i] = i;\n            b[i] = i * 2;\n            c[i] = i * 3;\n        }\n\n        #pragma acc detach(a, b, c)\n    }\n\n    for (int i = 0; i < 10; ++i) {\n        if (a[i] != i || b[i] != i * 2 || c[i] != i * 3) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_no_create_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a data region with the no_create clause\n    #pragma acc data no_create(a[0:n])\n    {\n        // Allocate memory for the data region\n        a = (int*)malloc(n*sizeof(int));\n\n        // Initialize the data region\n        for (int i = 0; i < n; i++) {\n            a[i] = i;\n        }\n    }\n\n    // Check that the data region has not been created\n    if (a == NULL) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_deviceptr_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *data;\n    int *deviceptr;\n\n    // Allocate memory on the device\n    deviceptr = (int *)acc_malloc(sizeof(int));\n\n    // Initialize the data on the host\n    data = (int *)malloc(sizeof(int));\n    data[0] = 1;\n\n    // Copy the data to the device\n    acc_memcpy_to_device(deviceptr, data, sizeof(int));\n\n    // Verify that the data has been copied correctly\n    if (deviceptr[0] != data[0]){\n        err = 1;\n    }\n\n    // Free the memory on the device\n    acc_free(deviceptr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_present_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a data region with the present clause\n    #pragma acc data present(a)\n    {\n        // Initialize the data\n        int a[10];\n        for (int i = 0; i < 10; i++) {\n            a[i] = i;\n        }\n\n        // Verify that the data is present on the device\n        #pragma acc host_data use_device(a)\n        {\n            for (int i = 0; i < 10; i++) {\n                if (a[i] != i) {\n                    err = 1;\n                    break;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_directive_create_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a new array on the device\n    int *device_array = (int *)acc_malloc(sizeof(int) * 10);\n\n    // Initialize the array on the device\n    for (int i = 0; i < 10; i++) {\n        device_array[i] = i;\n    }\n\n    // Declare the array as a device array\n    acc_declare_device_array(device_array, 10);\n\n    // Verify that the array is on the device\n    if (acc_is_device_array(device_array) != 1) {\n        err = 1;\n    }\n\n    // Free the device array\n    acc_free(device_array);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_directive_device_resident_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Declare a device-resident variable\n    int *device_resident_var;\n\n    // Allocate memory on the device for the variable\n    device_resident_var = (int *)acc_malloc(sizeof(int));\n\n    // Initialize the variable on the device\n    *device_resident_var = 1;\n\n    // Use the variable in a kernel\n    #pragma acc parallel loop device_resident(device_resident_var)\n    for (int i = 0; i < 10; i++) {\n        device_resident_var[i] = i;\n    }\n\n    // Check that the variable was updated correctly\n    for (int i = 0; i < 10; i++) {\n        if (device_resident_var[i] != i) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free the memory on the device\n    acc_free(device_resident_var);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_directive_link_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Declare a variable that will be used to store the result of the link clause\n    int result;\n\n    // Use the link clause to link the variable to a specific device\n    #pragma acc declare link(result) device(gpu)\n\n    // Perform some computation on the device\n    #pragma acc parallel loop device(gpu)\n    for (int i = 0; i < 100; i++) {\n        result += i;\n    }\n\n    // Check that the result is correct\n    if (result != 4950) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a data region with the enter data directive\n    #pragma acc enter data copyin(array[0:N])\n    {\n        // Initialize the array with random values\n        for (int i = 0; i < N; i++) {\n            array[i] = rand();\n        }\n    }\n\n    // Check that the array has been copied correctly\n    for (int i = 0; i < N; i++) {\n        if (array[i] != rand()) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "host_data_construct_if_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc host_data if(rand() % 2 == 0)\n    {\n        // Code to be executed on the host\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "host_data_construct_if_present_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc host_data if_present(device)\n    {\n        // This code will only be executed if the device is present\n        // and the host_data construct is supported.\n        // You can add your own code here to test the functionality.\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "host_data_construct_use_device_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)acc_malloc(sizeof(int) * N);\n    int *b = (int *)acc_malloc(sizeof(int) * N);\n\n    #pragma acc host_data use_device(a, b)\n    {\n        for (int i = 0; i < N; i++) {\n            a[i] = i;\n            b[i] = i;\n        }\n    }\n\n    #pragma acc parallel loop device(a, b)\n    for (int i = 0; i < N; i++) {\n        a[i] += b[i];\n    }\n\n    #pragma acc parallel loop device(a, b)\n    for (int i = 0; i < N; i++) {\n        b[i] += a[i];\n    }\n\n    #pragma acc host_data use_device(a, b)\n    {\n        for (int i = 0; i < N; i++) {\n            if (a[i] != b[i]) {\n                err = 1;\n                break;\n            }\n        }\n    }\n\n    acc_free(a);\n    acc_free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "id": 1,
            "init_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init\n    {\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n    }\n\n    if (a != 0 || b != 0 || c != 0 || d != 0 || e != 0 || f != 0 || g != 0 || h != 0 || i != 0 || j != 0 || k != 0 || l != 0 || m != 0 || n != 0 || o != 0 || p != 0 || q != 0 || r != 0 || s != 0 || t != 0 || u != 0 || v != 0 || w != 0 || x != 0 || y != 0 || z != 0) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_construct.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Initialize data\n    int *data = (int *)malloc(sizeof(int) * 10);\n    for (int i = 0; i < 10; i++) {\n        data[i] = i;\n    }\n\n    // Create a kernel\n    acc_kernel kernel;\n    kernel.name = \"my_kernel\";\n    kernel.num_args = 1;\n    kernel.args[0] = data;\n    kernel.num_threads = 10;\n    kernel.num_blocks = 1;\n    kernel.shared_memory_size = 0;\n    kernel.grid_size = 10;\n    kernel.block_size = 1;\n    kernel.device_type = ACC_DEVICE_TYPE_GPU;\n    kernel.device_id = 0;\n\n    // Launch the kernel\n    acc_launch_kernel(kernel);\n\n    // Verify the results\n    for (int i = 0; i < 10; i++) {\n        if (data[i] != i) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free data\n    free(data);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_auto_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int num_devices = acc_get_num_devices(acc_device_default);\n    int device_id = acc_get_device_id(acc_device_default);\n\n    // Create a random number of iterations for the loop\n    int num_iterations = rand() % 100;\n\n    // Create a loop with the auto clause\n    #pragma acc loop auto\n    for (int i = 0; i < num_iterations; i++) {\n        // Do some work\n    }\n\n    // Check that the loop was executed on the correct device\n    if (acc_get_device_id(acc_device_default) != device_id) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_collapse_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int num_loops = 10;\n    int num_iterations = 100;\n    int num_threads = 4;\n\n    // Initialize data\n    int* data = (int*)malloc(num_loops * num_iterations * sizeof(int));\n    for (int i = 0; i < num_loops * num_iterations; i++) {\n        data[i] = i;\n    }\n\n    // Create OpenACC data environment\n    acc_create(data, num_loops * num_iterations * sizeof(int));\n\n    // Create OpenACC loop construct\n    acc_loop(num_loops, num_iterations, num_threads, data);\n\n    // Collapse loop construct\n    acc_collapse(num_loops, num_iterations, num_threads, data);\n\n    // Verify that the data has been updated correctly\n    for (int i = 0; i < num_loops * num_iterations; i++) {\n        if (data[i] != i) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Clean up\n    acc_delete(data);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_device_type_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Initialize the device type\n    int device_type = 0;\n\n    // Create a loop construct with the device_type clause\n    #pragma acc loop device_type(device_type)\n    for (int i = 0; i < 10; i++) {\n        // Do some work on the device\n        #pragma acc parallel loop device_type(device_type)\n        for (int j = 0; j < 10; j++) {\n            // Do some work on the device\n        }\n    }\n\n    // Check if the device type is correct\n    if (device_type != 0) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_gang_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Initialize the gang clause\n    acc_init_gang(acc_get_num_gangs());\n\n    // Create a loop with the gang clause\n    for (int i = 0; i < 10; i++) {\n        // Check if the gang clause is working properly\n        if (acc_get_gang_id() != i) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Clean up the gang clause\n    acc_finalize_gang();\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_independent_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a loop construct with independent clause\n    #pragma acc loop independent\n    for (int i = 0; i < 10; i++) {\n        // Do some computation\n        int result = rand() % 10;\n        // Check if the result is correct\n        if (result != i) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_private_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int a[100];\n    int b[100];\n    int c[100];\n\n    // Initialize arrays\n    for (int i = 0; i < 100; i++) {\n        a[i] = i;\n        b[i] = i;\n        c[i] = i;\n    }\n\n    // Use the private clause to make the arrays private to each thread\n    #pragma acc loop private(a, b, c)\n    for (int i = 0; i < 100; i++) {\n        a[i] = b[i] + c[i];\n    }\n\n    // Check that the arrays are still private to each thread\n    for (int i = 0; i < 100; i++) {\n        if (a[i] != b[i] + c[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_reduction_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Initialize arrays\n    int a[100];\n    int b[100];\n    for (int i = 0; i < 100; i++) {\n        a[i] = i;\n        b[i] = i;\n    }\n\n    // Perform reduction on arrays\n    #pragma acc parallel loop reduction(+:a[:100])\n    for (int i = 0; i < 100; i++) {\n        a[i] += b[i];\n    }\n\n    // Check results\n    for (int i = 0; i < 100; i++) {\n        if (a[i] != (i + i)) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_seq_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a random number between 1 and 10\n    int num = rand() % 10 + 1;\n\n    // Create a loop that iterates over the range [1, num]\n    for (int i = 1; i <= num; i++) {\n        // Do some work\n        printf(\"Iteration %d\\n\", i);\n    }\n\n    // Check if the loop executed correctly\n    if (num != i) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_tile_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a 2D array with random values\n    int array[10][10];\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < 10; j++) {\n            array[i][j] = rand() % 100;\n        }\n    }\n\n    // Create a 2D array with the same dimensions as the input array\n    int result[10][10];\n\n    // Use the tile clause to divide the input array into 2D tiles\n    #pragma acc parallel loop tile(10, 10)\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < 10; j++) {\n            result[i][j] = array[i][j];\n        }\n    }\n\n    // Check that the result array is the same as the input array\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < 10; j++) {\n            if (result[i][j] != array[i][j]) {\n                err = 1;\n                break;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_vector_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Initialize data\n    int data[100];\n    for (int i = 0; i < 100; i++) {\n        data[i] = rand() % 100;\n    }\n\n    // Create a vector of 10 elements\n    int vector[10];\n    for (int i = 0; i < 10; i++) {\n        vector[i] = data[i];\n    }\n\n    // Use the vector in a loop\n    for (int i = 0; i < 10; i++) {\n        // Do something with the vector element\n        vector[i] = vector[i] * 2;\n    }\n\n    // Check that the vector elements have been updated\n    for (int i = 0; i < 10; i++) {\n        if (vector[i] != data[i] * 2) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_worker_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a loop construct with a worker clause\n    #pragma acc loop worker\n    for (int i = 0; i < 10; i++) {\n        // Do some work\n        int result = i * i;\n        // Check if the result is correct\n        if (result != i * i) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_construct.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a parallel region with 4 threads\n    #pragma acc parallel num_threads(4)\n    {\n        // Create a loop with 10 iterations\n        for (int i = 0; i < 10; i++) {\n            // Create a random number between 0 and 10\n            int random_number = rand() % 10;\n\n            // Print the random number to the console\n            printf(\"Random number: %d\\n\", random_number);\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "reference_counters.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a reference counter\n    acc_ref_counter_t ref_counter;\n    acc_ref_counter_init(&ref_counter);\n\n    // Increment the reference counter\n    acc_ref_counter_inc(&ref_counter);\n\n    // Decrement the reference counter\n    acc_ref_counter_dec(&ref_counter);\n\n    // Check if the reference counter is zero\n    if (acc_ref_counter_get(&ref_counter) == 0) {\n        // The reference counter is zero, so the feature is not working properly\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "routine_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc routine\n    int foo(int x) {\n        return x * 2;\n    }\n\n    int result = foo(5);\n    if (result != 10) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_construct.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc serial\n    {\n        // Code to be executed serially\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)acc_malloc(sizeof(int) * 10);\n    int *b = (int *)acc_malloc(sizeof(int) * 10);\n\n    // Initialize arrays\n    for (int i = 0; i < 10; i++) {\n        a[i] = i;\n        b[i] = i;\n    }\n\n    // Set the value of the first element of b to 10\n    acc_set(b, 10, 1);\n\n    // Check that the value of the first element of b is 10\n    if (b[0] != 10) {\n        err = 1;\n    }\n\n    // Set the value of the first element of a to 20\n    acc_set(a, 20, 1);\n\n    // Check that the value of the first element of a is 20\n    if (a[0] != 20) {\n        err = 1;\n    }\n\n    // Free memory\n    acc_free(a);\n    acc_free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc shutdown\n    {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "update_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(10 * sizeof(int));\n    int *b = (int *)malloc(10 * sizeof(int));\n\n    #pragma acc update device(a[0:10])\n    #pragma acc update device(b[0:10])\n\n    for (int i = 0; i < 10; i++) {\n        a[i] = i;\n        b[i] = i;\n    }\n\n    #pragma acc update host(a[0:10])\n    #pragma acc update host(b[0:10])\n\n    for (int i = 0; i < 10; i++) {\n        if (a[i] != b[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "variable_implicit_data_attributes.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a random array of integers\n    int* arr = (int*)malloc(sizeof(int) * 10);\n    for (int i = 0; i < 10; i++) {\n        arr[i] = rand();\n    }\n\n    // Create a device array to store the data\n    int* dev_arr = (int*)acc_malloc(sizeof(int) * 10);\n\n    // Copy the data to the device array\n    acc_memcpy(dev_arr, arr, sizeof(int) * 10);\n\n    // Create a host array to store the data\n    int* host_arr = (int*)malloc(sizeof(int) * 10);\n\n    // Copy the data from the device array to the host array\n    acc_memcpy(host_arr, dev_arr, sizeof(int) * 10);\n\n    // Check if the data was copied correctly\n    for (int i = 0; i < 10; i++) {\n        if (host_arr[i] != arr[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free the device array\n    acc_free(dev_arr);\n\n    // Free the host array\n    free(host_arr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "variable_predetermined_data_attributes.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a random array of integers\n    int* arr = (int*)malloc(sizeof(int) * 10);\n    for (int i = 0; i < 10; i++) {\n        arr[i] = rand() % 100;\n    }\n\n    // Create a device array and copy the host array to it\n    int* dev_arr = (int*)acc_malloc(sizeof(int) * 10);\n    acc_memcpy_to_device(dev_arr, arr, sizeof(int) * 10);\n\n    // Create a predicate variable and set it to true\n    int predicate = 1;\n\n    // Use the predicate variable to determine which elements to copy to the device\n    acc_copy_to_device(dev_arr, arr, sizeof(int) * 10, predicate);\n\n    // Check that the elements that were not copied to the device are still on the host\n    for (int i = 0; i < 10; i++) {\n        if (arr[i] != dev_arr[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free the device array and host array\n    acc_free(dev_arr);\n    free(arr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "wait_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(10 * sizeof(int));\n    int *b = (int *)malloc(10 * sizeof(int));\n\n    #pragma acc data copy(a[0:10], b[0:10])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            a[i] = i;\n        }\n\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            b[i] = a[i];\n        }\n    }\n\n    #pragma acc wait\n    {\n        for (int i = 0; i < 10; i++) {\n            if (a[i] != b[i]) {\n                err = 1;\n                break;\n            }\n        }\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "wait_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create a data array\n    int data[10];\n    for (int i = 0; i < 10; i++) {\n        data[i] = rand() % 100;\n    }\n\n    // Create a wait directive\n    #pragma acc wait\n    {\n        // Do some work on the data\n        for (int i = 0; i < 10; i++) {\n            data[i] += 1;\n        }\n    }\n\n    // Check that the data has been updated\n    for (int i = 0; i < 10; i++) {\n        if (data[i] != i + 1) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            }
        }
    ]
}