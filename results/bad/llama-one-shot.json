{
    "configs": [
        {
            "CC": "nvc",
            "CCFlags": [
                "-acc=gpu",
                "-Minfo=all",
                "-lm"
            ],
            "CC_ACC_Version": "2.6",
            "CPP": "nvc++",
            "CPPFlags": [
                "-acc=gpu",
                "-Minfo=all",
                "-lm"
            ],
            "CPP_ACC_Version": "2.6",
            "FC": "nvfortran",
            "FCFlags": [
                "-acc=gpu",
                "-Minfo=all",
                "-lm"
            ],
            "FC_ACC_Version": "2.6",
            "PostCompileCommands": [],
            "PostRunCommands": [],
            "PreCompileCommands": [],
            "PreRunCommands": [],
            "build_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/build",
            "config_id": -1,
            "config_name": "init_config.txt",
            "env": null,
            "exclude_tags": [],
            "exclude_tests": [
                "acc_testsuite.Fh",
                "acc_testsuite.h",
                "acc_testsuite_declare.h"
            ],
            "export_format": "json",
            "fast": false,
            "id": 1,
            "include_by_default": true,
            "include_tags": [],
            "include_tests": [],
            "keep_build_dir": false,
            "keep_mutated_tests": false,
            "keep_partial_results": false,
            "keep_policy": "on-error",
            "mutated_test_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/build/mutated_tests",
            "mutators": [],
            "partial": false,
            "partial_results_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/build/partial_results",
            "runAll": false,
            "runtime_prefix": "",
            "seed": null,
            "system_name": null,
            "tag_evaluation": null,
            "test_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/Tests",
            "timeout": 10
        }
    ],
    "runs": {
        "acc_async_test.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_async_test.c/acc_async_test.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_async_test.c\", line 4: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include <acc_testsuite.h>\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_async_test.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21496006700908765
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_async_test.c/acc_async_test.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_async_test.c\", line 4: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include <acc_testsuite.h>\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_async_test.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1644952400092734
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_attach.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_attach.c/acc_attach.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c\", line 8: warning: function \"malloc\" declared implicitly [implicit_func_decl]\n      a = (int *)malloc(n * sizeof(int));\n                 ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c\", line 18: error: invalid text in pragma\n      #pragma acc attach copyin(a[0:n])\n                         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c\", line 31: error: invalid text in pragma\n      #pragma acc detach copyout(b[0:n])\n                         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c\", line 41: warning: function \"free\" declared implicitly [implicit_func_decl]\n      free(a);\n      ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_attach.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16501278799842112
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_copyin.c/acc_copyin.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 13: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 13: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 13: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 13: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 14: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 14: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 14: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 16: error: identifier \"n\" is undefined\n      for (int x = 0; x < n; ++x) {\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 21: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 21: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 21: error: identifier \"n\" is undefined\n      #pragma acc data copyin(a[0:n])\n                                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 23: error: non variable found in parallel pragma list\n          #pragma acc kernels copyin(b[0:n])\n                                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 23: error: non variable found in parallel pragma list\n          #pragma acc kernels copyin(b[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 33: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n13 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16517151100561023
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_copyout.c/acc_copyout.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyout.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyout.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyout.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11474291299236938
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_copyout.c/acc_copyout.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyout.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyout.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyout.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16476761999365408
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_create.c/acc_create.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 11: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 11: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 11: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 11: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 12: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 12: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 12: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 21: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 21: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 31: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n11 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11449061200255528
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_delete.c/acc_delete.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 11: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 11: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 11: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 11: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 12: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 12: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 12: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 21: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 21: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 31: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n11 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11475963500561193
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_detach.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_detach.c/acc_detach.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 10: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 10: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 10: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 10: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 11: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 11: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 11: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 18: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 18: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 20: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 20: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 29: error: invalid text in pragma\n      #pragma acc detach(b[0:n])\n                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 32: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n12 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11456408200319856
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_deviceptr.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_deviceptr.c/acc_deviceptr.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_deviceptr.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_deviceptr.c\", line 4: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include <acc_testsuite.h>\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_deviceptr.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11458400000992697
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_deviceptr.c/acc_deviceptr.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_deviceptr.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_deviceptr.c\", line 4: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include <acc_testsuite.h>\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_deviceptr.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11441900600038934
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_free.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_free.c/acc_free.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1145655950094806
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_free.c/acc_free.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1643382809998002
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_default_async.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_default_async.c/acc_get_default_async.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 12: warning: enumerated type mixed with another type [mixed_enum_type]\n      int device_num = acc_get_device_num(device_type);\n                                          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 13: warning: enumerated type mixed with another type [mixed_enum_type]\n      acc_set_device_num(device_type, device_num, async);\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 13: error: too many arguments in function call\n      acc_set_device_num(device_type, device_num, async);\n                                                  ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16456407100486103
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_num.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_device_num.c/acc_get_device_num.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\", line 12: error: too few arguments in function call\n      num_devices = acc_get_num_devices();\n                                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\", line 21: error: too few arguments in function call\n      device_num = acc_get_device_num();\n                                      ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16495436600234825
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_type.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_device_type.c/acc_get_device_type.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_type.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_type.c\", line 5: error: too many arguments in function call\n      acc_get_device_type(&device_type);\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_type.c\", line 7: error: identifier \"ACC_DEVICE_TYPE_CPU\" is undefined\n      if (device_type == ACC_DEVICE_TYPE_CPU) {\n                         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_type.c\", line 9: error: identifier \"ACC_DEVICE_TYPE_GPU\" is undefined\n      } else if (device_type == ACC_DEVICE_TYPE_GPU) {\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_type.c\", line 11: error: identifier \"ACC_DEVICE_TYPE_ACCELERATOR\" is undefined\n      } else if (device_type == ACC_DEVICE_TYPE_ACCELERATOR) {\n                                ^\n\n4 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_type.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.164883290999569
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_num_devices.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_num_devices.c/acc_get_num_devices.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\", line 8: warning: argument of type \"int *\" is incompatible with parameter of type \"acc_device_t\" [incompatible_param]\n      acc_get_num_devices(&num_devices);\n                          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\", line 19: error: too many arguments in function call\n          acc_get_device(&device, i);\n                         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\", line 21: warning: function \"acc_get_device_name\" declared implicitly [implicit_func_decl]\n          printf(\"Device %d: %s\\n\", i, acc_get_device_name(device));\n                                       ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16482269500556868
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_property.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_property.c/acc_get_property.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 16: error: identifier \"ACC_PROPERTY_DEVICE_TYPE\" is undefined\n          int device_type = acc_get_property(x, ACC_PROPERTY_DEVICE_TYPE);\n                                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 16: error: too few arguments in function call\n          int device_type = acc_get_property(x, ACC_PROPERTY_DEVICE_TYPE);\n                                                                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 17: error: identifier \"ACC_DEVICE_TYPE_GPU\" is undefined\n          if (device_type != ACC_DEVICE_TYPE_GPU) {\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 28: error: identifier \"ACC_PROPERTY_DEVICE_TYPE\" is undefined\n          int device_type = acc_get_property(x, ACC_PROPERTY_DEVICE_TYPE);\n                                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 28: error: too few arguments in function call\n          int device_type = acc_get_property(x, ACC_PROPERTY_DEVICE_TYPE);\n                                                                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 29: error: identifier \"ACC_DEVICE_TYPE_CPU\" is undefined\n          if (device_type != ACC_DEVICE_TYPE_CPU) {\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 40: error: identifier \"ACC_PROPERTY_DEVICE_TYPE\" is undefined\n          int device_type = acc_get_property(x, ACC_PROPERTY_DEVICE_TYPE);\n                                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 40: error: too few arguments in function call\n          int device_type = acc_get_property(x, ACC_PROPERTY_DEVICE_TYPE);\n                                                                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 41: error: identifier \"ACC_DEVICE_TYPE_ACCELERATOR\" is undefined\n          if (device_type != ACC_DEVICE_TYPE_ACCELERATOR) {\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 52: error: identifier \"ACC_PROPERTY_DEVICE_TYPE\" is undefined\n          int device_type = acc_get_property(x, ACC_PROPERTY_DEVICE_TYPE);\n                                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 52: error: too few arguments in function call\n          int device_type = acc_get_property(x, ACC_PROPERTY_DEVICE_TYPE);\n                                                                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 53: error: identifier \"ACC_DEVICE_TYPE_HOST\" is undefined\n          if (device_type != ACC_DEVICE_TYPE_HOST) {\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 64: error: identifier \"ACC_PROPERTY_DEVICE_TYPE\" is undefined\n          int device_type = acc_get_property(x, ACC_PROPERTY_DEVICE_TYPE);\n                                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 64: error: too few arguments in function call\n          int device_type = acc_get_property(x, ACC_PROPERTY_DEVICE_TYPE);\n                                                                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\", line 65: error: identifier \"ACC_DEVICE_TYPE_UNKNOWN\" is undefined\n          if (device_type != ACC_DEVICE_TYPE_UNKNOWN) {\n                             ^\n\n15 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.2153854899952421
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_hostptr.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_hostptr.c/acc_hostptr.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\", line 19: error: invalid text in pragma\n      #pragma acc hostptr(a[0:NUM_TEST_CALLS])\n                         ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16477688899612986
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_init.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_init.c/acc_init.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 11: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 11: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 11: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 11: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 12: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 12: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 12: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 19: error: invalid text in pragma\n      #pragma acc init(a[0:n])\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 19: error: extra text after expected end of preprocessing directive\n      #pragma acc init(a[0:n])\n                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 31: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n9 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16466094698989764
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_is_present.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_is_present.c/acc_is_present.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 11: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 12: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 12: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 12: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 12: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 13: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 13: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 13: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 20: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 20: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 22: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 22: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 32: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n12 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1648434679955244
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_malloc.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_malloc.c/acc_malloc.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c",
                    "config": 1,
                    "errors": "test_acc_malloc:\n     20, Generating copyin(a[:10]) [if not already present]\n     22, Generating copyout(b[:10]) [if not already present]\n     24, Complex loop carried dependence of a-> prevents parallelization\n         Loop carried dependence of b-> prevents parallelization\n         Loop carried backward dependence of b-> prevents vectorization\n         Accelerator serial kernel generated\n         Generating NVIDIA GPU code\n         24, #pragma acc loop seq\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5656004249904072
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Segmentation fault (core dumped)\n",
                    "export": true,
                    "output": "",
                    "result": 139,
                    "runtime": 0.3146993899863446,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_map_data.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_map_data.c/acc_map_data.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 11: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 11: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 11: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 11: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 12: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 12: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 12: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 19: error: invalid text in pragma\n      #pragma acc data map(to: a[0:n]) map(from: b[0:n])\n                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 19: error: extra text after expected end of preprocessing directive\n      #pragma acc data map(to: a[0:n]) map(from: b[0:n])\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 31: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n9 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16482961700239684
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_d2d.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_d2d.c/acc_memcpy_d2d.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\", line 12: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\", line 12: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\", line 12: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\", line 12: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\", line 13: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\", line 13: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\", line 13: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\", line 20: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\", line 20: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\", line 22: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\", line 22: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\", line 32: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n11 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_d2d.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16515408700797707
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_device.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_device.c/acc_memcpy_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 11: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 11: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 11: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 11: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 12: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 12: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 12: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 21: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 21: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 31: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n11 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.164740388005157
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_from_device.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_from_device.c/acc_memcpy_from_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\", line 12: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\", line 12: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\", line 12: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\", line 12: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\", line 13: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\", line 13: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\", line 13: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\", line 20: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\", line 20: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\", line 22: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\", line 22: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\", line 32: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n11 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_from_device.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16501538299780805
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_to_device.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_to_device.c/acc_memcpy_to_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_to_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_to_device.c\", line 30: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[i] - a[i]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\ntest_acc_memcpy_to_device:\n     19, Generating copyin(a[:10]) [if not already present]\n     21, Generating copyout(b[:10]) [if not already present]\n     23, Complex loop carried dependence of a-> prevents parallelization\n         Loop carried dependence of b-> prevents parallelization\n         Loop carried backward dependence of b-> prevents vectorization\n         Accelerator serial kernel generated\n         Generating NVIDIA GPU code\n         23, #pragma acc loop seq\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5660180580016458
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21460743399802595,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_on_device.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_on_device.c/acc_on_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_on_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_on_device.c\", line 4: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include <acc_testsuite.h>\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_on_device.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16511613500188105
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_default_async.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_default_async.c/acc_set_default_async.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 11: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 11: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 11: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 11: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 12: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 12: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 12: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 19: error: invalid text in pragma\n      #pragma acc set default async\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 19: error: extra text after expected end of preprocessing directive\n      #pragma acc set default async\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 31: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n9 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1646448249957757
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_num.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_device_num.c/acc_set_device_num.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 17: error: too few arguments in function call\n      acc_set_device_num(NUM_DEVICES);\n                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 20: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)acc_malloc(sizeof(real_t) * NUM_DEVICES);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 20: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)acc_malloc(sizeof(real_t) * NUM_DEVICES);\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 20: error: expected an expression\n      real_t *a = (real_t *)acc_malloc(sizeof(real_t) * NUM_DEVICES);\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 20: error: expected a \";\"\n      real_t *a = (real_t *)acc_malloc(sizeof(real_t) * NUM_DEVICES);\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 21: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)acc_malloc(sizeof(real_t) * NUM_DEVICES);\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 21: error: expected an expression\n      real_t *b = (real_t *)acc_malloc(sizeof(real_t) * NUM_DEVICES);\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 21: error: expected a \";\"\n      real_t *b = (real_t *)acc_malloc(sizeof(real_t) * NUM_DEVICES);\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 30: error: too few arguments in function call\n      acc_set_device_num(0);\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 36: error: too few arguments in function call\n      acc_set_device_num(1);\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 42: error: too few arguments in function call\n      acc_set_device_num(0);\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 11: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n11 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16465076699387282
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_type.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_device_type.c/acc_set_device_type.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 65: error: identifier \"acc_device_gpu\" is undefined\n          if (device_type != acc_device_gpu) {\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 77: error: identifier \"acc_device_fpga\" is undefined\n          if (device_type != acc_device_fpga) {\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 89: error: identifier \"acc_device_mic\" is undefined\n          if (device_type != acc_device_mic) {\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 101: error: identifier \"acc_device_dsp\" is undefined\n          if (device_type != acc_device_dsp) {\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 125: error: identifier \"acc_device_amd\" is undefined\n          if (device_type != acc_device_amd) {\n                             ^\n\n5 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16509832200245
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_shutdown.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_shutdown.c/acc_shutdown.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 15: error: too few arguments in function call\n          acc_shutdown();\n                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\", line 16: error: identifier \"ACC_DEVICE_NONE\" is undefined\n          if (acc_get_device_type() != ACC_DEVICE_NONE) {\n                                       ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_shutdown.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16488381299132016
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_unmap_data.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 8: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 8: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 8: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 8: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 9: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 9: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 9: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 16: error: non variable found in parallel pragma list\n      #pragma acc enter data copyin(a[0:n], b[0:n])\n                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 16: error: non variable found in parallel pragma list\n      #pragma acc enter data copyin(a[0:n], b[0:n])\n                                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 16: error: non variable found in parallel pragma list\n      #pragma acc enter data copyin(a[0:n], b[0:n])\n                                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 16: error: non variable found in parallel pragma list\n      #pragma acc enter data copyin(a[0:n], b[0:n])\n                                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 28: error: non variable found in parallel pragma list\n      #pragma acc exit data delete(a[0:n], b[0:n])\n                                   ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 28: error: non variable found in parallel pragma list\n      #pragma acc exit data delete(a[0:n], b[0:n])\n                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 28: error: non variable found in parallel pragma list\n      #pragma acc exit data delete(a[0:n], b[0:n])\n                                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 28: error: non variable found in parallel pragma list\n      #pragma acc exit data delete(a[0:n], b[0:n])\n                                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 32: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[i] - (a[i] + 1)) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 32: error: identifier \"PRECISION\" is undefined\n          if (fabs(b[i] - (a[i] + 1)) > PRECISION) {\n                                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 39: warning: function \"free\" declared implicitly [implicit_func_decl]\n      free(a);\n      ^\n\n16 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11493150200112723
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_update_device.c/acc_update_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c\", line 5: catastrophic error: cannot open source file \"acc/acc.h\"\n  #include <acc/acc.h>\n                      ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16462168098951224
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_update_self.c/acc_update_self.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 14: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 14: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 14: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 14: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 15: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 15: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 15: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 24: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 24: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 30: error: non variable found in parallel pragma list\n              #pragma acc update self(b[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 30: error: non variable found in parallel pragma list\n              #pragma acc update self(b[0:n])\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 41: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 10: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\n11 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16518883500248194
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait.c/acc_wait.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 11: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 12: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 12: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 12: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 12: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 13: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 13: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 13: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 20: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 20: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 22: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 22: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 34: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n12 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1145013149944134
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_async.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait_async.c/acc_wait_async.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c",
                    "config": 1,
                    "errors": "test_acc_wait_async:\n     20, Generating copyin(a[:10]) [if not already present]\n     22, Generating implicit copyout(b[:10]) [if not already present]\n     24, Complex loop carried dependence of a-> prevents parallelization\n         Loop carried dependence of b-> prevents parallelization\n         Loop carried backward dependence of b-> prevents vectorization\n         Accelerator serial kernel generated\n         Generating NVIDIA GPU code\n         24, #pragma acc loop seq\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46534420900570694
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2651166150026256,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "async_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/async_clause.c/async_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 11: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 11: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 11: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 11: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 12: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 12: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 12: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 31: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n9 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1647965349984588
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_construct.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/atomic_construct.c/atomic_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/atomic_construct.c",
                    "config": 1,
                    "errors": "test_atomic_add:\n     11, Generating copyin(b[:n],a[:n]) [if not already present]\n     15, Complex loop carried dependence of a->,b-> prevents parallelization\n         Accelerator serial kernel generated\n         Generating NVIDIA GPU code\n         15, #pragma acc loop seq\ntest_atomic_sub:\n     27, Generating copyin(b[:n],a[:n]) [if not already present]\n     31, Complex loop carried dependence of a->,b-> prevents parallelization\n         Accelerator serial kernel generated\n         Generating NVIDIA GPU code\n         31, #pragma acc loop seq\ntest_atomic_mul:\n     43, Generating copyin(b[:n],a[:n]) [if not already present]\n     47, Complex loop carried dependence of a->,b-> prevents parallelization\n         Accelerator serial kernel generated\n         Generating NVIDIA GPU code\n         47, #pragma acc loop seq\ntest_atomic_div:\n     59, Generating copyin(b[:n],a[:n]) [if not already present]\n     63, Complex loop carried dependence of a->,b-> prevents parallelization\n         Accelerator serial kernel generated\n         Generating NVIDIA GPU code\n         63, #pragma acc loop seq\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5155143949959893
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21456773900717963,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "attachment_counter.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/attachment_counter.c/attachment_counter.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/attachment_counter.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/attachment_counter.c\", line 16: warning: function \"test1\" declared implicitly [implicit_func_decl]\n          int err = test1();\n                    ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\ntest1:\n     48, Generating enter data copyin(b[:10],a[:10])\n         Generating update device(a[:10],b[:10])\n     50, Generating update self(counter)\n     60, Generating exit data delete(b[:10],a[:10])\n         Generating update self(counter)\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4154845870070858
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Present table dump for device[1]: NVIDIA Tesla GPU 0, compute capability 7.0, threadid=1\nHint: specify 0x800 bit in NV_ACC_DEBUG for verbose info.\nhost:0xfcc2a0 device:0x7f58b7afa000 size:40 presentcount:0+1 line:48 name:a[:10]\nhost:0xfcc2d0 device:0x7f58b7afa200 size:40 presentcount:0+1 line:48 name:b[:10]\nallocated block device:0x7f58b7afa000 size:512 thread:1\nallocated block device:0x7f58b7afa200 size:512 thread:1\nFATAL ERROR: data in update host clause was not found on device 1: name=counter\n file:/usa/jarmusch/Nvidia/OpenACCV-V/Tests/attachment_counter.c test1 line:50\n\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.16446395100501832,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "cache_directive.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/cache_directive.c/cache_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/cache_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/cache_directive.c\", line 24: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\ntest_cache:\n     13, Generating copyin(a[:n]) [if not already present]\n     15, Generating implicit copyout(b[:n]) [if not already present]\n     17, Complex loop carried dependence of a-> prevents parallelization\n         Loop carried dependence of b-> prevents parallelization\n         Loop carried backward dependence of b-> prevents vectorization\n         Accelerator serial kernel generated\n         Generating NVIDIA GPU code\n         17, #pragma acc loop seq\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.465587972998037
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1645138760068221,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "combined_constucts.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/combined_constucts.c/combined_constucts.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 13: error: identifier \"real_t\" is undefined\n      real_t * a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 13: error: identifier \"a\" is undefined\n      real_t * a = (real_t *)malloc(n * sizeof(real_t));\n               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 13: error: expected an expression\n      real_t * a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 13: error: expected a \";\"\n      real_t * a = (real_t *)malloc(n * sizeof(real_t));\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 14: error: identifier \"b\" is undefined\n      real_t * b = (real_t *)malloc(n * sizeof(real_t));\n               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 14: error: expected an expression\n      real_t * b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 14: error: expected a \";\"\n      real_t * b = (real_t *)malloc(n * sizeof(real_t));\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 16: error: identifier \"n\" is undefined\n      for (int x = 0; x < n; ++x){\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 21: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 21: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 21: error: identifier \"n\" is undefined\n      #pragma acc data copyin(a[0:n])\n                                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 23: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 23: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 33: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION){\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 44: error: identifier \"real_t\" is undefined\n      real_t * a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 44: error: identifier \"a\" is undefined\n      real_t * a = (real_t *)malloc(n * sizeof(real_t));\n               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 44: error: expected an expression\n      real_t * a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 44: error: expected a \";\"\n      real_t * a = (real_t *)malloc(n * sizeof(real_t));\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 45: error: identifier \"b\" is undefined\n      real_t * b = (real_t *)malloc(n * sizeof(real_t));\n               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 45: error: expected an expression\n      real_t * b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 45: error: expected a \";\"\n      real_t * b = (real_t *)malloc(n * sizeof(real_t));\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 47: error: identifier \"n\" is undefined\n      for (int x = 0; x < n; ++x){\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 52: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 52: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 52: error: identifier \"n\" is undefined\n      #pragma acc data copyin(a[0:n])\n                                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 54: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 54: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 64: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION){\n              ^\n\n26 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21493636099330615
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_default_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_default_clause.c/compute_construct_default_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 11: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 12: error: identifier \"real_t\" is undefined\n      real_t * a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 12: error: identifier \"a\" is undefined\n      real_t * a = (real_t *)malloc(n * sizeof(real_t));\n               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 12: error: expected an expression\n      real_t * a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 12: error: expected a \";\"\n      real_t * a = (real_t *)malloc(n * sizeof(real_t));\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 13: error: identifier \"b\" is undefined\n      real_t * b = (real_t *)malloc(n * sizeof(real_t));\n               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 13: error: expected an expression\n      real_t * b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 13: error: expected a \";\"\n      real_t * b = (real_t *)malloc(n * sizeof(real_t));\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 15: error: identifier \"n\" is undefined\n      for (int x = 0; x < n; ++x){\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 20: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 20: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 20: error: identifier \"n\" is undefined\n      #pragma acc data copyin(a[0:n])\n                                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 22: error: invalid text in pragma\n          #pragma acc kernels compute(b[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 22: error: extra text after expected end of preprocessing directive\n          #pragma acc kernels compute(b[0:n])\n                                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 32: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION){\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n14 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16477017498982605
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_num_gangs_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_num_gangs_clause.c/compute_construct_num_gangs_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.114368929003831
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_num_gangs_clause.c/compute_construct_num_gangs_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1142779759975383
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_num_workersclause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_num_workersclause.c/compute_construct_num_workersclause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c\", line 12: warning: function \"acc_set_num_workers\" declared implicitly [implicit_func_decl]\n      acc_set_num_workers(NUM_WORKERS);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c\", line 18: warning: function \"acc_get_num_workers\" declared implicitly [implicit_func_decl]\n          num_workers = acc_get_num_workers();\n                        ^\n\nNVC++-S-1061-Procedures called in a compute region must have acc routine information - acc_get_num_workers (/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c: 18)\nmain:\n     18, Accelerator restriction: call to 'acc_get_num_workers' with no acc routine information\nNVC++/x86-64 Linux 23.5-0: compilation completed with severe errors\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.164836373005528
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_private_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_private_clause.c/compute_construct_private_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 10: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 10: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 10: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 10: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 11: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 11: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 11: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 18: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 18: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 20: error: invalid text in pragma\n          #pragma acc kernels compute(b[0:n]) private(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 20: error: extra text after expected end of preprocessing directive\n          #pragma acc kernels compute(b[0:n]) private(a[0:n])\n                                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 30: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n11 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16470669400587212
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_vector_length_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_vector_length_clause.c/compute_construct_vector_length_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\", line 5: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include <acc_testsuite.h>\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1648524510092102
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_vector_length_clause.c/compute_construct_vector_length_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\", line 5: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include <acc_testsuite.h>\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1644989169872133
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct.c/data_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 20: error: identifier \"real_t\" is undefined\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 20: error: identifier \"a\" is undefined\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 20: error: expected an expression\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 20: error: expected a \";\"\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 21: error: identifier \"b\" is undefined\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 21: error: expected an expression\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 21: error: expected a \";\"\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 23: error: identifier \"n\" is undefined\n          for (int i = 0; i < n; ++i) {\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 28: error: non variable found in parallel pragma list\n          #pragma acc data copyin(a[0:n])\n                                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 28: error: non variable found in parallel pragma list\n          #pragma acc data copyin(a[0:n])\n                                   ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 28: error: identifier \"n\" is undefined\n          #pragma acc data copyin(a[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 30: error: non variable found in parallel pragma list\n              #pragma acc kernels copyout(b[0:n])\n                                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 30: error: non variable found in parallel pragma list\n              #pragma acc kernels copyout(b[0:n])\n                                           ^\n\n13 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16479198599699885
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_copy_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copy_clause.c/data_construct_copy_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 11: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 11: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 11: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 11: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 12: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 12: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 12: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data copy(a[0:n], b[0:n])\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data copy(a[0:n], b[0:n])\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data copy(a[0:n], b[0:n])\n                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data copy(a[0:n], b[0:n])\n                                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 31: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n11 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16483860500738956
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_copyin_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copyin_clause.c/data_construct_copyin_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\", line 12: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\", line 12: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\", line 12: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\", line 12: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\", line 13: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\", line 13: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\", line 13: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\", line 20: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\", line 20: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\", line 22: error: non variable found in parallel pragma list\n          #pragma acc kernels copyin(b[0:n])\n                                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\", line 22: error: non variable found in parallel pragma list\n          #pragma acc kernels copyin(b[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\", line 32: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n11 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyin_clause.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16493843699572608
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_copyout_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copyout_clause.c/data_construct_copyout_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyout_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyout_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyout_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16478715700213797
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copyout_clause.c/data_construct_copyout_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyout_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyout_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyout_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11425191700982396
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_create_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_create_clause.c/data_construct_create_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 11: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 11: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 11: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 11: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 12: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 12: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 12: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data create(a[0:n], b[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data create(a[0:n], b[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data create(a[0:n], b[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data create(a[0:n], b[0:n])\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 31: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n11 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16469063301337883
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_delete_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_delete_clause.c/data_construct_delete_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 16: warning: function \"test1\" declared implicitly [implicit_func_decl]\n          int err = test1();\n                    ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 30: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 31: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 31: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 31: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 31: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 32: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 32: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 32: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 34: error: identifier \"n\" is undefined\n      for (int x = 0; x < n; ++x) {\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 39: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 39: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 39: error: identifier \"n\" is undefined\n      #pragma acc data copyin(a[0:n])\n                                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 41: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 41: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 51: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\n14 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16508026600058656
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_present_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_present_clause.c/data_present_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\", line 11: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\", line 11: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\", line 11: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\", line 11: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\", line 12: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\", line 12: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\", line 12: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data present(a[0:n], b[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data present(a[0:n], b[0:n])\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data present(a[0:n], b[0:n])\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data present(a[0:n], b[0:n])\n                                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\", line 31: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n11 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_present_clause.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11455220000061672
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_directive.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive.c/declare_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive.c\", line 15: error: OpenACC data clause expected\n          #pragma acc declare\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive.c\", line 71: error: identifier \"a\" is undefined\n          #pragma acc declare create(a)\n                                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive.c\", line 73: error: identifier \"a\" is undefined\n              a = 1;\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive.c\", line 135: warning: function \"foo\" declared implicitly [implicit_func_decl]\n              a = foo(a);\n                  ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive.c\", line 149: warning: function \"foo\" declared implicitly [implicit_func_decl]\n              a = foo(bar(a));\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive.c\", line 149: warning: function \"bar\" declared implicitly [implicit_func_decl]\n              a = foo(bar(a));\n                      ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1648133569979109
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_directive_link_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_link_clause.c/declare_directive_link_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16474485700018704
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_link_clause.c/declare_directive_link_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1644579679996241
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_directive.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/exit_data_directive.c/exit_data_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/exit_data_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/exit_data_directive.c\", line 10: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/exit_data_directive.c\", line 10: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/exit_data_directive.c\", line 10: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/exit_data_directive.c\", line 10: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/exit_data_directive.c\", line 11: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/exit_data_directive.c\", line 11: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/exit_data_directive.c\", line 11: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/exit_data_directive.c\", line 18: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/exit_data_directive.c\", line 18: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/exit_data_directive.c\", line 20: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/exit_data_directive.c\", line 20: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/exit_data_directive.c\", line 30: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n11 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/exit_data_directive.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21469716599676758
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "host_data_construct_if_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_if_clause.c/host_data_construct_if_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c\", line 19: error: OpenACC data clause expected\n      #pragma acc host_data if(a[0] > 5)\n                                        ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1647310000116704
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "host_data_construct_use_device_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_use_device_clause.c/host_data_construct_use_device_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_use_device_clause.c",
                    "config": 1,
                    "errors": "main:\n     21, Generating NVIDIA GPU code\n         22, #pragma acc loop seq\n     21, Generating implicit copyout(device_array[:]) [if not already present]\n         Generating implicit copyin(host_array[:]) [if not already present]\n     22, Loop is parallelizable\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5155703600030392
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "FATAL ERROR: data in use_device clause was not found on device 1: host:0x7ffe15708780\n\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.21478823899815325,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_directive.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/init_directive.c/init_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\", line 12: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\", line 12: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\", line 12: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\", line 12: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\", line 13: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\", line 13: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\", line 13: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\", line 20: error: invalid text in pragma\n      #pragma acc init(a[0:n])\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\", line 20: error: extra text after expected end of preprocessing directive\n      #pragma acc init(a[0:n])\n                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\", line 32: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n9 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/init_directive.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16514135300531052
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_construct.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/kernels_construct.c/kernels_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/kernels_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/kernels_construct.c\", line 5: catastrophic error: cannot open source file \"acc/acc.h\"\n  #include <acc/acc.h>\n                      ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/kernels_construct.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16470415900403168
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_auto_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_auto_clause.c/loop_construct_auto_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c\", line 21: error: invalid text in pragma\n          #pragma acc kernels loop auto(x)\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c\", line 21: error: extra text after expected end of preprocessing directive\n          #pragma acc kernels loop auto(x)\n                                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c\", line 28: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16495431600196753
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_collapse_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_collapse_clause.c/loop_construct_collapse_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11455864101299085
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT2 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_collapse_clause.c/loop_construct_collapse_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c\", line 1: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include \"acc_testsuite.h\"\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16479055299714673
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_independent_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_independent_clause.c/loop_construct_independent_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c\", line 14: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c\", line 14: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c\", line 14: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c\", line 14: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c\", line 15: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c\", line 15: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c\", line 15: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c\", line 22: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c\", line 22: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n9 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.165114621995599
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_reduction_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_reduction_clause.c/loop_construct_reduction_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_reduction_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_reduction_clause.c\", line 28: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n              if (fabs(b[i] - a[i]) > PRECISION){\n                  ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_reduction_clause.c\", line 58: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n              if (fabs(b[i] - a[i]) > PRECISION){\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_reduction_clause.c\", line 88: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n              if (fabs(b[i] - a[i]) > PRECISION){\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_reduction_clause.c\", line 118: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n              if (fabs(b[i] - a[i]) > PRECISION){\n                  ^\n\nmain:\n     20, Generating copyin(a[:]) [if not already present]\n         Local memory used for b\n     22, Loop is parallelizable\n         Generating NVIDIA GPU code\n         22, #pragma acc loop gang, vector(32) /* blockIdx.x threadIdx.x */\n             Generating reduction(+:b[:])\n     50, Generating copyin(a[:]) [if not already present]\n         Local memory used for b\n     52, Loop is parallelizable\n         Generating NVIDIA GPU code\n         52, #pragma acc loop gang, vector(32) /* blockIdx.x threadIdx.x */\n             Generating reduction(*:b[:])\n     80, Generating copyin(a[:]) [if not already present]\n         Local memory used for b\n     82, Loop is parallelizable\n         Generating NVIDIA GPU code\n         82, #pragma acc loop gang, vector(32) /* blockIdx.x threadIdx.x */\n             Generating reduction(min:b[:])\n    110, Generating copyin(a[:]) [if not already present]\n         Local memory used for b\n    112, Loop is parallelizable\n         Generating NVIDIA GPU code\n        112, #pragma acc loop gang, vector(32) /* blockIdx.x threadIdx.x */\n             Generating reduction(max:b[:])\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7662857620016439
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Segmentation fault (core dumped)\n",
                    "export": true,
                    "output": "",
                    "result": 139,
                    "runtime": 0.26480880900635384,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_tile_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_tile_clause.c/loop_construct_tile_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_tile_clause.c",
                    "config": 1,
                    "errors": "test_loop_tile:\n     21, Generating copyin(a[:n]) [if not already present]\n         Generating copyout(b[:n]) [if not already present]\n     23, Complex loop carried dependence of a-> prevents parallelization\n         Loop carried dependence of b-> prevents parallelization\n         Loop carried backward dependence of b-> prevents vectorization\n         Accelerator serial kernel generated\n         Generating NVIDIA GPU code\n         23, #pragma acc loop seq\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5659571870055515
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2147557070129551,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_vector_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_vector_clause.c/loop_construct_vector_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 5: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include <acc_testsuite.h>\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\".\nCompilation terminated.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21498579600302037
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_vector_clause.c/loop_construct_vector_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 5: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include <acc_testsuite.h>\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21461469800851773
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_worker_clause.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_worker_clause.c/loop_construct_worker_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\", line 10: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\", line 10: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\", line 10: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\", line 10: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\", line 11: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\", line 11: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\", line 11: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\", line 18: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\", line 18: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\", line 27: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n9 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1648762780096149
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_construct.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/parallel_construct.c/parallel_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 19: error: identifier \"real_t\" is undefined\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 19: error: identifier \"a\" is undefined\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 19: error: expected an expression\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 19: error: expected a \";\"\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 20: error: identifier \"b\" is undefined\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 20: error: expected an expression\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 20: error: expected a \";\"\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 55: error: identifier \"real_t\" is undefined\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 55: error: identifier \"a\" is undefined\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 55: error: expected an expression\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 55: error: expected a \";\"\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 56: error: identifier \"b\" is undefined\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 56: error: expected an expression\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 56: error: expected a \";\"\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 96: error: identifier \"real_t\" is undefined\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 96: error: identifier \"a\" is undefined\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 96: error: expected an expression\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 96: error: expected a \";\"\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 97: error: identifier \"b\" is undefined\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 97: error: expected an expression\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 97: error: expected a \";\"\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 104: error: non variable found in parallel pragma list\n          #pragma acc parallel loop reduction(+:b[:n])\n                                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 104: error: non variable found in parallel pragma list\n          #pragma acc parallel loop reduction(+:b[:n])\n                                                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 132: error: identifier \"real_t\" is undefined\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 132: error: identifier \"a\" is undefined\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 132: error: expected an expression\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 132: error: expected a \";\"\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 133: error: identifier \"b\" is undefined\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 133: error: expected an expression\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 133: error: expected a \";\"\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 140: error: non variable found in parallel pragma list\n          #pragma acc parallel loop reduction(+:b[:n])\n                                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 140: error: non variable found in parallel pragma list\n          #pragma acc parallel loop reduction(+:b[:n])\n                                                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 168: error: identifier \"real_t\" is undefined\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 168: error: identifier \"a\" is undefined\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 168: error: expected an expression\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 168: error: expected a \";\"\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 169: error: identifier \"b\" is undefined\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 169: error: expected an expression\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 169: error: expected a \";\"\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 176: error: non variable found in parallel pragma list\n          #pragma acc parallel loop reduction(+:b[:n])\n                                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 176: error: non variable found in parallel pragma list\n          #pragma acc parallel loop reduction(+:b[:n])\n                                                 ^\n\n41 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16475694999098778
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "reference_counters.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/reference_counters.c/reference_counters.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/reference_counters.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/reference_counters.c\", line 4: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include <acc_testsuite.h>\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/reference_counters.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1647841310041258
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_directive.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/routine_directive.c/routine_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/routine_directive.c",
                    "config": 1,
                    "errors": "test_routine:\n     16, Memory copy idiom, loop replaced by call to __c_mcopy4\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31495009700302035
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007826279004802927,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_construct.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/serial_construct.c/serial_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c",
                    "config": 1,
                    "errors": "test_serial_construct:\n     20, Generating implicit firstprivate(n)\n         Accelerator serial kernel generated\n         Generating NVIDIA GPU code\n         22, #pragma acc for seq\n     20, Generating implicit copyout(b[:n]) [if not already present]\n         Generating implicit copyin(a[:n]) [if not already present]\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6157931630004896
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "Test passed\n",
                    "result": 0,
                    "runtime": 0.21499907100223936,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_directive.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/set_directive.c/set_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 11: error: identifier \"real_t\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 11: error: identifier \"a\" is undefined\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 11: error: expected an expression\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 11: error: expected a \";\"\n      real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 12: error: identifier \"b\" is undefined\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 12: error: expected an expression\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 12: error: expected a \";\"\n      real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 19: error: non variable found in parallel pragma list\n      #pragma acc data copyin(a[0:n])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 21: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 21: error: non variable found in parallel pragma list\n          #pragma acc kernels copyout(b[0:n])\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 31: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[x] - a[x]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n11 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21493102199747227
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_directive.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/shutdown_directive.c/shutdown_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 25: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n          if (fabs(b[i] - a[i]) > PRECISION) {\n              ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\ntest_shutdown:\n     14, Generating copyin(a[:n]) [if not already present]\n     16, Generating copyout(b[:n]) [if not already present]\n     18, Complex loop carried dependence of a-> prevents parallelization\n         Loop carried dependence of b-> prevents parallelization\n         Loop carried backward dependence of b-> prevents vectorization\n         Accelerator serial kernel generated\n         Generating NVIDIA GPU code\n         18, #pragma acc loop seq\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5154435080039548
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21469036200142,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "variable_implicit_data_attributes.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/variable_implicit_data_attributes.c/variable_implicit_data_attributes.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\", line 4: catastrophic error: cannot open source file \"acc_testsuite.h\"\n  #include <acc_testsuite.h>\n                            ^\n\n1 catastrophic error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_implicit_data_attributes.c\".\nCompilation terminated.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21494084000005387
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "variable_predetermined_data_attributes.c": [
            {
                "compilation": {
                    "command": "nvc -acc=gpu -Minfo=all -lm -o /usa/jarmusch/Nvidia/OpenACCV-V/build/variable_predetermined_data_attributes.c/variable_predetermined_data_attributes.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\", line 17: error: identifier \"SEED\" is undefined\n          srand(SEED);\n                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\", line 18: error: identifier \"real_t\" is undefined\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\", line 18: error: identifier \"a\" is undefined\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\", line 18: error: expected an expression\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\", line 18: error: expected a \";\"\n          real_t *a = (real_t *)malloc(n * sizeof(real_t));\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\", line 19: error: identifier \"b\" is undefined\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\", line 19: error: expected an expression\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\", line 19: error: expected a \";\"\n          real_t *b = (real_t *)malloc(n * sizeof(real_t));\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\", line 21: error: identifier \"n\" is undefined\n          for (int x = 0; x < n; ++x) {\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\", line 26: error: non variable found in parallel pragma list\n          #pragma acc data copyin(a[0:n])\n                                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\", line 26: error: non variable found in parallel pragma list\n          #pragma acc data copyin(a[0:n])\n                                   ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\", line 26: error: identifier \"n\" is undefined\n          #pragma acc data copyin(a[0:n])\n                                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\", line 28: error: non variable found in parallel pragma list\n              #pragma acc kernels copyout(b[0:n])\n                                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\", line 28: error: non variable found in parallel pragma list\n              #pragma acc kernels copyout(b[0:n])\n                                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\", line 38: warning: function \"fabs\" declared implicitly [implicit_func_decl]\n              if (fabs(b[x] - a[x]) > PRECISION) {\n                  ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n14 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/variable_predetermined_data_attributes.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16469672399398405
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ]
    },
    "summary": {
        "1": {
            "1": {
                "1": {
                    "acc_async_test.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_copyout.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_deviceptr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_free.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_num_gangs_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_vector_length_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_copyout_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "declare_directive_link_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_collapse_clause.c": {
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_vector_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    }
                }
            }
        }
    },
    "systems": [
        {
            "id": 1,
            "machine": "x86_64",
            "name": null,
            "node": "leia",
            "processor": "x86_64",
            "release": "5.15.0-82-generic",
            "version": "#91-Ubuntu SMP Mon Aug 14 14:14:14 UTC 2023"
        }
    ],
    "testsuites": [
        {
            "acc_async_test.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_attach.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_copyin.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_copyout.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(sizeof(int) * 10);\n    int *b = (int *)malloc(sizeof(int) * 10);\n\n    #pragma acc data copy(a[0:10])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            a[i] = i;\n        }\n\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            b[i] = a[i];\n        }\n    }\n\n    for (int i = 0; i < 10; i++) {\n        if (a[i] != b[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_delete.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_detach.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_deviceptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_free.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    #pragma acc free(a)\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_default_async.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_get_device_num.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_get_device_type.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_get_num_devices.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_get_property.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_hostptr.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_init.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_is_present.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_malloc.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_map_data.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_memcpy_d2d.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_memcpy_device.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_memcpy_from_device.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_memcpy_to_device.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_on_device.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_set_default_async.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_set_device_num.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_set_device_type.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_shutdown.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_unmap_data.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_update_device.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_update_self.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_wait.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_wait_any.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_wait_async.c": {
                "num tests": 0,
                "tests": {}
            },
            "async_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "atomic_construct.c": {
                "num tests": 0,
                "tests": {}
            },
            "attachment_counter.c": {
                "num tests": 0,
                "tests": {}
            },
            "cache_directive.c": {
                "num tests": 0,
                "tests": {}
            },
            "combined_constucts.c": {
                "num tests": 0,
                "tests": {}
            },
            "compute_construct_async_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "compute_construct_default_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "compute_construct_firstprivate_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "compute_construct_if_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "compute_construct_num_gangs_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int num_gangs = 10;\n    int num_workers = 10;\n    int num_threads = num_gangs * num_workers;\n\n    // Create a parallel region with the specified number of gangs and workers\n    #pragma acc parallel num_gangs(num_gangs) num_workers(num_workers)\n    {\n        // Create a loop with the specified number of iterations\n        #pragma acc loop\n        for (int i = 0; i < num_threads; i++) {\n            // Do some work\n            #pragma acc loop\n            for (int j = 0; j < 10; j++) {\n                // Do some more work\n            }\n        }\n    }\n\n    // Check that the number of threads created matches the expected number\n    if (num_threads != acc_get_num_threads()) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_num_workersclause.c": {
                "num tests": 0,
                "tests": {}
            },
            "compute_construct_private_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "compute_construct_reduction_clause.c": {
                "num tests": 1,
                "tests": {
                    "2": {
                        "content": "#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "compute_construct_self_clause.c": {
                "num tests": 1,
                "tests": {
                    "2": {
                        "content": "#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "compute_construct_vector_length_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels vector_length(16) copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_wait_clause.c": {
                "num tests": 1,
                "tests": {
                    "2": {
                        "content": "#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_construct.c": {
                "num tests": 0,
                "tests": {}
            },
            "data_construct_attach_clause.c": {
                "num tests": 1,
                "tests": {
                    "2": {
                        "content": "#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_construct_copy_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "data_construct_copyin_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "data_construct_copyout_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(sizeof(int) * 10);\n    int *b = (int *)malloc(sizeof(int) * 10);\n\n    #pragma acc data copyout(a[0:10])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            a[i] = i;\n        }\n    }\n\n    #pragma acc data copyout(b[0:10])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            b[i] = i;\n        }\n    }\n\n    for (int i = 0; i < 10; i++) {\n        if (a[i] != b[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_create_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "data_construct_delete_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "data_construct_detach_clause.c": {
                "num tests": 1,
                "tests": {
                    "2": {
                        "content": "#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_construct_no_create_clause.c": {
                "num tests": 1,
                "tests": {
                    "2": {
                        "content": "#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_deviceptr_clause.c": {
                "num tests": 1,
                "tests": {
                    "2": {
                        "content": "#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_present_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "declare_directive.c": {
                "num tests": 0,
                "tests": {}
            },
            "declare_directive_create_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:kernels,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data create(a[0:n], b[0:n])\n    {\n        #pragma acc kernels create(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "declare_directive_device_resident_clause.c": {
                "num tests": 1,
                "tests": {
                    "2": {
                        "content": "#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "declare_directive_link_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc declare link(a[0:n])\n    {\n        #pragma acc kernels copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        int err = 0;\n        srand(SEED);\n        real_t *a = (real_t *)malloc(n * sizeof(real_t));\n        real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n        for (int x = 0; x < n; ++x) {\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n\n        #pragma acc enter data copyin(a[0:n])\n        {\n            #pragma acc kernels copyout(b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x) {\n                    b[x] = a[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x) {\n            if (fabs(b[x] - a[x]) > PRECISION) {\n                err += 1;\n            }\n        }\n\n        if (err != 0) {\n            failed += 1;\n        }\n    }\n\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "exit_data_directive.c": {
                "num tests": 0,
                "tests": {}
            },
            "host_data_construct_if_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "host_data_construct_if_present_clause.c": {
                "num tests": 1,
                "tests": {
                    "2": {
                        "content": "#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "host_data_construct_use_device_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "id": 1,
            "init_directive.c": {
                "num tests": 0,
                "tests": {}
            },
            "kernels_construct.c": {
                "num tests": 0,
                "tests": {}
            },
            "loop_construct_auto_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "loop_construct_collapse_clause.c": {
                "num tests": 1,
                "tests": {
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data,data-region,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels collapse(2) copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_device_type_clause.c": {
                "num tests": 1,
                "tests": {
                    "2": {
                        "content": "#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "loop_construct_gang_clause.c": {
                "num tests": 1,
                "tests": {
                    "2": {
                        "content": "#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "loop_construct_independent_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "loop_construct_private_clause.c": {
                "num tests": 1,
                "tests": {
                    "2": {
                        "content": "#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "loop_construct_reduction_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "loop_construct_seq_clause.c": {
                "num tests": 1,
                "tests": {
                    "2": {
                        "content": "#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "loop_construct_tile_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "loop_construct_vector_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels copyout(b[0:n])\n        {\n            #pragma acc loop vector\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_worker_clause.c": {
                "num tests": 0,
                "tests": {}
            },
            "parallel_construct.c": {
                "num tests": 0,
                "tests": {}
            },
            "reference_counters.c": {
                "num tests": 0,
                "tests": {}
            },
            "routine_directive.c": {
                "num tests": 0,
                "tests": {}
            },
            "serial_construct.c": {
                "num tests": 0,
                "tests": {}
            },
            "set_directive.c": {
                "num tests": 0,
                "tests": {}
            },
            "shutdown_directive.c": {
                "num tests": 0,
                "tests": {}
            },
            "update_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "variable_implicit_data_attributes.c": {
                "num tests": 0,
                "tests": {}
            },
            "variable_predetermined_data_attributes.c": {
                "num tests": 0,
                "tests": {}
            },
            "wait_clause.c": {
                "num tests": 1,
                "tests": {
                    "2": {
                        "content": "#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "wait_directive.c": {
                "num tests": 1,
                "tests": {
                    "2": {
                        "content": "#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            }
        }
    ]
}