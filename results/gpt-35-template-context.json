{
    "configs": [
        {
            "CC": "nvc",
            "CCFlags": [
                "-I",
                "~/Nvidia/OpenACCV-V/",
                "-acc=gpu",
                "-Minfo=all"
            ],
            "CC_ACC_Version": "2.6",
            "CPP": "nvc++",
            "CPPFlags": [
                "-I",
                "~/Nvidia/OpenACCV-V/",
                "-acc=gpu",
                "-Minfo=all"
            ],
            "CPP_ACC_Version": "2.6",
            "FC": "nvfortran",
            "FCFlags": [
                "-I",
                "~/Nvidia/OpenACCV-V/",
                "-acc=gpu",
                "-Minfo=all"
            ],
            "FC_ACC_Version": "2.6",
            "PostCompileCommands": [],
            "PostRunCommands": [],
            "PreCompileCommands": [],
            "PreRunCommands": [],
            "build_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/build",
            "config_id": -1,
            "config_name": "init_config.txt",
            "env": null,
            "exclude_tags": [],
            "exclude_tests": [
                "acc_testsuite.Fh",
                "acc_testsuite.h",
                "acc_testsuite_declare.h"
            ],
            "export_format": "json",
            "fast": false,
            "id": 1,
            "include_by_default": true,
            "include_tags": [],
            "include_tests": [],
            "keep_build_dir": false,
            "keep_mutated_tests": false,
            "keep_partial_results": false,
            "keep_policy": "on-error",
            "mutated_test_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/build/mutated_tests",
            "mutators": [],
            "partial": false,
            "partial_results_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/build/partial_results",
            "runAll": false,
            "runtime_prefix": "",
            "seed": null,
            "system_name": null,
            "tag_evaluation": null,
            "test_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/Tests",
            "timeout": 10
        }
    ],
    "runs": {
        "acc_copyin.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_copyin.c/acc_copyin.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 10: error: identifier \"N\" is undefined\n      int *data = (int*)malloc(N * sizeof(int));\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 17: error: too few arguments in function call\n      acc_delete(copy);\n                     ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21440619198256172
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_copyin.c/acc_copyin.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c\", line 25: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31468126899562776
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.008084164001047611,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_copyout.c/acc_copyout.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyout.c",
                    "config": 1,
                    "errors": "main:\n      8, Generating copyout(data[:10]) [if not already present]\n     12, Loop is parallelizable\n         Generating NVIDIA GPU code\n         12, #pragma acc loop gang, vector(32) /* blockIdx.x threadIdx.x */\n     14, Generating exit data copyout(data[:10])\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7755756799888331
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failing in Thread:1\nAccelerator Fatal Error: call to cuMemcpyDtoHAsync returned error 1: Invalid value\n File: /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyout.c\n Function: main:7\n Line: 14\n\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4150137749966234,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_create.c/acc_create.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 18: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11426572999334894
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_create.c/acc_create.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_create.c\", line 15: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3145790830021724
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007610269996803254,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_delete.c/acc_delete.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 9: error: identifier \"SIZE\" is undefined\n      int *arr = (int *)acc_malloc(SIZE * sizeof(int));\n                                   ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 18: error: invalid text in pragma\n      #pragma acc delete(arr)\n                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 25: error: branching into or out of a parallel region is not allowed\n              break;\n              ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1643589739978779
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_delete.c/acc_delete.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_delete.c\", line 38: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3146083390165586
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007798268983606249,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_free.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_free.c/acc_free.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c\", line 8: error: identifier \"N\" is undefined\n      int* data = (int*)acc_malloc(sizeof(int) * N); // Allocate memory on the device\n                                                 ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16429723700275645
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_free.c/acc_free.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_free.c\", line 21: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36479717498878017
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007921002979855984,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_num.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_device_num.c/acc_get_device_num.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\", line 5: warning: function \"acc_get_device_num\" declared implicitly [implicit_func_decl]\n      int device_num = acc_get_device_num(acc_device_not_host);\n                       ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\", line 5: error: identifier \"acc_device_not_host\" is undefined\n      int device_num = acc_get_device_num(acc_device_not_host);\n                                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\", line 21: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11404945800313726
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_device_num.c/acc_get_device_num.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\", line 17: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2646286220115144
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007754896010737866,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_property.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_property.c/acc_get_property.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_property.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31486745399888605
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3648030269832816,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_hostptr.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_hostptr.c/acc_hostptr.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31489213099121116
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007896886992966756,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_init.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_init.c/acc_init.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 9: error: invalid text in pragma\n      #pragma acc init(acc_device_host)\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 9: error: extra text after expected end of preprocessing directive\n      #pragma acc init(acc_device_host)\n                       ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16430250598932616
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_init.c/acc_init.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 19: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3649471219978295
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007792468008119613,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_is_present.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_is_present.c/acc_is_present.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 8: error: identifier \"size_t\" is undefined\n      size_t bytes = sizeof(int) * SIZE;\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 8: error: identifier \"SIZE\" is undefined\n      size_t bytes = sizeof(int) * SIZE;\n                                   ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 9: warning: function \"malloc\" declared implicitly [implicit_func_decl]\n      data = (int *)malloc(bytes);\n                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 10: error: identifier \"NULL\" is undefined\n      if(data == NULL){\n                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 11: warning: function \"fprintf\" declared implicitly [implicit_func_decl]\n          fprintf(stderr, \"Error allocating memory\\n\");\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 11: error: identifier \"stderr\" is undefined\n          fprintf(stderr, \"Error allocating memory\\n\");\n                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 12: warning: function \"exit\" declared implicitly [implicit_func_decl]\n          exit(1);\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 22: warning: function \"acc_is_present\" declared implicitly [implicit_func_decl]\n      if(!acc_is_present(data, bytes)){\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 26: warning: function \"free\" declared implicitly [implicit_func_decl]\n      free(data);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 37: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n6 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16477562001091428
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_is_present.c/acc_is_present.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_is_present.c\", line 34: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21470088401110843
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007841740996809676,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_map_data.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_map_data.c/acc_map_data.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 8: warning: function \"malloc\" declared implicitly [implicit_func_decl]\n      int *host_data = (int*) malloc(sizeof(int) * N);\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 8: error: identifier \"N\" is undefined\n      int *host_data = (int*) malloc(sizeof(int) * N);\n                                                   ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 10: warning: function \"rand\" declared implicitly [implicit_func_decl]\n          host_data[i] = rand() % 100;\n                         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 15: warning: function \"acc_mem_alloc\" declared implicitly [implicit_func_decl]\n      acc_mem_alloc(&device_data, sizeof(int) * N);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 18: warning: function \"acc_map_data\" declared implicitly [implicit_func_decl]\n      acc_map_data(host_data, device_data, sizeof(int) * N);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 29: warning: function \"acc_unmap_data\" declared implicitly [implicit_func_decl]\n      acc_unmap_data(host_data);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 30: warning: function \"acc_mem_free\" declared implicitly [implicit_func_decl]\n      acc_mem_free(device_data);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 32: warning: function \"free\" declared implicitly [implicit_func_decl]\n      free(host_data);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 43: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11421540498849936
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_map_data.c/acc_map_data.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 40: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21440304501447827
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007836571981897578,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_device.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_device.c/acc_memcpy_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 7: warning: function \"malloc\" declared implicitly [implicit_func_decl]\n      int* host_data = (int*)malloc(N * sizeof(int));\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 7: error: identifier \"N\" is undefined\n      int* host_data = (int*)malloc(N * sizeof(int));\n                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 8: warning: function \"acc_malloc\" declared implicitly [implicit_func_decl]\n      int* device_data1 = (int*)acc_malloc(N * sizeof(int));\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 13: warning: function \"rand\" declared implicitly [implicit_func_decl]\n          host_data[i] = rand();\n                         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 17: warning: function \"acc_memcpy_device\" declared implicitly [implicit_func_decl]\n      acc_memcpy_device(device_data1, host_data, N * sizeof(int));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 31: warning: function \"free\" declared implicitly [implicit_func_decl]\n      free(host_data);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 32: warning: function \"acc_free\" declared implicitly [implicit_func_decl]\n      acc_free(device_data1);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 44: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1140621019876562
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_device.c/acc_memcpy_device.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_device.c\", line 41: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2148042299959343
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007777468010317534,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_default_async.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_default_async.c/acc_set_default_async.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 8: warning: function \"acc_set_default_async\" declared implicitly [implicit_func_decl]\n      acc_set_default_async(1); // set async_arg value\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 22: error: expected an expression\n      if(/* condition to check the correctness of the operations */){\n                                                                   ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 35: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11438343502231874
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_default_async.c/acc_set_default_async.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_default_async.c\", line 32: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2144556860148441
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.008334982005180791,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_unmap_data.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 8: warning: function \"malloc\" declared implicitly [implicit_func_decl]\n      int *host_data = (int *)malloc(N * sizeof(int));\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 8: error: identifier \"N\" is undefined\n      int *host_data = (int *)malloc(N * sizeof(int));\n                                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 10: warning: function \"rand\" declared implicitly [implicit_func_decl]\n          host_data[i] = rand() % 100;\n                         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 21: error: invalid text in pragma\n      #pragma acc unmap data(device_data)\n                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 33: warning: function \"free\" declared implicitly [implicit_func_decl]\n      free(host_data);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 45: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n4 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11423829800332896
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 42: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2649549749912694
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007854014984332025,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_update_device.c/acc_update_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c\", line 7: error: invalid text in pragma\n      #pragma acc update device(&err, sizeof(int))\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c\", line 21: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11461513699032366
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_update_device.c/acc_update_device.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c\", line 18: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.264929705997929
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007805122004356235,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_update_self.c/acc_update_self.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 8: warning: function \"malloc\" declared implicitly [implicit_func_decl]\n      int *A = (int*)malloc(size * sizeof(int));\n                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 13: warning: function \"rand\" declared implicitly [implicit_func_decl]\n          A[i] = rand() % size;\n                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 18: warning: function \"acc_update_device\" declared implicitly [implicit_func_decl]\n      acc_update_device(B, size * sizeof(int));\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 28: warning: function \"free\" declared implicitly [implicit_func_decl]\n      free(A);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 41: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11444446101086214
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_update_self.c/acc_update_self.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_self.c\", line 37: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21480630498263054
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007813658012310043,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait.c/acc_wait.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 8: warning: function \"acc_async_test\" declared implicitly [implicit_func_decl]\n      int async_queue = acc_async_test();\n                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 9: warning: function \"acc_async_present\" declared implicitly [implicit_func_decl]\n      acc_async_present(async_queue);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 12: warning: function \"acc_wait\" declared implicitly [implicit_func_decl]\n      acc_wait(async_queue);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 15: warning: function \"acc_async_test_check\" declared implicitly [implicit_func_decl]\n      if(acc_async_test_check(async_queue)){\n         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 28: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16456912501598708
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait.c/acc_wait.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 25: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21467737900093198
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007840448000933975,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_any.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait_any.c/acc_wait_any.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_any.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_any.c\", line 18: warning: function \"acc_wait_any\" declared implicitly [implicit_func_decl]\n      int result = acc_wait_any(count, wait_arg);\n                   ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n/usr/bin/ld: /tmp/nvctcSMb5b_zBrWU.o: in function `test1':\n/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_any.c:18: undefined reference to `acc_wait_any'\n/usr/bin/ld: /tmp/nvctcSMb5b_zBrWU.o: in function `main':\n/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_any.c:18: undefined reference to `acc_wait_any'\npgacclnk: child process exit status 1: /usr/bin/ld\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.3648106820182875
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait_any.c/acc_wait_any.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_any.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_any.c\", line 31: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31519795398344286
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007937994989333674,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_async.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait_async.c/acc_wait_async.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c\", line 7: warning: function \"acc_async_test_init\" declared implicitly [implicit_func_decl]\n      int async_arg = acc_async_test_init();\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c\", line 10: warning: function \"acc_wait_async\" declared implicitly [implicit_func_decl]\n      acc_wait_async(wait_arg, async_arg);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c\", line 12: warning: function \"acc_async_test_check_sync\" declared implicitly [implicit_func_decl]\n      if(acc_async_test_check_sync(async_arg) != 0){\n         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c\", line 25: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.114567154989345
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait_async.c/acc_wait_async.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c\", line 22: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21439586102496833
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007962381991092116,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "combined_constucts.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/combined_constucts.c/combined_constucts.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 11: error: expected an expression\n      if(){\n         ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16414459599764086
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/combined_constucts.c/combined_constucts.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 21: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2646886460133828
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007939658011309803,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_firstprivate_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_firstprivate_clause.c/compute_construct_firstprivate_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_firstprivate_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_firstprivate_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_firstprivate_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_firstprivate_clause.c\", line 7: error: identifier \"NUM_GANGS\" is undefined\n      #pragma acc parallel num_gangs(NUM_GANGS) firstprivate(x) // Update x with the appropriate variable\n                                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_firstprivate_clause.c\", line 7: error: identifier \"x\" is undefined\n      #pragma acc parallel num_gangs(NUM_GANGS) firstprivate(x) // Update x with the appropriate variable\n                                                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_firstprivate_clause.c\", line 27: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n4 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_firstprivate_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11415790498722345
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_firstprivate_clause.c/compute_construct_firstprivate_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_firstprivate_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_firstprivate_clause.c\", line 24: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265003505977802
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007687157019972801,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_if_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_if_clause.c/compute_construct_if_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_if_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_if_clause.c\", line 11: error: invalid text in pragma\n      #pragma acc compute if(condition)     // Use the if clause for the compute construct\n                          ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_if_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16416215899516828
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_if_clause.c/compute_construct_if_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_if_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_if_clause.c\", line 31: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31473368700244464
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007650707004358992,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_num_gangs_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_num_gangs_clause.c/compute_construct_num_gangs_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c\", line 9: warning: function \"acc_get_num_gangs\" declared implicitly [implicit_func_decl]\n          if (acc_get_num_gangs() != 3){\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c\", line 23: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11414116201922297
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_num_gangs_clause.c/compute_construct_num_gangs_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_gangs_clause.c\", line 20: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21435342999757268
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007857891992898658,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_num_workersclause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_num_workersclause.c/compute_construct_num_workersclause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c\", line 7: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c\", line 7: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c\", line 18: warning: variable \"num_workers\" is used before its value is set [used_before_set]\n      if (num_workers != 2511){\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c\", line 31: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11433709698030725
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_num_workersclause.c/compute_construct_num_workersclause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_num_workersclause.c\", line 28: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2143904099939391
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007906824990641326,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_reduction_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_reduction_clause.c/compute_construct_reduction_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2644987439853139
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007683198986342177,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_self_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_self_clause.c/compute_construct_self_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c\", line 8: error: invalid text in pragma\n      #pragma acc parallel loop self\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c\", line 9: error: identifier \"N\" is undefined\n      for (int i = 0; i < N; i++) {\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c\", line 10: error: expected an expression\n          if (/* Add your condition here */) {\n                                           ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c\", line 12: error: branching into or out of a parallel region is not allowed\n              break;\n              ^\n\n4 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1639995189907495
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_self_clause.c/compute_construct_self_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c\", line 22: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26435196297825314
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007699699985096231,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_vector_length_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_vector_length_clause.c/compute_construct_vector_length_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\", line 21: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11395728201023303
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_vector_length_clause.c/compute_construct_vector_length_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\", line 18: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21495141097693704
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007639564981218427,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_copy_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copy_clause.c/data_construct_copy_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 7: warning: function \"malloc\" declared implicitly [implicit_func_decl]\n      int *arr = (int*) malloc(sizeof(int) * N);\n                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 7: error: identifier \"N\" is undefined\n      int *arr = (int*) malloc(sizeof(int) * N);\n                                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 14: warning: function \"rand\" declared implicitly [implicit_func_decl]\n              arr[i] = rand() % 100;\n                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 25: warning: function \"free\" declared implicitly [implicit_func_decl]\n      free(arr);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 37: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11415856599342078
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copy_clause.c/data_construct_copy_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 34: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21479201701004058
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007868462009355426,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_delete_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_delete_clause.c/data_construct_delete_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c",
                    "config": 1,
                    "errors": "test1:\n     15, Accelerator clause: upper bound for dimension 0 of array 'ptr' is unknown\n         Generating exit data delete(ptr[:1])\n         Generating enter data copyin(ptr[:1])\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3149008070176933
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4149312670051586,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_directive_create_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_create_clause.c/declare_directive_create_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\", line 8: warning: function \"malloc\" declared implicitly [implicit_func_decl]\n      int *a = (int*) malloc(N * sizeof(int));\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\", line 8: error: identifier \"N\" is undefined\n      int *a = (int*) malloc(N * sizeof(int));\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\", line 14: warning: function \"rand\" declared implicitly [implicit_func_decl]\n          a[i] = rand() % 100;\n                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\", line 36: warning: function \"free\" declared implicitly [implicit_func_decl]\n      free(a);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\", line 49: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16473234700970352
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_create_clause.c/declare_directive_create_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\", line 46: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21486580799682997
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007832231989596039,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_directive_device_resident_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_device_resident_clause.c/declare_directive_device_resident_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c\", line 23: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11425400801817887
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_device_resident_clause.c/declare_directive_device_resident_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c\", line 20: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21483437798451632
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007959817012306303,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_directive_link_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_link_clause.c/declare_directive_link_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 8: error: identifier \"a\" is undefined\n      #pragma acc declare link(a, b, c)\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 8: error: identifier \"b\" is undefined\n      #pragma acc declare link(a, b, c)\n                                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 8: error: identifier \"c\" is undefined\n      #pragma acc declare link(a, b, c)\n                                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 13: error: identifier \"a\" is undefined\n          a += 1;\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 14: error: identifier \"b\" is undefined\n          b += 2;\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 15: error: identifier \"c\" is undefined\n          c += 3;\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 19: error: identifier \"a\" is undefined\n      if (a != NUM_TEST_CALLS || b != NUM_TEST_CALLS * 2 || c != NUM_TEST_CALLS * 3){\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 19: error: identifier \"NUM_TEST_CALLS\" is undefined\n      if (a != NUM_TEST_CALLS || b != NUM_TEST_CALLS * 2 || c != NUM_TEST_CALLS * 3){\n               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 19: error: identifier \"b\" is undefined\n      if (a != NUM_TEST_CALLS || b != NUM_TEST_CALLS * 2 || c != NUM_TEST_CALLS * 3){\n                                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 19: error: identifier \"c\" is undefined\n      if (a != NUM_TEST_CALLS || b != NUM_TEST_CALLS * 2 || c != NUM_TEST_CALLS * 3){\n                                                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 32: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n12 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11410837000585161
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_link_clause.c/declare_directive_link_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 29: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2145122829824686
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007981377973919734,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "host_data_construct_if_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_if_clause.c/host_data_construct_if_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c",
                    "config": 1,
                    "errors": "test1:\n     14, Generating enter data copyin(flag)\n         Generating implicit firstprivate(err)\n         Generating NVIDIA GPU code\n     20, Generating exit data delete(flag)\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46491666600923054
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3647206099994946,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "host_data_construct_if_present_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_if_present_clause.c/host_data_construct_if_present_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 17: error: expected an expression\n      #pragma acc host_data use_device(device_ptr[:1]) if_present(host_var) // Modify this line to test the if_present clause\n                                                  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 17: error: invalid text in pragma\n      #pragma acc host_data use_device(device_ptr[:1]) if_present(host_var) // Modify this line to test the if_present clause\n                                                                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 17: error: extra text after expected end of preprocessing directive\n      #pragma acc host_data use_device(device_ptr[:1]) if_present(host_var) // Modify this line to test the if_present clause\n                                                                  ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.2144364990235772
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_if_present_clause.c/host_data_construct_if_present_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 40: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2646769239800051
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0078101120016071945,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_auto_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_auto_clause.c/loop_construct_auto_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c\", line 28: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1140063549974002
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_auto_clause.c/loop_construct_auto_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c\", line 25: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2647143549984321
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007917336013633758,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_device_type_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_device_type_clause.c/loop_construct_device_type_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 8: error: identifier \"SIZE\" is undefined\n      for (int i = 0; i < SIZE; i++){\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 9: error: identifier \"arr\" is undefined\n          arr[i] = i;\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 12: error: Specified device type is not a valid device type. Currently accepted device types are 'nvidia, host, multicore, and default'\n      #pragma acc parallel loop device_type(radeon)\n                                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 13: error: identifier \"SIZE\" is undefined\n      for (int i = 0; i < SIZE; i++){\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 14: error: identifier \"arr\" is undefined\n          arr[i] = i;\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 17: error: Specified device type is not a valid device type. Currently accepted device types are 'nvidia, host, multicore, and default'\n      #pragma acc parallel loop device_type(any)\n                                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 18: error: identifier \"SIZE\" is undefined\n      for (int i = 0; i < SIZE; i++){\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 19: error: identifier \"arr\" is undefined\n          arr[i] = i;\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 23: error: identifier \"SIZE\" is undefined\n      for (int i = 0; i < SIZE; i++){\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 24: error: identifier \"arr\" is undefined\n          if (arr[i] != i){\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 38: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n12 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1140907060180325
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_device_type_clause.c/loop_construct_device_type_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 35: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21467697698972188
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00782721399446018,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_gang_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_gang_clause.c/loop_construct_gang_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\", line 11: error: identifier \"SIZE\" is undefined\n      for (int i = 0; i < SIZE; i++) {\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\", line 12: error: identifier \"array\" is undefined\n          if (array[i] != i) {\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\", line 14: error: branching into or out of a parallel region is not allowed\n              break;\n              ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16430440099793486
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_gang_clause.c/loop_construct_gang_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_gang_clause.c\", line 24: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2647848589986097
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007809680013451725,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_independent_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_independent_clause.c/loop_construct_independent_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c\", line 9: error: OpenACC data clause expected\n      #pragma acc data\n                      ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11474889298551716
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_independent_clause.c/loop_construct_independent_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_independent_clause.c\", line 28: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36468532201251946
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007693749008467421,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_tile_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_tile_clause.c/loop_construct_tile_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_tile_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_tile_clause.c\", line 10: error: identifier \"SIZE\" is undefined\n      for (int i = 0; i < SIZE; i++){\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_tile_clause.c\", line 11: error: identifier \"data\" is undefined\n          if (data[i] != 42){\n              ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_tile_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16422112201689743
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_tile_clause.c/loop_construct_tile_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_tile_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_tile_clause.c\", line 22: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3146753360051662
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007868852000683546,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_vector_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_vector_clause.c/loop_construct_vector_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 8: error: identifier \"N\" is undefined\n      for (int i = 0; i < N; i++){\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 9: error: identifier \"array\" is undefined\n          if (array[i] % 2 != 0){\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 11: error: branching into or out of a parallel region is not allowed\n              break;\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 24: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n5 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11406696098856628
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_vector_clause.c/loop_construct_vector_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 21: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21425404999172315
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007732733996817842,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_construct.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/parallel_construct.c/parallel_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 32: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16451273701386526
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/parallel_construct.c/parallel_construct.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/parallel_construct.c\", line 29: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16454236500430852
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007745657989289612,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_construct.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/serial_construct.c/serial_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c\", line 9: error: expected an expression\n          if(){\n             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c\", line 23: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11433512301300652
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/serial_construct.c/serial_construct.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c\", line 20: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2644402220030315
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.008097659010672942,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_directive.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/set_directive.c/set_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 8: error: identifier \"acc_async_sync\" is undefined\n      #pragma acc set default_async(acc_async_sync)\n                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 10: error: invalid text in pragma\n      #pragma acc set if(0)\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 10: error: extra text after expected end of preprocessing directive\n      #pragma acc set if(0)\n                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 13: warning: function \"acc_get_device_num\" declared implicitly [implicit_func_decl]\n      if (acc_get_device_num() != 0) {\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 16: warning: function \"acc_get_default_async\" declared implicitly [implicit_func_decl]\n      if (acc_get_default_async() != acc_async_sync) {\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 16: error: identifier \"acc_async_sync\" is undefined\n      if (acc_get_default_async() != acc_async_sync) {\n                                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 19: warning: function \"acc_get_device_type\" declared implicitly [implicit_func_decl]\n      if (acc_get_device_type() != acc_device_nvidia) {\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 19: error: identifier \"acc_device_nvidia\" is undefined\n      if (acc_get_device_type() != acc_device_nvidia) {\n                                   ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 33: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n7 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.114218400005484
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/set_directive.c/set_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 29: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2644029110088013
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007846341002732515,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_directive.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/shutdown_directive.c/shutdown_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 19: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 29: error: identifier \"In\" is undefined\n  In place of \"// Add code to test shutdown directive here\", add code to test the shutdown directive.\n  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 29: error: expected a \";\"\n  In place of \"// Add code to test shutdown directive here\", add code to test the shutdown directive.\n           ^\n\n\"/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h\", line 95: error: identifier \"size_t\" is undefined\n    size_t __pad5;\n    ^\n\n\"/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h\", line 98: error: identifier \"size_t\" is undefined\n    char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];\n                                                                    ^\n\n\"/usr/include/stdio.h\", line 308: error: \"size_t\" is not a type name\n  extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)\n                                    ^\n\n\"/usr/include/stdio.h\", line 314: error: \"size_t\" is not a type name\n  extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __THROW\n                                                ^\n\n\"/usr/include/stdio.h\", line 333: error: \"size_t\" is not a type name\n  \t\t    int __modes, size_t __n) __THROW;\n  \t\t                 ^\n\n\"/usr/include/stdio.h\", line 339: error: \"size_t\" is not a type name\n  \t\t       size_t __size) __THROW;\n  \t\t       ^\n\n\"/usr/include/stdio.h\", line 378: error: \"size_t\" is not a type name\n  extern int snprintf (char *__restrict __s, size_t __maxlen,\n                                             ^\n\n\"/usr/include/stdio.h\", line 382: error: \"size_t\" is not a type name\n  extern int vsnprintf (char *__restrict __s, size_t __maxlen,\n                                              ^\n\n\"/usr/include/stdio.h\", line 633: error: \"size_t\" is not a type name\n                               size_t *__restrict __n, int __delimiter,\n                               ^\n\n\"/usr/include/stdio.h\", line 636: error: \"size_t\" is not a type name\n                             size_t *__restrict __n, int __delimiter,\n                             ^\n\n\"/usr/include/stdio.h\", line 646: error: \"size_t\" is not a type name\n                            size_t *__restrict __n,\n                            ^\n\n\"/usr/include/stdio.h\", line 675: error: \"size_t\" is not a type name\n  extern size_t fread (void *__restrict __ptr, size_t __size,\n         ^\n\n\"/usr/include/stdio.h\", line 675: error: \"size_t\" is not a type name\n  extern size_t fread (void *__restrict __ptr, size_t __size,\n                                               ^\n\n\"/usr/include/stdio.h\", line 676: error: \"size_t\" is not a type name\n  \t\t     size_t __n, FILE *__restrict __stream) __wur;\n  \t\t     ^\n\n\"/usr/include/stdio.h\", line 681: error: \"size_t\" is not a type name\n  extern size_t fwrite (const void *__restrict __ptr, size_t __size,\n         ^\n\n\"/usr/include/stdio.h\", line 681: error: \"size_t\" is not a type name\n  extern size_t fwrite (const void *__restrict __ptr, size_t __size,\n                                                      ^\n\n\"/usr/include/stdio.h\", line 682: error: \"size_t\" is not a type name\n  \t\t      size_t __n, FILE *__restrict __s);\n  \t\t      ^\n\n\"/usr/include/stdio.h\", line 702: error: \"size_t\" is not a type name\n  extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,\n         ^\n\n\"/usr/include/stdio.h\", line 702: error: \"size_t\" is not a type name\n  extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,\n                                                        ^\n\n\"/usr/include/stdio.h\", line 703: error: \"size_t\" is not a type name\n  \t\t\t      size_t __n, FILE *__restrict __stream) __wur;\n  \t\t\t      ^\n\n\"/usr/include/stdio.h\", line 704: error: \"size_t\" is not a type name\n  extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,\n         ^\n\n\"/usr/include/stdio.h\", line 704: error: \"size_t\" is not a type name\n  extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,\n                                                               ^\n\n\"/usr/include/stdio.h\", line 705: error: \"size_t\" is not a type name\n  \t\t\t       size_t __n, FILE *__restrict __stream);\n  \t\t\t       ^\n\n\"/usr/include/stdlib.h\", line 98: error: \"size_t\" is not a type name\n  extern size_t __ctype_get_mb_cur_max (void) __THROW __wur;\n         ^\n\n\"/usr/include/stdlib.h\", line 412: error: \"size_t\" is not a type name\n  \t\t\tsize_t __statelen) __THROW __nonnull ((2));\n  \t\t\t^\n\n\"/usr/include/stdlib.h\", line 442: error: \"size_t\" is not a type name\n  \t\t\tsize_t __statelen,\n  \t\t\t^\n\n\"/usr/include/stdlib.h\", line 540: error: \"size_t\" is not a type name\n  extern void *malloc (size_t __size) __THROW __attribute_malloc__\n                       ^\n\n\"/usr/include/stdlib.h\", line 543: error: \"size_t\" is not a type name\n  extern void *calloc (size_t __nmemb, size_t __size)\n                       ^\n\n\"/usr/include/stdlib.h\", line 543: error: \"size_t\" is not a type name\n  extern void *calloc (size_t __nmemb, size_t __size)\n                                       ^\n\n\"/usr/include/stdlib.h\", line 551: error: \"size_t\" is not a type name\n  extern void *realloc (void *__ptr, size_t __size)\n                                     ^\n\n\"/usr/include/stdlib.h\", line 563: error: \"size_t\" is not a type name\n  extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)\n                                          ^\n\n\"/usr/include/stdlib.h\", line 563: error: \"size_t\" is not a type name\n  extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)\n                                                          ^\n\n\"/usr/include/stdlib.h\", line 569: error: \"size_t\" is not a type name\n  extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)\n                                          ^\n\n\"/usr/include/stdlib.h\", line 569: error: \"size_t\" is not a type name\n  extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)\n                                                          ^\n\n\"/usr/include/alloca.h\", line 32: error: \"size_t\" is not a type name\n  extern void *alloca (size_t __size) __THROW;\n                       ^\n\n\"/usr/include/stdlib.h\", line 580: error: \"size_t\" is not a type name\n  extern void *valloc (size_t __size) __THROW __attribute_malloc__\n                       ^\n\n\"/usr/include/stdlib.h\", line 586: error: \"size_t\" is not a type name\n  extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)\n                                              ^\n\n\"/usr/include/stdlib.h\", line 586: error: \"size_t\" is not a type name\n  extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)\n                                                                  ^\n\n\"/usr/include/stdlib.h\", line 592: error: \"size_t\" is not a type name\n  extern void *aligned_alloc (size_t __alignment, size_t __size)\n                              ^\n\n\"/usr/include/stdlib.h\", line 592: error: \"size_t\" is not a type name\n  extern void *aligned_alloc (size_t __alignment, size_t __size)\n                                                  ^\n\n\"/usr/include/stdlib.h\", line 829: error: \"size_t\" is not a type name\n  \t\t      size_t __nmemb, size_t __size, __compar_fn_t __compar)\n  \t\t      ^\n\n\"/usr/include/stdlib.h\", line 829: error: \"size_t\" is not a type name\n  \t\t      size_t __nmemb, size_t __size, __compar_fn_t __compar)\n  \t\t                      ^\n\n\"/usr/include/stdlib.h\", line 838: error: \"size_t\" is not a type name\n  extern void qsort (void *__base, size_t __nmemb, size_t __size,\n                                   ^\n\n\"/usr/include/stdlib.h\", line 838: error: \"size_t\" is not a type name\n  extern void qsort (void *__base, size_t __nmemb, size_t __size,\n                                                   ^\n\n\"/usr/include/stdlib.h\", line 912: error: \"size_t\" is not a type name\n  \t\t   size_t __len) __THROW __nonnull ((3, 4, 5));\n  \t\t   ^\n\n\"/usr/include/stdlib.h\", line 915: error: \"size_t\" is not a type name\n  \t\t   size_t __len) __THROW __nonnull ((3, 4, 5));\n  \t\t   ^\n\n\"/usr/include/stdlib.h\", line 919: error: \"size_t\" is not a type name\n  \t\t    char *__restrict __buf, size_t __len)\n  \t\t                            ^\n\n\"/usr/include/stdlib.h\", line 923: error: \"size_t\" is not a type name\n  \t\t    char *__restrict __buf, size_t __len)\n  \t\t                            ^\n\n\"/usr/include/stdlib.h\", line 930: error: \"size_t\" is not a type name\n  extern int mblen (const char *__s, size_t __n) __THROW;\n                                     ^\n\n\"/usr/include/stdlib.h\", line 934: error: \"size_t\" is not a type name\n  \t\t   const char *__restrict __s, size_t __n) __THROW;\n  \t\t                               ^\n\n\"/usr/include/stdlib.h\", line 941: error: \"size_t\" is not a type name\n  extern size_t mbstowcs (wchar_t *__restrict  __pwcs,\n         ^\n\n\"/usr/include/stdlib.h\", line 942: error: \"size_t\" is not a type name\n  \t\t\tconst char *__restrict __s, size_t __n) __THROW\n  \t\t\t                            ^\n\n\"/usr/include/stdlib.h\", line 945: error: \"size_t\" is not a type name\n  extern size_t wcstombs (char *__restrict __s,\n         ^\n\n\"/usr/include/stdlib.h\", line 946: error: \"size_t\" is not a type name\n  \t\t\tconst wchar_t *__restrict __pwcs, size_t __n)\n  \t\t\t                                  ^\n\n\"/usr/include/time.h\", line 100: error: \"size_t\" is not a type name\n  extern size_t strftime (char *__restrict __s, size_t __maxsize,\n         ^\n\n\"/usr/include/time.h\", line 100: error: \"size_t\" is not a type name\n  extern size_t strftime (char *__restrict __s, size_t __maxsize,\n                                                ^\n\n\"/usr/include/time.h\", line 116: error: \"size_t\" is not a type name\n  extern size_t strftime_l (char *__restrict __s, size_t __maxsize,\n         ^\n\n\"/usr/include/time.h\", line 116: error: \"size_t\" is not a type name\n  extern size_t strftime_l (char *__restrict __s, size_t __maxsize,\n                                                  ^\n\n\"/opt/nvidia/hpc_sdk/Linux_x86_64/23.5/compilers/include/openacc.h\", line 77: error: \"size_t\" is not a type name\n  extern size_t acc_get_property(int devnum, acc_device_t devtype,\n         ^\n\n\"/opt/nvidia/hpc_sdk/Linux_x86_64/23.5/compilers/include/openacc.h\", line 156: error: \"size_t\" is not a type name\n  extern size_t pgi_compare(const void *hostptr, const char *dtypename,\n         ^\n\n\"/opt/nvidia/hpc_sdk/Linux_x86_64/23.5/compilers/include/openacc.h\", line 160: error: \"size_t\" is not a type name\n  extern size_t pcast_compare(const void *hostptr, const char *dtypename,\n         ^\n\n\"/opt/nvidia/hpc_sdk/Linux_x86_64/23.5/compilers/include/openacc.h\", line 258: error: \"size_t\" is not a type name\n  extern int accx_managed_mem_advise(void *devptr, size_t size, acc_managed_mem_advice_t advice);\n                                                   ^\n\n\"/usr/include/string.h\", line 44: error: \"size_t\" is not a type name\n  \t\t     size_t __n) __THROW __nonnull ((1, 2));\n  \t\t     ^\n\n\"/usr/include/string.h\", line 47: error: \"size_t\" is not a type name\n  extern void *memmove (void *__dest, const void *__src, size_t __n)\n                                                         ^\n\n\"/usr/include/string.h\", line 55: error: \"size_t\" is not a type name\n  \t\t      int __c, size_t __n)\n  \t\t               ^\n\n\"/usr/include/string.h\", line 61: error: \"size_t\" is not a type name\n  extern void *memset (void *__s, int __c, size_t __n) __THROW __nonnull ((1));\n                                           ^\n\n\"/usr/include/string.h\", line 64: error: \"size_t\" is not a type name\n  extern int memcmp (const void *__s1, const void *__s2, size_t __n)\n                                                         ^\n\n\"/usr/include/string.h\", line 80: error: \"size_t\" is not a type name\n  extern int __memcmpeq (const void *__s1, const void *__s2, size_t __n)\n                                                             ^\n\n\"/usr/include/string.h\", line 107: error: \"size_t\" is not a type name\n  extern void *memchr (const void *__s, int __c, size_t __n)\n                                                 ^\n\n\"/usr/include/string.h\", line 145: error: \"size_t\" is not a type name\n  \t\t      const char *__restrict __src, size_t __n)\n  \t\t                                    ^\n\n\"/usr/include/string.h\", line 153: error: \"size_t\" is not a type name\n  \t\t      size_t __n) __THROW __nonnull ((1, 2));\n  \t\t      ^\n\n\"/usr/include/string.h\", line 159: error: \"size_t\" is not a type name\n  extern int strncmp (const char *__s1, const char *__s2, size_t __n)\n                                                          ^\n\n\"/usr/include/string.h\", line 166: error: \"size_t\" is not a type name\n  extern size_t strxfrm (char *__restrict __dest,\n         ^\n\n\"/usr/include/string.h\", line 167: error: \"size_t\" is not a type name\n  \t\t       const char *__restrict __src, size_t __n)\n  \t\t                                     ^\n\n\"/usr/include/string.h\", line 179: error: \"size_t\" is not a type name\n  extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,\n         ^\n\n\"/usr/include/string.h\", line 179: error: \"size_t\" is not a type name\n  extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,\n                                                            ^\n\n\"/usr/include/string.h\", line 195: error: \"size_t\" is not a type name\n  extern char *strndup (const char *__string, size_t __n)\n                                              ^\n\n\"/usr/include/string.h\", line 293: error: \"size_t\" is not a type name\n  extern size_t strcspn (const char *__s, const char *__reject)\n         ^\n\n\"/usr/include/string.h\", line 297: error: \"size_t\" is not a type name\n  extern size_t strspn (const char *__s, const char *__accept)\n         ^\n\n\"/usr/include/string.h\", line 407: error: \"size_t\" is not a type name\n  extern size_t strlen (const char *__s)\n         ^\n\n\"/usr/include/string.h\", line 413: error: \"size_t\" is not a type name\n  extern size_t strnlen (const char *__string, size_t __maxlen)\n         ^\n\n\"/usr/include/string.h\", line 413: error: \"size_t\" is not a type name\n  extern size_t strnlen (const char *__string, size_t __maxlen)\n                                               ^\n\n\"/usr/include/string.h\", line 432: error: \"size_t\" is not a type name\n  extern int __REDIRECT_NTH (strerror_r,\n             ^\n\n\"/usr/include/strings.h\", line 34: error: \"size_t\" is not a type name\n  extern int bcmp (const void *__s1, const void *__s2, size_t __n)\n                                                       ^\n\n\"/usr/include/strings.h\", line 38: error: \"size_t\" is not a type name\n  extern void bcopy (const void *__src, void *__dest, size_t __n)\n                                                      ^\n\n\"/usr/include/strings.h\", line 42: error: \"size_t\" is not a type name\n  extern void bzero (void *__s, size_t __n) __THROW __nonnull ((1));\n                                ^\n\n\"/usr/include/strings.h\", line 120: error: \"size_t\" is not a type name\n  extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)\n                                                              ^\n\n\"/usr/include/strings.h\", line 134: error: \"size_t\" is not a type name\n  \t\t\t  size_t __n, locale_t __loc)\n  \t\t\t  ^\n\n\"/usr/include/string.h\", line 466: error: \"size_t\" is not a type name\n  extern void explicit_bzero (void *__s, size_t __n) __THROW __nonnull ((1))\n                                         ^\n\n\"/usr/include/string.h\", line 497: error: \"size_t\" is not a type name\n  \t\t\tconst char *__restrict __src, size_t __n)\n  \t\t\t                              ^\n\n\"/usr/include/string.h\", line 500: error: \"size_t\" is not a type name\n  \t\t      const char *__restrict __src, size_t __n)\n  \t\t                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 42: error: function \"test1\" has already been defined\n  int test1() {\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 54: error: too many arguments in function call\n          acc_get_device_type(&devType, &devNum, i);\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 67: error: function \"main\" has already been defined\n  int main() {\n      ^\n\n98 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16465189401060343
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/shutdown_directive.c/shutdown_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 16: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 29: error: identifier \"In\" is undefined\n  In place of \"// Add code to test shutdown directive here\", add code to test the shutdown directive.\n  ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 29: error: expected a \";\"\n  In place of \"// Add code to test shutdown directive here\", add code to test the shutdown directive.\n           ^\n\n\"/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h\", line 95: error: identifier \"size_t\" is undefined\n    size_t __pad5;\n    ^\n\n\"/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h\", line 98: error: identifier \"size_t\" is undefined\n    char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];\n                                                                    ^\n\n\"/usr/include/stdio.h\", line 308: error: \"size_t\" is not a type name\n  extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)\n                                    ^\n\n\"/usr/include/stdio.h\", line 314: error: \"size_t\" is not a type name\n  extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __THROW\n                                                ^\n\n\"/usr/include/stdio.h\", line 333: error: \"size_t\" is not a type name\n  \t\t    int __modes, size_t __n) __THROW;\n  \t\t                 ^\n\n\"/usr/include/stdio.h\", line 339: error: \"size_t\" is not a type name\n  \t\t       size_t __size) __THROW;\n  \t\t       ^\n\n\"/usr/include/stdio.h\", line 378: error: \"size_t\" is not a type name\n  extern int snprintf (char *__restrict __s, size_t __maxlen,\n                                             ^\n\n\"/usr/include/stdio.h\", line 382: error: \"size_t\" is not a type name\n  extern int vsnprintf (char *__restrict __s, size_t __maxlen,\n                                              ^\n\n\"/usr/include/stdio.h\", line 633: error: \"size_t\" is not a type name\n                               size_t *__restrict __n, int __delimiter,\n                               ^\n\n\"/usr/include/stdio.h\", line 636: error: \"size_t\" is not a type name\n                             size_t *__restrict __n, int __delimiter,\n                             ^\n\n\"/usr/include/stdio.h\", line 646: error: \"size_t\" is not a type name\n                            size_t *__restrict __n,\n                            ^\n\n\"/usr/include/stdio.h\", line 675: error: \"size_t\" is not a type name\n  extern size_t fread (void *__restrict __ptr, size_t __size,\n         ^\n\n\"/usr/include/stdio.h\", line 675: error: \"size_t\" is not a type name\n  extern size_t fread (void *__restrict __ptr, size_t __size,\n                                               ^\n\n\"/usr/include/stdio.h\", line 676: error: \"size_t\" is not a type name\n  \t\t     size_t __n, FILE *__restrict __stream) __wur;\n  \t\t     ^\n\n\"/usr/include/stdio.h\", line 681: error: \"size_t\" is not a type name\n  extern size_t fwrite (const void *__restrict __ptr, size_t __size,\n         ^\n\n\"/usr/include/stdio.h\", line 681: error: \"size_t\" is not a type name\n  extern size_t fwrite (const void *__restrict __ptr, size_t __size,\n                                                      ^\n\n\"/usr/include/stdio.h\", line 682: error: \"size_t\" is not a type name\n  \t\t      size_t __n, FILE *__restrict __s);\n  \t\t      ^\n\n\"/usr/include/stdio.h\", line 702: error: \"size_t\" is not a type name\n  extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,\n         ^\n\n\"/usr/include/stdio.h\", line 702: error: \"size_t\" is not a type name\n  extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,\n                                                        ^\n\n\"/usr/include/stdio.h\", line 703: error: \"size_t\" is not a type name\n  \t\t\t      size_t __n, FILE *__restrict __stream) __wur;\n  \t\t\t      ^\n\n\"/usr/include/stdio.h\", line 704: error: \"size_t\" is not a type name\n  extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,\n         ^\n\n\"/usr/include/stdio.h\", line 704: error: \"size_t\" is not a type name\n  extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,\n                                                               ^\n\n\"/usr/include/stdio.h\", line 705: error: \"size_t\" is not a type name\n  \t\t\t       size_t __n, FILE *__restrict __stream);\n  \t\t\t       ^\n\n\"/usr/include/stdlib.h\", line 98: error: \"size_t\" is not a type name\n  extern size_t __ctype_get_mb_cur_max (void) __THROW __wur;\n         ^\n\n\"/usr/include/stdlib.h\", line 412: error: \"size_t\" is not a type name\n  \t\t\tsize_t __statelen) __THROW __nonnull ((2));\n  \t\t\t^\n\n\"/usr/include/stdlib.h\", line 442: error: \"size_t\" is not a type name\n  \t\t\tsize_t __statelen,\n  \t\t\t^\n\n\"/usr/include/stdlib.h\", line 540: error: \"size_t\" is not a type name\n  extern void *malloc (size_t __size) __THROW __attribute_malloc__\n                       ^\n\n\"/usr/include/stdlib.h\", line 543: error: \"size_t\" is not a type name\n  extern void *calloc (size_t __nmemb, size_t __size)\n                       ^\n\n\"/usr/include/stdlib.h\", line 543: error: \"size_t\" is not a type name\n  extern void *calloc (size_t __nmemb, size_t __size)\n                                       ^\n\n\"/usr/include/stdlib.h\", line 551: error: \"size_t\" is not a type name\n  extern void *realloc (void *__ptr, size_t __size)\n                                     ^\n\n\"/usr/include/stdlib.h\", line 563: error: \"size_t\" is not a type name\n  extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)\n                                          ^\n\n\"/usr/include/stdlib.h\", line 563: error: \"size_t\" is not a type name\n  extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)\n                                                          ^\n\n\"/usr/include/stdlib.h\", line 569: error: \"size_t\" is not a type name\n  extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)\n                                          ^\n\n\"/usr/include/stdlib.h\", line 569: error: \"size_t\" is not a type name\n  extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)\n                                                          ^\n\n\"/usr/include/alloca.h\", line 32: error: \"size_t\" is not a type name\n  extern void *alloca (size_t __size) __THROW;\n                       ^\n\n\"/usr/include/stdlib.h\", line 580: error: \"size_t\" is not a type name\n  extern void *valloc (size_t __size) __THROW __attribute_malloc__\n                       ^\n\n\"/usr/include/stdlib.h\", line 586: error: \"size_t\" is not a type name\n  extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)\n                                              ^\n\n\"/usr/include/stdlib.h\", line 586: error: \"size_t\" is not a type name\n  extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)\n                                                                  ^\n\n\"/usr/include/stdlib.h\", line 592: error: \"size_t\" is not a type name\n  extern void *aligned_alloc (size_t __alignment, size_t __size)\n                              ^\n\n\"/usr/include/stdlib.h\", line 592: error: \"size_t\" is not a type name\n  extern void *aligned_alloc (size_t __alignment, size_t __size)\n                                                  ^\n\n\"/usr/include/stdlib.h\", line 829: error: \"size_t\" is not a type name\n  \t\t      size_t __nmemb, size_t __size, __compar_fn_t __compar)\n  \t\t      ^\n\n\"/usr/include/stdlib.h\", line 829: error: \"size_t\" is not a type name\n  \t\t      size_t __nmemb, size_t __size, __compar_fn_t __compar)\n  \t\t                      ^\n\n\"/usr/include/stdlib.h\", line 838: error: \"size_t\" is not a type name\n  extern void qsort (void *__base, size_t __nmemb, size_t __size,\n                                   ^\n\n\"/usr/include/stdlib.h\", line 838: error: \"size_t\" is not a type name\n  extern void qsort (void *__base, size_t __nmemb, size_t __size,\n                                                   ^\n\n\"/usr/include/stdlib.h\", line 912: error: \"size_t\" is not a type name\n  \t\t   size_t __len) __THROW __nonnull ((3, 4, 5));\n  \t\t   ^\n\n\"/usr/include/stdlib.h\", line 915: error: \"size_t\" is not a type name\n  \t\t   size_t __len) __THROW __nonnull ((3, 4, 5));\n  \t\t   ^\n\n\"/usr/include/stdlib.h\", line 919: error: \"size_t\" is not a type name\n  \t\t    char *__restrict __buf, size_t __len)\n  \t\t                            ^\n\n\"/usr/include/stdlib.h\", line 923: error: \"size_t\" is not a type name\n  \t\t    char *__restrict __buf, size_t __len)\n  \t\t                            ^\n\n\"/usr/include/stdlib.h\", line 930: error: \"size_t\" is not a type name\n  extern int mblen (const char *__s, size_t __n) __THROW;\n                                     ^\n\n\"/usr/include/stdlib.h\", line 934: error: \"size_t\" is not a type name\n  \t\t   const char *__restrict __s, size_t __n) __THROW;\n  \t\t                               ^\n\n\"/usr/include/stdlib.h\", line 941: error: \"size_t\" is not a type name\n  extern size_t mbstowcs (wchar_t *__restrict  __pwcs,\n         ^\n\n\"/usr/include/stdlib.h\", line 942: error: \"size_t\" is not a type name\n  \t\t\tconst char *__restrict __s, size_t __n) __THROW\n  \t\t\t                            ^\n\n\"/usr/include/stdlib.h\", line 945: error: \"size_t\" is not a type name\n  extern size_t wcstombs (char *__restrict __s,\n         ^\n\n\"/usr/include/stdlib.h\", line 946: error: \"size_t\" is not a type name\n  \t\t\tconst wchar_t *__restrict __pwcs, size_t __n)\n  \t\t\t                                  ^\n\n\"/usr/include/time.h\", line 100: error: \"size_t\" is not a type name\n  extern size_t strftime (char *__restrict __s, size_t __maxsize,\n         ^\n\n\"/usr/include/time.h\", line 100: error: \"size_t\" is not a type name\n  extern size_t strftime (char *__restrict __s, size_t __maxsize,\n                                                ^\n\n\"/usr/include/time.h\", line 116: error: \"size_t\" is not a type name\n  extern size_t strftime_l (char *__restrict __s, size_t __maxsize,\n         ^\n\n\"/usr/include/time.h\", line 116: error: \"size_t\" is not a type name\n  extern size_t strftime_l (char *__restrict __s, size_t __maxsize,\n                                                  ^\n\n\"/opt/nvidia/hpc_sdk/Linux_x86_64/23.5/compilers/include/openacc.h\", line 77: error: \"size_t\" is not a type name\n  extern size_t acc_get_property(int devnum, acc_device_t devtype,\n         ^\n\n\"/opt/nvidia/hpc_sdk/Linux_x86_64/23.5/compilers/include/openacc.h\", line 156: error: \"size_t\" is not a type name\n  extern size_t pgi_compare(const void *hostptr, const char *dtypename,\n         ^\n\n\"/opt/nvidia/hpc_sdk/Linux_x86_64/23.5/compilers/include/openacc.h\", line 160: error: \"size_t\" is not a type name\n  extern size_t pcast_compare(const void *hostptr, const char *dtypename,\n         ^\n\n\"/opt/nvidia/hpc_sdk/Linux_x86_64/23.5/compilers/include/openacc.h\", line 258: error: \"size_t\" is not a type name\n  extern int accx_managed_mem_advise(void *devptr, size_t size, acc_managed_mem_advice_t advice);\n                                                   ^\n\n\"/usr/include/string.h\", line 44: error: \"size_t\" is not a type name\n  \t\t     size_t __n) __THROW __nonnull ((1, 2));\n  \t\t     ^\n\n\"/usr/include/string.h\", line 47: error: \"size_t\" is not a type name\n  extern void *memmove (void *__dest, const void *__src, size_t __n)\n                                                         ^\n\n\"/usr/include/string.h\", line 55: error: \"size_t\" is not a type name\n  \t\t      int __c, size_t __n)\n  \t\t               ^\n\n\"/usr/include/string.h\", line 61: error: \"size_t\" is not a type name\n  extern void *memset (void *__s, int __c, size_t __n) __THROW __nonnull ((1));\n                                           ^\n\n\"/usr/include/string.h\", line 64: error: \"size_t\" is not a type name\n  extern int memcmp (const void *__s1, const void *__s2, size_t __n)\n                                                         ^\n\n\"/usr/include/string.h\", line 80: error: \"size_t\" is not a type name\n  extern int __memcmpeq (const void *__s1, const void *__s2, size_t __n)\n                                                             ^\n\n\"/usr/include/string.h\", line 107: error: \"size_t\" is not a type name\n  extern void *memchr (const void *__s, int __c, size_t __n)\n                                                 ^\n\n\"/usr/include/string.h\", line 145: error: \"size_t\" is not a type name\n  \t\t      const char *__restrict __src, size_t __n)\n  \t\t                                    ^\n\n\"/usr/include/string.h\", line 153: error: \"size_t\" is not a type name\n  \t\t      size_t __n) __THROW __nonnull ((1, 2));\n  \t\t      ^\n\n\"/usr/include/string.h\", line 159: error: \"size_t\" is not a type name\n  extern int strncmp (const char *__s1, const char *__s2, size_t __n)\n                                                          ^\n\n\"/usr/include/string.h\", line 166: error: \"size_t\" is not a type name\n  extern size_t strxfrm (char *__restrict __dest,\n         ^\n\n\"/usr/include/string.h\", line 167: error: \"size_t\" is not a type name\n  \t\t       const char *__restrict __src, size_t __n)\n  \t\t                                     ^\n\n\"/usr/include/string.h\", line 179: error: \"size_t\" is not a type name\n  extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,\n         ^\n\n\"/usr/include/string.h\", line 179: error: \"size_t\" is not a type name\n  extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,\n                                                            ^\n\n\"/usr/include/string.h\", line 195: error: \"size_t\" is not a type name\n  extern char *strndup (const char *__string, size_t __n)\n                                              ^\n\n\"/usr/include/string.h\", line 293: error: \"size_t\" is not a type name\n  extern size_t strcspn (const char *__s, const char *__reject)\n         ^\n\n\"/usr/include/string.h\", line 297: error: \"size_t\" is not a type name\n  extern size_t strspn (const char *__s, const char *__accept)\n         ^\n\n\"/usr/include/string.h\", line 407: error: \"size_t\" is not a type name\n  extern size_t strlen (const char *__s)\n         ^\n\n\"/usr/include/string.h\", line 413: error: \"size_t\" is not a type name\n  extern size_t strnlen (const char *__string, size_t __maxlen)\n         ^\n\n\"/usr/include/string.h\", line 413: error: \"size_t\" is not a type name\n  extern size_t strnlen (const char *__string, size_t __maxlen)\n                                               ^\n\n\"/usr/include/string.h\", line 432: error: \"size_t\" is not a type name\n  extern int __REDIRECT_NTH (strerror_r,\n             ^\n\n\"/usr/include/strings.h\", line 34: error: \"size_t\" is not a type name\n  extern int bcmp (const void *__s1, const void *__s2, size_t __n)\n                                                       ^\n\n\"/usr/include/strings.h\", line 38: error: \"size_t\" is not a type name\n  extern void bcopy (const void *__src, void *__dest, size_t __n)\n                                                      ^\n\n\"/usr/include/strings.h\", line 42: error: \"size_t\" is not a type name\n  extern void bzero (void *__s, size_t __n) __THROW __nonnull ((1));\n                                ^\n\n\"/usr/include/strings.h\", line 120: error: \"size_t\" is not a type name\n  extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)\n                                                              ^\n\n\"/usr/include/strings.h\", line 134: error: \"size_t\" is not a type name\n  \t\t\t  size_t __n, locale_t __loc)\n  \t\t\t  ^\n\n\"/usr/include/string.h\", line 466: error: \"size_t\" is not a type name\n  extern void explicit_bzero (void *__s, size_t __n) __THROW __nonnull ((1))\n                                         ^\n\n\"/usr/include/string.h\", line 497: error: \"size_t\" is not a type name\n  \t\t\tconst char *__restrict __src, size_t __n)\n  \t\t\t                              ^\n\n\"/usr/include/string.h\", line 500: error: \"size_t\" is not a type name\n  \t\t      const char *__restrict __src, size_t __n)\n  \t\t                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 67: error: function \"main\" has already been defined\n  int main() {\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 69: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\n94 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\".\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21441840400802903
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "update_directive.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/update_directive.c/update_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/update_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/update_directive.c\", line 11: error: expected an expression\n      if(){\n         ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/update_directive.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16473251700517721
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/update_directive.c/update_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/update_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/update_directive.c\", line 21: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31489172999863513
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007838526013074443,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ]
    },
    "summary": {
        "1": {
            "1": {
                "1": {
                    "acc_copyin.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_create.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_delete.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_free.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_property.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_hostptr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_init.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_is_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_map_data.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_default_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_unmap_data.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_update_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_update_self.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_any.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "combined_constucts.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_firstprivate_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_if_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_num_gangs_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_num_workersclause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_reduction_clause.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "compute_construct_self_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_vector_length_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_copy_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_delete_clause.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "declare_directive_create_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "declare_directive_device_resident_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "declare_directive_link_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "host_data_construct_if_clause.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "host_data_construct_if_present_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_auto_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_device_type_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_gang_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_independent_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_tile_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_vector_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_construct.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_construct.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "update_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    }
                }
            }
        }
    },
    "systems": [
        {
            "id": 1,
            "machine": "x86_64",
            "name": null,
            "node": "leia",
            "processor": "x86_64",
            "release": "5.15.0-82-generic",
            "version": "#91-Ubuntu SMP Mon Aug 14 14:14:14 UTC 2023"
        }
    ],
    "testsuites": [
        {
            "acc_async_test.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Call acc_async_test_all()\n    if (acc_async_test_all() == 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_attach.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    // Write code to test the acc attach feature\n\n    if () {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_copyin.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Test acc_copyin behavior\n    int *data = (int*)malloc(N * sizeof(int));\n    int *copy = (int*)acc_copyin(data, N * sizeof(int));\n    if (copy != data) {\n        err = 1;\n    }\n\n    free(data);\n    acc_delete(copy);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed != 0){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_create.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // TODO: Add code to test the acc_create feature\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create an array on the device\n    int *arr = (int *)acc_malloc(SIZE * sizeof(int));\n\n    // Initialize the array on the device\n    #pragma acc parallel loop present(arr)\n    for(int i = 0; i < SIZE; i++){\n        arr[i] = i;\n    }\n\n    // Delete the array on the device\n    #pragma acc delete(arr)\n\n    // Check if the array is still in device memory\n    #pragma acc parallel loop present(arr)\n    for(int i = 0; i < SIZE; i++){\n        if(arr[i] != i){\n            err = 1;\n            break;\n        }\n    }\n\n    // Free the array on the device\n    acc_free(arr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_detach.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc data detach\n    {\n        // Code to be executed on the device\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n\n    if (failed != 0) {\n        failcode |= (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_deviceptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime, data, executable-data, construct-independent, V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    // Initialize host data\n    int hostData = rand();\n\n    // Declare device data\n    int* deviceData;\n\n    // Allocate device memory\n    #pragma acc enter data copyin(hostData)\n    \n    // Get the device pointer\n    deviceData = (int*)acc_deviceptr(&hostData);\n\n    // Check if device pointer is null\n    if (deviceData == NULL) {\n        err = 1;\n    }\n\n    // Exit device data\n    #pragma acc exit data delete(hostData)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_free.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int* data = (int*)acc_malloc(sizeof(int) * N); // Allocate memory on the device\n    if(data == NULL){\n        err = 1;\n    }\n    \n    acc_free(data); // Free memory on the device\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_default_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n\n    int async_val = acc_get_default_async();\n\n    if (async_val != acc_async_noval) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_get_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    int device_num = acc_get_device_num(acc_device_not_host);\n\n    if (device_num < 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_type.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    acc_device_t device_type = acc_get_device_type();\n\n    if (device_type == acc_device_none) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_get_num_devices.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    int num_devices = acc_get_num_devices(acc_device_default);\n\n    if (num_devices <= 0) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_get_property.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n\n    // Call acc_get_property to get the size of device memory\n    size_t memory_size = acc_get_property(0, acc_device_nvidia, acc_property_memory);\n    if (memory_size == 0){\n        err = 1;\n    }\n\n    // Call acc_get_property_string to get the device name\n    const char* device_name = acc_get_property_string(0, acc_device_nvidia, acc_property_name);\n    if (device_name == NULL){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_hostptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Testing code here\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_init.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init(acc_device_host)\n\n    // Test code goes here...\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *data;\n    size_t bytes = sizeof(int) * SIZE;\n    data = (int *)malloc(bytes);\n    if(data == NULL){\n        fprintf(stderr, \"Error allocating memory\\n\");\n        exit(1);\n    }\n\n    #pragma acc enter data copyin(data[0:SIZE])\n    #pragma acc parallel loop\n    for(int i = 0; i < SIZE; i++){\n        data[i] = i;\n    }\n    #pragma acc exit data delete(data[0:SIZE])\n\n    if(!acc_is_present(data, bytes)){\n        err = 1;\n    }\n\n    free(data);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_malloc.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime, data, executable-data, construct-independent, V: 2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    size_t bytes = /* calculate the number of bytes for allocation */ ;\n\n    // Allocate memory on the device using acc_malloc\n    d_void* ptr = acc_malloc(bytes);\n\n    // Check if the allocation was successful\n    if (ptr == NULL) {\n        err = 1;\n    }\n\n    // Free the allocated memory on the device\n    acc_free(ptr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_map_data.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    \n    // Initialize host data\n    int *host_data = (int*) malloc(sizeof(int) * N);\n    for (int i = 0; i < N; i++) {\n        host_data[i] = rand() % 100;\n    }\n    \n    // Allocate device memory\n    int *device_data;\n    acc_mem_alloc(&device_data, sizeof(int) * N);\n    \n    // Map host data to device memory\n    acc_map_data(host_data, device_data, sizeof(int) * N);\n    \n    // Access device data and check correctness\n    for (int i = 0; i < N; i++) {\n        if (device_data[i] != host_data[i]) {\n            err = 1;\n            break;\n        }\n    }\n    \n    // Unmap data to release device memory\n    acc_unmap_data(host_data);\n    acc_mem_free(device_data);\n    \n    free(host_data);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_d2d.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    int *A, *B, *C;\n    int nbytes = N * sizeof(int);\n\n    A = (int*)malloc(nbytes);\n    B = (int*)malloc(nbytes);\n    C = (int*)malloc(nbytes);\n\n    srand(SEED);\n\n    for (int i = 0; i < N; i++){\n        A[i] = rand() % 100;\n        B[i] = rand() % 100;\n    }\n\n    #pragma acc data copyin(A[0:N]) copyout(C[0:N])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < N; i++){\n            C[i] = A[i] + B[i];\n        }\n    }\n\n    for (int i = 0; i < N; i++){\n        if (C[i] != A[i] + B[i]){\n            err = 1;\n            break;\n        }\n    }\n\n    free(A);\n    free(B);\n    free(C);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_memcpy_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int* host_data = (int*)malloc(N * sizeof(int));\n    int* device_data1 = (int*)acc_malloc(N * sizeof(int));\n    int* device_data2 = (int*)acc_malloc(N * sizeof(int));\n\n    // Initialize host_data\n    for (int i = 0; i < N; i++) {\n        host_data[i] = rand();\n    }\n\n    // Copy host_data to device_data1\n    acc_memcpy_device(device_data1, host_data, N * sizeof(int));\n\n    // Copy device_data1 to device_data2\n    acc_memcpy_device(device_data2, device_data1, N * sizeof(int));\n\n    // Verify the data on device_data2\n    for (int i = 0; i < N; i++) {\n        if (device_data2[i] != host_data[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free memory\n    free(host_data);\n    acc_free(device_data1);\n    acc_free(device_data2);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_from_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    int* host_array = (int*)malloc(10 * sizeof(int));\n    int* device_array = acc_malloc(10 * sizeof(int));\n\n    for (int i = 0; i < 10; i++) {\n        host_array[i] = i;\n        device_array[i] = 0;\n    }\n\n    acc_memcpy_from_device(host_array, device_array, 10 * sizeof(int));\n\n    for (int i = 0; i < 10; i++) {\n        if (host_array[i] != i) {\n            err = 1;\n            break;\n        }\n    }\n\n    acc_free(device_array);\n    free(host_array);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_memcpy_to_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    // Initialize data\n    int size = 100;\n    int *data_host = (int *)malloc(size * sizeof(int));\n    int *data_dev = (int *)acc_malloc(size * sizeof(int));\n\n    // Copy data from host to device\n    acc_memcpy_to_device(data_dev, data_host, size * sizeof(int));\n        \n    // Validate the data\n    for (int i = 0; i < size; i++) {\n        if (data_dev[i] != data_host[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free memory\n    acc_free(data_dev);\n    free(data_host);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_on_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n\n    if(acc_on_device(acc_device_host)){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_set_default_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // test acc_set_default_async here\n    acc_set_default_async(1); // set async_arg value\n\n    // perform operations with async clauses\n    #pragma acc parallel async // will use async_arg as the async queue\n    {\n        // compute asynchronously\n    }\n\n    #pragma acc parallel async(2) // will not use async_arg as the async queue\n    {\n        // compute asynchronously\n    }\n\n    // check if the operations were performed correctly\n    if(/* condition to check the correctness of the operations */){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc set device_num(2)\n    {\n        int device_num = acc_get_device_num(acc_device_default);\n        if (device_num != 2) {\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode |= (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_set_device_type.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n\n    acc_init(acc_device_default); // Initialize OpenACC runtime\n\n    acc_device_t device_type = acc_get_device_type(); // Get the current device type\n    if (device_type != acc_device_default) {\n        err = 1;\n    }\n\n    acc_set_device_type(acc_device_nvidia); // Set the device type to NVIDIA GPU\n    device_type = acc_get_device_type(); // Get the updated device type\n    if (device_type != acc_device_nvidia) {\n        err = 1;\n    }\n\n    acc_set_device_type(acc_device_host); // Set the device type to host\n    device_type = acc_get_device_type();\n    if (device_type != acc_device_host) {\n        err = 1;\n    }\n\n    acc_shutdown(acc_device_default); // Shutdown OpenACC runtime\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_shutdown.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    // Perform the test case here\n    // ...\n    // Set err to 1 if the test case fails\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_unmap_data.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Allocate and initialize host data\n    int *host_data = (int *)malloc(N * sizeof(int));\n    for (int i = 0; i < N; i++) {\n        host_data[i] = rand() % 100;\n    }\n\n    // Allocate and map device data\n    int *device_data;\n    #pragma acc enter data create(device_data[0:N])\n\n    // Map host data to device\n    #pragma acc update device(device_data[0:N])\n\n    // Unmap device data\n    #pragma acc unmap data(device_data)\n\n    // Verify the device data is unmapped\n    #pragma acc update self(device_data[0:N])\n    for (int i = 0; i < N; i++) {\n        if (device_data[i] != host_data[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free host and device data\n    free(host_data);\n    #pragma acc exit data delete(device_data)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc update device(&err, sizeof(int))\n    if(err != 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int size = 100;\n    int *A = (int*)malloc(size * sizeof(int));\n    int *B = (int*)malloc(size * sizeof(int));\n\n    // initialize A and B with random values\n    for(int i = 0; i < size; i++){\n        A[i] = rand() % size;\n        B[i] = rand() % size;\n    }\n\n    // update B array in device memory with values from A array in local memory\n    acc_update_device(B, size * sizeof(int));\n\n    // check if B array in device memory has been correctly updated\n    for(int i = 0; i < size; i++){\n        if(B[i] != A[i]){\n            err = 1;\n            break;\n        }\n    }\n\n    free(A);\n    free(B);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Placeholder for testing acc_wait\n    int async_queue = acc_async_test();\n    acc_async_present(async_queue);\n\n    // Testing acc_wait\n    acc_wait(async_queue);\n\n    // Check if acc_async_test completed successfully\n    if(acc_async_test_check(async_queue)){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_any.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int count = 5; // Number of async arguments\n    int wait_arg[count]; // Array of async arguments\n\n    // Initialize wait_arg with async arguments\n    for (int i = 0; i < count; i++) {\n        wait_arg[i] = acc_async_sync;\n    }\n\n    // Call acc_wait_any\n    int result = acc_wait_any(count, wait_arg);\n\n    // Check if result is valid (not equal to -1)\n    if (result == -1) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int async_arg = acc_async_test_init();\n    int wait_arg = acc_async_test_init();\n\n    acc_wait_async(wait_arg, async_arg);\n\n    if(acc_async_test_check_sync(async_arg) != 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "async_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    // Add your OpenACC code here\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "atomic_construct.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    int x = 0;\n    \n#pragma acc parallel loop\n    for (int i = 0; i < 100; i++) {\n#pragma acc atomic\n        x++;\n    }\n    \n    if (x != 100) {\n        err = 1;\n    }\n    \n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int i = 0; i < NUM_TEST_CALLS; ++i) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "attachment_counter.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    // Add OpenACC code to test the attachment counter feature here\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "cache_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc parallel loop cache(a[0:N])\n    for (int i = 0; i < N; i++) {\n        a[i] += 1;\n    }\n\n    for (int i = 0; i < N; i++) {\n        if (a[i] != 1) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "combined_constucts.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // TODO: Write your OpenACC combined construct code here\n    // ...\n\n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_async_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc data async // Use async clause\n    {\n        // Perform computations asynchronously\n        #pragma acc parallel loop\n        for (int i = 0; i < N; ++i) {\n            A[i] = B[i] + C[i];\n        }\n    }\n\n    #pragma acc wait // Wait for all async computations to complete\n\n    // Verify the results\n    for (int i = 0; i < N; ++i) {\n        if (A[i] != B[i] + C[i]) {\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "compute_construct_default_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime, data, executable-data, construct-independent, V: 2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    // Add the compute construct with default clause\n    #pragma acc parallel loop default(present)\n    for (int i = 0; i < N; i++) {\n        if (a[i] != b[i]) {\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "compute_construct_firstprivate_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc parallel num_gangs(NUM_GANGS) firstprivate(x) // Update x with the appropriate variable\n    {\n        int x = 0;\n        // do some calculations\n        // use x\n        if(x != 0){\n            #pragma acc atomic update\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_if_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    int condition = rand() % 2;  // Randomly set the condition to true or false\n\n    #pragma acc compute if(condition)     // Use the if clause for the compute construct\n    {\n        // Code block to be executed on the current device (if condition is true)\n        // This block can have any OpenACC parallel or data constructs\n        // ...\n\n        if (condition) {   // This is not required, just for validation\n            // Region executed on the current device\n        } else {\n            // Region executed on the local thread\n            err = 1;    // Mark the test as failed if condition is false\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_num_gangs_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc parallel num_gangs(3)\n    {\n        if (acc_get_num_gangs() != 3){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_num_workersclause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    int num_workers;\n    \n    srand(SEED);\n    \n    #pragma acc parallel num_workers(2511)\n    {\n        // Code that will be executed by the parallel region\n        // ...\n        // ...\n        // ...\n    }\n    \n    // Check if the number of workers used by the parallel region is 2511\n    if (num_workers != 2511){\n        err = 1;\n    }\n    \n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_private_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    int private_var = 0;\n    #pragma acc parallel private(private_var)\n    {\n        private_var = 1;\n    }\n\n    if (private_var != 0) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n\n    if (failed != 0) {\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "compute_construct_reduction_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Add your test code here\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_self_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc parallel loop self\n    for (int i = 0; i < N; i++) {\n        if (/* Add your condition here */) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_vector_length_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc parallel vector_length(2512)\n    {\n        // Code that uses vector length\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_wait_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc data copyin(a[0:N])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int i = 0; i < N; ++i) {\n                a[i] = rand() % 100;\n            }\n        }\n\n        #pragma acc compute wait\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int i = 0; i < N; ++i) {\n                    a[i] *= a[i];\n                }\n            }\n        }\n\n        #pragma acc compute wait\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int i = 0; i < N; ++i) {\n                    a[i] += 1;\n                }\n            }\n        }\n\n        #pragma acc compute wait\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int i = 0; i < N; ++i) {\n                    a[i] -= 1;\n                }\n            }\n        }\n    }\n\n    // Verify the result\n    for (int i = 0; i < N; ++i) {\n        int expected = ((a[i] * a[i]) + 1) - 1;\n        if (a[i] != expected) {\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_construct.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    int N = 100;\n    int *data;\n    \n    data = (int *)malloc(N * sizeof(int));\n    if (data == NULL) {\n        printf(\"Memory allocation failed.\\n\");\n        err = 1;\n    }\n    \n    // Initialize data\n    for (int i = 0; i < N; i++) {\n        data[i] = i;\n    }\n    \n    #pragma acc data create(data[0:N])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < N; i++) {\n            data[i] *= 2;\n        }\n    }\n    \n    // Verify result\n    for (int i = 0; i < N; i++) {\n        if (data[i] != 2*i) {\n            printf(\"Data validation failed.\\n\");\n            err = 1;\n            break;\n        }\n    }\n    \n    free(data);\n    \n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_construct_attach_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *data = (int*)malloc(sizeof(int) * N);\n\n    // Attach data to the device\n    #pragma acc enter data copyin(data[0:N]) attach(data)\n\n    // Perform operations on the device\n    #pragma acc parallel loop present(data)\n    for(int i = 0; i < N; i++){\n        data[i] = i;\n    }\n\n    // Detach data from the device\n    #pragma acc exit data delete(data[0:N]) detach(data)\n\n    // Verify the results\n    for(int i = 0; i < N; i++){\n        if(data[i] != i){\n            err = 1;\n            break;\n        }\n    }\n\n    free(data);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_construct_copy_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *arr = (int*) malloc(sizeof(int) * N);\n    int *copy_arr = (int*) malloc(sizeof(int) * N);\n\n    #pragma acc data copy(arr[0:N], copy_arr[0:N])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < N; i++) {\n            arr[i] = rand() % 100;\n            copy_arr[i] = arr[i];\n        }\n    }\n\n    for (int i = 0; i < N; i++) {\n        if (arr[i] != copy_arr[i]) {\n            err = 1;\n        }\n    }\n\n    free(arr);\n    free(copy_arr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_copyin_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime, data, executable-data, construct-independent, V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc enter data copyin(ptr)\n    {\n        if (ptr) {\n            err = 1;\n        }\n    }\n    #pragma acc exit data delete(ptr)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_construct_copyout_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Place your test code here\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_construct_create_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    int *ptr = NULL;\n    int var = 0;\n\n    // Create clause with zero modifier\n    #pragma acc data create(var) zero(ptr)\n    {\n        // Validate create action with zero modifierr\n        #pragma acc enter data create(var) zero(ptr)\n        if (var != 0){\n            err = 1;\n        }\n        if (ptr != NULL){\n            err = 1;\n        }\n\n        // Modify variables in the data region\n        var = 10;\n        ptr = (int*) malloc(sizeof(int));\n        *ptr = 20;\n\n        // Validate attach action\n        #pragma acc enter data copyin(ptr) create(var)\n        if (var != 10){\n            err = 1;\n        }\n        if (*ptr != 20){\n            err = 1;\n        }\n\n        // Modify variables after exiting the data region\n        var = 100;\n        *ptr = 200;\n\n        // Validate detach action\n        #pragma acc exit data detach(var) delete(ptr)\n        if (var != 100){\n            err = 1;\n        }\n        if (*ptr != 200){\n            err = 1;\n        }\n\n        // Validate delete action\n        if (ptr != NULL){\n            err = 1;\n        }\n        free(ptr);\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed != 0){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_construct_delete_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    int *ptr = (int *)malloc(sizeof(int));\n\n    #pragma acc enter data copyin(ptr)\n\n    // Perform some operations\n\n    #pragma acc exit data delete(ptr)\n\n    if (ptr != NULL){\n        err = 1;\n    }\n\n    free(ptr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_detach_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    int *a = (int *)malloc(10 * sizeof(int));\n    \n    // Generate data\n    for (int i=0; i<10; i++) {\n        a[i] = i;\n    }\n    \n    int *b = (int *)malloc(10 * sizeof(int));\n    \n    #pragma acc data copyin(a[0:10]) copyout(b[0:10])\n    {\n        #pragma acc parallel loop detach\n        for (int i=0; i<10; i++) {\n            b[i] = a[i] * 2;\n        }\n    }\n\n    // Verify the result\n    for (int i=0; i<10; i++) {\n        if (b[i] != (a[i] * 2)) {\n            err = 1;\n        }\n    }\n    \n    free(a);\n    free(b);\n    \n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed != 0){\n        failcode += 1 << 0;\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_construct_no_create_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc data no_create(a)\n    {\n        int* a = (int*)malloc(sizeof(int)*N);\n        if(a == NULL){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_deviceptr_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    // Declare host and device pointers\n    int* host_ptr;\n    int* device_ptr;\n\n    // Allocate memory for host pointer\n    host_ptr = (int*)malloc(sizeof(int) * SIZE);\n\n    // Initialize data on host\n    for (int i = 0; i < SIZE; i++) {\n        host_ptr[i] = rand() % 100;\n    }\n\n    // Allocate memory for device pointer\n    #pragma acc enter data copyin(host_ptr[0:SIZE]) create(device_ptr[0:SIZE])\n\n    // Assign device pointer\n    device_ptr = host_ptr;\n\n    // Perform computation on device\n    #pragma acc parallel loop deviceptr(device_ptr[0:SIZE])\n    for (int i = 0; i < SIZE; i++) {\n        device_ptr[i] += 1;\n    }\n\n    // Update data on host\n    #pragma acc update self(host_ptr[0:SIZE])\n\n    // Verify results\n    for (int i = 0; i < SIZE; i++) {\n        if (host_ptr[i] != (device_ptr[i] - 1)) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free memory\n    #pragma acc exit data delete(host_ptr[0:SIZE]) delete(device_ptr[0:SIZE])\n    free(host_ptr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_present_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int data[10];\n\n    // Allocating and initializing data on the device using the present clause\n    #pragma acc data present(data)\n    {\n        #pragma acc enter data copyin(data)\n\n        // Use the data on the device\n        #pragma acc parallel loop\n        for (int i = 0; i < 10; i++) {\n            data[i] = i;\n        }\n    } // Exit data region, automatic detach and delete actions are performed\n\n    // Verify if the data was correctly modified on the device\n    for (int i = 0; i < 10; i++) {\n        if (data[i] != i) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "declare_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    // Add your code to test the declare directive here\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n\n    if (failed != 0) {\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "declare_directive_create_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Declare variables\n    int *a = (int*) malloc(N * sizeof(int));\n    int *b = (int*) malloc(N * sizeof(int));\n    int *c = (int*) malloc(N * sizeof(int));\n\n    // Initialize arrays\n    for (int i = 0; i < N; i++){\n        a[i] = rand() % 100;\n        b[i] = rand() % 100;\n    }\n\n    // Create data region\n    #pragma acc data create(a[0:N], b[0:N], c[0:N])\n    {\n        // Perform computation\n        #pragma acc parallel loop present(a[0:N], b[0:N], c[0:N])\n        for (int i = 0; i < N; i++){\n            c[i] = a[i] + b[i];\n        }\n    }\n\n    // Verify results\n    for (int i = 0; i < N; i++){\n        if (c[i] != a[i] + b[i]){\n            err = 1;\n        }\n    }\n\n    // Cleanup\n    free(a);\n    free(b);\n    free(c);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_directive_device_resident_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc declare device_resident(x)\n    int x = 10;\n\n    if (x != 10){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_directive_link_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Declare the global variables with link clause\n    #pragma acc declare link(a, b, c)\n\n    // Use the global variables in accelerator routines\n    #pragma acc parallel\n    {\n        a += 1;\n        b += 2;\n        c += 3;\n    }\n\n    // Verify the results\n    if (a != NUM_TEST_CALLS || b != NUM_TEST_CALLS * 2 || c != NUM_TEST_CALLS * 3){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    int *data = (int *)malloc(10 * sizeof(int));\n    if (data == NULL) {\n        return 1;\n    }\n\n    // Initialize data on the host\n    for (int i = 0; i < 10; ++i) {\n        data[i] = i;\n    }\n\n    // Create a device copy of data using the enter data directive\n    #pragma acc enter data copyin(data[0:10])\n\n    // TODO: Add code to verify correctness of the enter data directive\n\n    // Delete the device copy of data using the exit data directive\n    #pragma acc exit data delete(data)\n\n    free(data);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "exit_data_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    \n    int *host_ptr, *device_ptr;\n    int size = 10;\n\n    host_ptr = (int*)malloc(size * sizeof(int));\n    device_ptr = (int*)malloc(size * sizeof(int));\n\n    // Initialize host data\n    for(int i = 0; i < size; i++)\n        host_ptr[i] = rand() % 100;\n\n    #pragma acc enter data create(device_ptr[0:size]) // Create device data\n    \n    #pragma acc data copyin(host_ptr[0:size]) // Copy host data to device\n    {\n        #pragma acc parallel loop\n        for(int i = 0; i < size; i++)\n            device_ptr[i] = host_ptr[i];\n\n        #pragma acc exit data delete(device_ptr[0:size]) // Delete device data\n    }\n\n    // Check if device data is cleared\n    for(int i = 0; i < size; i++){\n        if(device_ptr[i] != 0){\n            err = 1;\n            break;\n        }\n    }\n\n    free(host_ptr);\n    free(device_ptr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    \n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n\n    if(failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "host_data_construct_if_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    int flag = 0;\n    #pragma acc enter data copyin(flag)\n\n    // Use the if clause with a false condition\n    #pragma acc parallel if(flag == 1)\n    {\n        err = 1;\n    }\n\n    #pragma acc exit data delete(flag)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "host_data_construct_if_present_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    int host_var = 0;\n    int* device_ptr = NULL;\n    srand(SEED);\n\n    // Allocating memory on the device\n    #pragma acc enter data create(device_ptr[:1])\n    \n    // If the device supports the 'host_data' construct, the 'if_present' clause will ensure that the device_ptr is present in the current device memory.\n    // If the device does not support the 'host_data' construct, the 'if_present' clause will have no effect.\n    // The 'host_data' construct transfers the host variable 'host_var' to the device memory.\n    #pragma acc host_data use_device(device_ptr[:1]) if_present(host_var) // Modify this line to test the if_present clause\n    {\n        // Using host_var on the host\n        host_var = rand() % 100;\n        \n        // Accessing device_ptr on the device\n        device_ptr[0] = host_var;\n    }\n\n    // Freeing memory on the device\n    #pragma acc exit data delete(device_ptr[:1])\n\n    // Verifying the result\n    if (device_ptr[0] != host_var){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "host_data_construct_use_device_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    int *host_ptr = (int *) malloc(sizeof(int));\n\n    *host_ptr = 10;\n\n    #pragma acc data copyin(host_ptr) \n    #pragma acc host_data use_device(host_ptr)\n    {\n        int *device_ptr = host_ptr;\n\n        #pragma acc parallel loop\n        for (int i = 0; i < 1; i++) {\n            device_ptr[i] = device_ptr[i] * 2;\n        }\n    }\n\n    if (*host_ptr != 20) {\n        err = 1;\n    }\n\n    free(host_ptr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "id": 1,
            "init_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init\n\n    // Perform computation on the device\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "kernels_construct.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc kernels\n    {\n        // Code to be executed in the kernels construct\n        // ...\n\n        // Check if the kernels construct is working correctly\n        if (...) {\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n\n    if (failed != 0) {\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "loop_construct_auto_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc kernels loop auto\n    for (int i = 0; i < 100; i++) {\n        int k = i + 1;\n        #pragma acc loop seq\n        for (int j = 0; j < 10; j++) {\n            k += j;\n        }\n        if (k != i + 56) {\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_collapse_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc parallel loop collapse(2)\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < 10; j++) {\n            // Perform computation\n            int val = i + j;\n            // Check if computation is correct\n            if (val != i + j) {\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "loop_construct_device_type_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc parallel loop device_type(nvidia)\n    for (int i = 0; i < SIZE; i++){\n        arr[i] = i;\n    }\n\n    #pragma acc parallel loop device_type(radeon)\n    for (int i = 0; i < SIZE; i++){\n        arr[i] = i;\n    }\n\n    #pragma acc parallel loop device_type(any)\n    for (int i = 0; i < SIZE; i++){\n        arr[i] = i;\n    }\n\n    // Check if all elements of the array have been updated\n    for (int i = 0; i < SIZE; i++){\n        if (arr[i] != i){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_gang_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Check if the gang clause is working correctly\n    #pragma acc parallel loop gang\n    for (int i = 0; i < SIZE; i++) {\n        if (array[i] != i) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_independent_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc data\n    {\n        int sum = 0;\n        #pragma acc parallel loop independent\n        for (int i = 0; i < 100; i++){\n            sum += i; // Data independent operation\n        }\n\n        if (sum != 4950){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_private_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Perform computation using the OpenACC loop construct with private clause\n    #pragma acc parallel loop private(err)\n    for (int i = 0; i < 100; i++){\n        int privateVar = 0;\n\n        // Modify the private variable within the loop body\n        privateVar = privateVar + i;\n\n        // Check if the private variable is correctly updated\n        if (privateVar != i){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "loop_construct_reduction_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int x = 0;\n\n    #pragma acc parallel copy(x)\n    {\n        // gang-shared x undefined\n        #pragma acc loop gang reduction(+:x)\n        for (int i = 0; i < I; ++i) {\n            x += 1; // vector-private x modified\n        }// worker-private x updated for vector reduction\n    }// gang-shared x updated for gang reduction\n    // x = I\n\n    if (x != I) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "loop_construct_seq_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    int A[10];\n    int B[10];\n\n    // Initialize arrays A and B\n    for (int i = 0; i < 10; i++) {\n        A[i] = i;\n        B[i] = 0;\n    }\n\n    // Compute B = 2 * A using OpenACC loop with seq clause\n    #pragma acc parallel loop seq\n    for (int i = 0; i < 10; i++) {\n        B[i] = 2 * A[i];\n    }\n\n    // Verify the result\n    for (int i = 0; i < 10; i++) {\n        if (B[i] != 2 * A[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode |= (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "loop_construct_tile_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc parallel loop tile(16)\n    for (int i = 0; i < SIZE; i++){\n        if (data[i] != 42){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_vector_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc parallel loop vector\n    for (int i = 0; i < N; i++){\n        if (array[i] % 2 != 0){\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_worker_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    int a[NUM_ITERATIONS];\n    int b[NUM_ITERATIONS];\n    int c[NUM_ITERATIONS];\n\n    srand(SEED);\n\n    for (int i = 0; i < NUM_ITERATIONS; i++){\n        a[i] = rand() % 10;\n        b[i] = rand() % 10;\n    }\n\n    #pragma acc data copyin(a, b) copyout(c)\n    #pragma acc parallel loop num_workers(NUM_WORKERS) worker\n    for (int i = 0; i < NUM_ITERATIONS; i++){\n        c[i] = a[i] + b[i];\n    }\n\n    for (int i = 0; i < NUM_ITERATIONS; i++){\n        if (c[i] != (a[i] + b[i])){\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    int failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "parallel_construct.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int i;\n    int sum = 0;\n\n    #pragma acc parallel\n    {\n        #pragma acc loop reduction(+:sum)\n        for (i = 0; i < 100; i++) {\n            sum += i;\n        }\n    }\n\n    int expected_sum = (99 * 100) / 2;\n    if (sum != expected_sum) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "routine_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Add your test code here\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "serial_construct.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc serial\n    {\n        if(){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc set device_num(0)\n    #pragma acc set default_async(acc_async_sync)\n    #pragma acc set device_type(nvidia)\n    #pragma acc set if(0)\n\n    // Check if the set directives have been applied correctly\n    if (acc_get_device_num() != 0) {\n        err = 1;\n    }\n    if (acc_get_default_async() != acc_async_sync) {\n        err = 1;\n    }\n    if (acc_get_device_type() != acc_device_nvidia) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Add code to test shutdown directive here\n    // ...\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    // Query the number of devices\n    int numDevices = acc_get_num_devices(acc_device_nvidia);\n\n    // Iterate over all available devices\n    for (int i = 0; i < numDevices; i++) {\n        // Get the device type and number\n        acc_device_t devType;\n        int devNum;\n        acc_get_device_type(&devType, &devNum, i);\n\n        // Check if the device type is NVIDIA\n        if (devType == acc_device_nvidia) {\n            // Shutdown the device\n            #pragma acc shutdown device_type(acc_device_nvidia) device_num(i)\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "update_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc update self()\n    \n    if(){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "variable_implicit_data_attributes.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    int sum = 0;\n    int arr[10];\n\n    // Implicitly determined data attributes\n    #pragma acc parallel loop reduction(+:sum)\n    for(int i=0; i<10; i++){\n        sum += arr[i];\n    }\n\n    // Check if the data attributes are correctly determined\n    // sum should be private to the parallel loop construct\n    // arr should be copied to the GPU\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "variable_predetermined_data_attributes.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc parallel loop private(x)\n    for(int x = 0; x < 100; ++x) {\n        // Perform computation\n        int y = x * x;\n        if(y % 2 == 0) {\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if(failed != 0) {\n        failcode |= (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "wait_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    // Add code to test wait clause implementation\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "wait_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc parallel num_gangs(1) wait\n\n    if (acc_get_device_type() != acc_device_none){\n        #pragma acc atomic\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            }
        }
    ]
}