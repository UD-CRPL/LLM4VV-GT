{
    "configs": [
        {
            "CC": "nvc",
            "CCFlags": [
                "-I",
                "~/Nvidia/OpenACCV-V/",
                "-acc=gpu",
                "-Minfo=all"
            ],
            "CC_ACC_Version": "2.6",
            "CPP": "nvc++",
            "CPPFlags": [
                "-I",
                "~/Nvidia/OpenACCV-V/",
                "-acc=gpu",
                "-Minfo=all"
            ],
            "CPP_ACC_Version": "2.6",
            "FC": "nvfortran",
            "FCFlags": [
                "-I",
                "~/Nvidia/OpenACCV-V/",
                "-acc=gpu",
                "-Minfo=all"
            ],
            "FC_ACC_Version": "2.6",
            "PostCompileCommands": [],
            "PostRunCommands": [],
            "PreCompileCommands": [],
            "PreRunCommands": [],
            "build_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/build",
            "config_id": -1,
            "config_name": "init_config.txt",
            "env": null,
            "exclude_tags": [],
            "exclude_tests": [
                "acc_testsuite.Fh",
                "acc_testsuite.h",
                "acc_testsuite_declare.h"
            ],
            "export_format": "json",
            "fast": false,
            "id": 1,
            "include_by_default": true,
            "include_tags": [],
            "include_tests": [],
            "keep_build_dir": false,
            "keep_mutated_tests": false,
            "keep_partial_results": false,
            "keep_policy": "on-error",
            "mutated_test_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/build/mutated_tests",
            "mutators": [],
            "partial": false,
            "partial_results_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/build/partial_results",
            "runAll": false,
            "runtime_prefix": "",
            "seed": null,
            "system_name": null,
            "tag_evaluation": null,
            "test_dir": "/usa/jarmusch/Nvidia/OpenACCV-V/Tests",
            "timeout": 10
        }
    ],
    "runs": {
        "acc_copyin.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_copyin.c/acc_copyin.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "test1:\n     11, Generating copyin(b,a[:]) [if not already present]\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36506660099257715
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36530022701481357,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_detach.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_detach.c/acc_detach.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 10: error: identifier \"N\" is undefined\n          int a[N];\n                ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.2144677589822095
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_detach.c/acc_detach.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_detach.c\", line 42: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31517970000277273
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00789116500527598,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_default_async.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_default_async.c/acc_get_default_async.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 8: error: identifier \"N\" is undefined\n      for (int i = 0; i < N; ++i){\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 9: error: identifier \"A\" is undefined\n          A[i] = B[i] + C[i];\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 9: error: identifier \"B\" is undefined\n          A[i] = B[i] + C[i];\n                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 9: error: identifier \"C\" is undefined\n          A[i] = B[i] + C[i];\n                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 12: error: identifier \"A\" is undefined\n      #pragma acc update host(A) async(1)\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 14: error: identifier \"N\" is undefined\n      for (int i = 0; i < N; ++i){\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 15: error: identifier \"A\" is undefined\n          if (A[i] != B[i] + C[i]){\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 15: error: identifier \"B\" is undefined\n          if (A[i] != B[i] + C[i]){\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 15: error: identifier \"C\" is undefined\n          if (A[i] != B[i] + C[i]){\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 29: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n11 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16462133600725792
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_default_async.c/acc_get_default_async.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_default_async.c\", line 26: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21448277900344692
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007765173999359831,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_num.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_device_num.c/acc_get_device_num.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\", line 7: warning: function \"acc_get_device_num\" declared implicitly [implicit_func_decl]\n      if(acc_get_device_num(acc_device_nvidia) != acc_get_device_num(acc_device_nvidia)){\n         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\", line 7: error: identifier \"acc_device_nvidia\" is undefined\n      if(acc_get_device_num(acc_device_nvidia) != acc_get_device_num(acc_device_nvidia)){\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\", line 20: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1142813210026361
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_device_num.c/acc_get_device_num.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_device_num.c\", line 17: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2645425979862921
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007903699995949864,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_num_devices.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_num_devices.c/acc_get_num_devices.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\", line 7: warning: function \"acc_get_num_devices\" declared implicitly [implicit_func_decl]\n      int num_devices = acc_get_num_devices(acc_device_default);\n                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\", line 7: error: identifier \"acc_device_default\" is undefined\n      int num_devices = acc_get_num_devices(acc_device_default);\n                                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\", line 21: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11463698901934549
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_get_num_devices.c/acc_get_num_devices.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_get_num_devices.c\", line 18: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2647949009842705
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007945169025333598,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_hostptr.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_hostptr.c/acc_hostptr.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\", line 18: error: invalid text in pragma\n          #pragma acc hostptr(devData)\n                             ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1643671010097023
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_hostptr.c/acc_hostptr.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_hostptr.c\", line 45: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3149375779903494
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00791052301065065,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_init.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_init.c/acc_init.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 7: warning: variable \"a\" was set but never used [set_but_not_used]\n      int a[10];\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 24: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11401172500336543
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_init.c/acc_init.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_init.c\", line 21: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26468543100054376
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00775278199580498,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_malloc.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_malloc.c/acc_malloc.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c\", line 9: error: identifier \"SIZE\" is undefined\n      int *data = (int*)acc_malloc(sizeof(int) * SIZE);\n                                                 ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16427994400146417
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_malloc.c/acc_malloc.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_malloc.c\", line 25: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2643788860004861
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007767570001306012,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_map_data.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_map_data.c/acc_map_data.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 18: error: invalid text in pragma\n      #pragma acc data copy(A[0:n]) map(tofrom: A_copy[0:n])\n                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 18: error: extra text after expected end of preprocessing directive\n      #pragma acc data copy(A[0:n]) map(tofrom: A_copy[0:n])\n                                       ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16435809299582615
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_map_data.c/acc_map_data.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_map_data.c\", line 43: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2649344870005734
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007805472007021308,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_to_device.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_to_device.c/acc_memcpy_to_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_to_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_to_device.c\", line 35: error: branching into or out of a parallel region is not allowed\n                  break;\n                  ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_to_device.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16434009998920374
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_memcpy_to_device.c/acc_memcpy_to_device.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_to_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_memcpy_to_device.c\", line 49: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3148866609844845
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007771117001539096,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_on_device.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_on_device.c/acc_on_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_on_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_on_device.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_on_device.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_on_device.c\", line 20: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_on_device.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16419378999853507
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_on_device.c/acc_on_device.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_on_device.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_on_device.c\", line 17: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21449063197360374
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007842212013201788,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_num.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_device_num.c/acc_set_device_num.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 9: error: too many arguments in function call\n      acc_get_num_devices(acc_device_default, &num_devices);\n                                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 11: error: identifier \"NUM_DEVICES\" is undefined\n      if(num_devices != NUM_DEVICES){\n                        ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16481046698754653
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_device_num.c/acc_set_device_num.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_num.c\", line 21: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31496816701837815
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00770577197545208,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_type.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_device_type.c/acc_set_device_type.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 9: error: invalid text in pragma\n      #pragma acc set device(type(nvidia))\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 9: error: invalid text in pragma\n      #pragma acc set device(type(nvidia))\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 9: error: extra text after expected end of preprocessing directive\n      #pragma acc set device(type(nvidia))\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 13: error: identifier \"LENGTH\" is undefined\n      for (int i = 0; i < LENGTH; ++i) {\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 14: error: identifier \"a\" is undefined\n          if (a[i] > b[i]) {\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 14: error: identifier \"b\" is undefined\n          if (a[i] > b[i]) {\n                     ^\n\n6 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16452053299872205
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_set_device_type.c/acc_set_device_type.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_set_device_type.c\", line 25: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36462544900132343
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007729256991297007,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_unmap_data.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 9: error: identifier \"A\" is undefined\n      #pragma acc data copyout(A[0:N]) create(B[0:N])\n                               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 9: error: identifier \"N\" is undefined\n      #pragma acc data copyout(A[0:N]) create(B[0:N])\n                                   ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 9: error: identifier \"B\" is undefined\n      #pragma acc data copyout(A[0:N]) create(B[0:N])\n                                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 13: error: identifier \"A\" is undefined\n              A[i] = B[i] + 1;\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 13: error: identifier \"B\" is undefined\n              A[i] = B[i] + 1;\n                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 17: error: invalid text in pragma\n      #pragma acc unmap(A[:N])\n                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 20: error: identifier \"A\" is undefined\n          if (A[i] != B[i] + 1) {\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 20: error: identifier \"B\" is undefined\n          if (A[i] != B[i] + 1) {\n                      ^\n\n8 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21419368500937708
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_unmap_data.c\", line 32: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26492064000922255
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007876537012634799,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_update_device.c/acc_update_device.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_update_device.c",
                    "config": 1,
                    "errors": "/usr/bin/ld: /usr/lib/x86_64-linux-gnu/crt1.o: in function `_start':\n(.text+0x1b): undefined reference to `main'\npgacclnk: child process exit status 1: /usr/bin/ld\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.31487008900148794
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait.c/acc_wait.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 11: error: identifier \"N\" is undefined\n          for (int i = 0; i < N; ++i){\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 15: error: identifier \"N\" is undefined\n          if (a != N){\n                   ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 29: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n4 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11408925399882719
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait.c/acc_wait.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait.c\", line 26: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26445684500504285
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007918549003079534,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_async.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/acc_wait_async.c/acc_wait_async.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/acc_wait_async.c",
                    "config": 1,
                    "errors": "test1:\n     17, Generating copyin(a[:n]) [if not already present]\n         Generating copyout(c[:n]) [if not already present]\n         Generating copyin(b[:n]) [if not already present]\n     22, Loop is parallelizable\n         Generating NVIDIA GPU code\n         22, #pragma acc loop gang, vector(128) /* blockIdx.x threadIdx.x */\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5153140220209025
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3646285349968821,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "async_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/async_clause.c/async_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 9: error: identifier \"N\" is undefined\n      for (int i = 0; i < N; i++) {\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 14: error: expected an expression\n      if(/*check if the code inside the loop was executed asynchronously*/){\n                                                                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 27: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n4 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21441842502099462
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/async_clause.c/async_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/async_clause.c\", line 24: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2645557140058372
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007998539978871122,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "attachment_counter.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/attachment_counter.c/attachment_counter.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/attachment_counter.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31454975801170804
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06422539800405502,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "combined_constucts.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/combined_constucts.c/combined_constucts.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 7: error: identifier \"x\" is undefined\n      #pragma acc data copyin(x)\n                              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 8: error: identifier \"sum\" is undefined\n      #pragma acc parallel loop reduction(+:sum)\n                                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 9: error: identifier \"N\" is undefined\n      for (int i = 0; i < N; ++i) {\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 10: error: identifier \"sum\" is undefined\n          sum += x[i];\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 10: error: identifier \"x\" is undefined\n          sum += x[i];\n                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 12: error: identifier \"sum\" is undefined\n      if(sum != result){\n         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 12: error: identifier \"result\" is undefined\n      if(sum != result){\n                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 25: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n9 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16411447897553444
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/combined_constucts.c/combined_constucts.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/combined_constucts.c\", line 22: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21478104699053802
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007655966997845098,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_default_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_default_clause.c/compute_construct_default_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 8: error: invalid text in pragma\n      #pragma acc compute default(none)\n                          ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16434603001107462
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_default_clause.c/compute_construct_default_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_default_clause.c\", line 24: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31490057799965143
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007901294011389837,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_firstprivate_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_firstprivate_clause.c/compute_construct_firstprivate_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_firstprivate_clause.c",
                    "config": 1,
                    "errors": "test1:\n     10, Generating implicit firstprivate(i)\n         Generating NVIDIA GPU code\n         15, #pragma acc loop seq\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5152145930042025
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3646403369784821,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_private_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_private_clause.c/compute_construct_private_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 8: error: identifier \"x\" is undefined\n      #pragma acc data pcopy(x, y)\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 8: error: identifier \"y\" is undefined\n      #pragma acc data pcopy(x, y)\n                                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 10: error: identifier \"NUM_DEVICES\" is undefined\n          int x[NUM_DEVICES], y[NUM_DEVICES];\n                ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 11: warning: function \"omp_get_thread_num\" declared implicitly [implicit_func_decl]\n          int thread_num = omp_get_thread_num();\n                           ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 13: error: invalid text in pragma\n          #pragma acc compute private(x, y)\n                              ^\n\n4 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21452284400584176
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_private_clause.c/compute_construct_private_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_private_clause.c\", line 33: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36503858800278977
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007834407006157562,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_reduction_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_reduction_clause.c/compute_construct_reduction_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 7: error: identifier \"sum\" is undefined\n      #pragma acc parallel loop reduction(+:sum)\n                                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 8: error: identifier \"N\" is undefined\n      for (int i = 0; i < N; i++){\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 9: error: identifier \"sum\" is undefined\n          sum += data[i];\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 9: error: identifier \"data\" is undefined\n          sum += data[i];\n                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 13: error: identifier \"N\" is undefined\n      for (int i = 0; i < N; i++){\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 14: error: identifier \"data\" is undefined\n          expected_sum += data[i];\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 17: error: identifier \"sum\" is undefined\n      if (sum != expected_sum){\n          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 30: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n9 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16426787100499496
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_reduction_clause.c/compute_construct_reduction_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_reduction_clause.c\", line 27: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21447680599521846
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.008109943009912968,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_self_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_self_clause.c/compute_construct_self_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c\", line 10: error: identifier \"SIZE\" is undefined\n      for (int i = 0; i < SIZE; i++) {\n                          ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16445905598811805
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_self_clause.c/compute_construct_self_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_self_clause.c\", line 21: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3147143920068629
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007653312000911683,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "compute_construct_vector_length_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_vector_length_clause.c/compute_construct_vector_length_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\", line 41: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11421809101011604
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/compute_construct_vector_length_clause.c/compute_construct_vector_length_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/compute_construct_vector_length_clause.c\", line 37: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26494680900941603
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007848484994610772,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct.c/data_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 9: error: expected an expression\n      if (/* fill in your condition here */){\n                                           ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21427679399494082
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct.c/data_construct.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct.c\", line 19: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2646242039918434
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007781626016367227,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_attach_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_attach_clause.c/data_construct_attach_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c\", line 34: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16403847298352048
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_attach_clause.c/data_construct_attach_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_attach_clause.c\", line 31: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2646654040145222
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.008256081986473873,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_copy_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copy_clause.c/data_construct_copy_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 8: warning: function \"malloc\" declared implicitly [implicit_func_decl]\n      int *a = (int *)malloc(size * sizeof(int));\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 14: warning: function \"rand\" declared implicitly [implicit_func_decl]\n          a[i] = rand() % 100;\n                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 34: warning: function \"free\" declared implicitly [implicit_func_decl]\n      free(a);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 48: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11464688900741749
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copy_clause.c/data_construct_copy_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copy_clause.c\", line 45: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26434592402074486
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007832695002434775,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_copyout_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_copyout_clause.c/data_construct_copyout_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_copyout_clause.c",
                    "config": 1,
                    "errors": "test1:\n     21, Generating copyout(b[:n]) [if not already present]\n         Generating copyin(a[:n]) [if not already present]\n         Generating implicit firstprivate(n,i)\n         Generating NVIDIA GPU code\n         23, #pragma acc loop gang, vector(96) /* blockIdx.x threadIdx.x */\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5151750349905342
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3649094900174532,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_create_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_create_clause.c/data_construct_create_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 7: warning: function \"malloc\" declared implicitly [implicit_func_decl]\n      int *a = (int *)malloc(n * sizeof(int));\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 7: error: identifier \"n\" is undefined\n      int *a = (int *)malloc(n * sizeof(int));\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 15: warning: function \"rand\" declared implicitly [implicit_func_decl]\n              a[i] = rand() % 100;\n                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 32: warning: function \"free\" declared implicitly [implicit_func_decl]\n      free(a);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 45: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11415301598026417
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_create_clause.c/data_construct_create_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_create_clause.c\", line 42: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3150327789771836
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0076970359950792044,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_delete_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_delete_clause.c/data_construct_delete_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 12: error: identifier \"a\" is undefined\n      #pragma acc exit data delete(a,b,c)\n                                   ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 12: error: identifier \"b\" is undefined\n      #pragma acc exit data delete(a,b,c)\n                                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 12: error: identifier \"c\" is undefined\n      #pragma acc exit data delete(a,b,c)\n                                       ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 15: error: identifier \"a\" is undefined\n      if(a != NULL || b != NULL || c != NULL){\n         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 15: error: identifier \"b\" is undefined\n      if(a != NULL || b != NULL || c != NULL){\n                      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 15: error: identifier \"c\" is undefined\n      if(a != NULL || b != NULL || c != NULL){\n                                   ^\n\n6 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21436790999723598
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_delete_clause.c/data_construct_delete_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_delete_clause.c\", line 25: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3146180280018598
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007942373980768025,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_construct_no_create_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_no_create_clause.c/data_construct_no_create_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c",
                    "config": 1,
                    "errors": "test1:\n     19, Generating nocreate(B[:n]) [if not already present]\n         Generating copyin(A[:n]) [if not already present]\n         Generating implicit firstprivate(n,i)\n         Generating NVIDIA GPU code\n         21, #pragma acc loop gang, vector(96) /* blockIdx.x threadIdx.x */\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5151189710013568
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failing in Thread:1\nAccelerator Fatal Error: call to cuStreamSynchronize returned error 700: Illegal address during kernel execution\n File: /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\n Function: test1:4\n Line: 19\n\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4150416290212888,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/data_construct_no_create_clause.c/data_construct_no_create_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/data_construct_no_create_clause.c\", line 43: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31546563500887714
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007751199009362608,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_directive.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive.c/declare_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive.c\", line 11: error: expected an expression\n      if () {\n          ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21443992399144918
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive.c/declare_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive.c\", line 21: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.315676876984071
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007829137990484014,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_directive_create_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_create_clause.c/declare_directive_create_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\", line 5: warning: function \"malloc\" declared implicitly [implicit_func_decl]\n      int *a = (int*)malloc(n * sizeof(int));\n                     ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\", line 5: error: identifier \"n\" is undefined\n      int *a = (int*)malloc(n * sizeof(int));\n                            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\", line 9: error: identifier \"NULL\" is undefined\n      if (a == NULL || b == NULL || sum == NULL){\n               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\", line 17: warning: function \"rand\" declared implicitly [implicit_func_decl]\n              a[i] = rand() % 100;\n                     ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\", line 27: warning: function \"free\" declared implicitly [implicit_func_decl]\n      free(a);\n      ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\", line 40: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16419748699991032
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_create_clause.c/declare_directive_create_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_create_clause.c\", line 37: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26439551799558103
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007802776992321014,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_directive_device_resident_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_device_resident_clause.c/declare_directive_device_resident_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c\", line 8: error: identifier \"V\" is undefined\n      #pragma acc declare device_resident(V)\n                                          ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16406832900247537
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_device_resident_clause.c/declare_directive_device_resident_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_device_resident_clause.c\", line 19: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26455573199200444
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0075807230023201555,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_directive_link_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_link_clause.c/declare_directive_link_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\", line 22: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11397720000240952
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/declare_directive_link_clause.c/declare_directive_link_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/declare_directive_link_clause.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21435290001682006
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007690442987950519,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "host_data_construct_if_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_if_clause.c/host_data_construct_if_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c\", line 24: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11420272098621354
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_if_clause.c/host_data_construct_if_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_clause.c\", line 21: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21451053998316638
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007834538002498448,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "host_data_construct_if_present_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_if_present_clause.c/host_data_construct_if_present_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 11: error: invalid text in pragma\n      #pragma acc exit data copyout(data) if_present(present)\n                                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 11: error: extra text after expected end of preprocessing directive\n      #pragma acc exit data copyout(data) if_present(present)\n                                                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 15: error: identifier \"N\" is undefined\n          for(int i = 0; i < N; i++){\n                             ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 16: warning: function \"rand\" declared implicitly [implicit_func_decl]\n              data[i] = rand() % 10;\n                        ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 20: error: identifier \"N\" is undefined\n          if(sum != N*9/2){\n                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 34: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n6 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1141247920168098
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/host_data_construct_if_present_clause.c/host_data_construct_if_present_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/host_data_construct_if_present_clause.c\", line 31: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21471022197511047
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007845088024623692,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_construct.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/kernels_construct.c/kernels_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/kernels_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/kernels_construct.c\", line 6: error: identifier \"N\" is undefined\n      int *a = (int *)malloc(N * sizeof(int));\n                             ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/kernels_construct.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16427671699784696
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/kernels_construct.c/kernels_construct.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/kernels_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/kernels_construct.c\", line 42: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31480366201139987
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.008078302984358743,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_auto_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_auto_clause.c/loop_construct_auto_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c\", line 41: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1142072890070267
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_auto_clause.c/loop_construct_auto_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_auto_clause.c\", line 38: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21474451798712835
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007854797004256397,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_collapse_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_collapse_clause.c/loop_construct_collapse_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c\", line 7: error: identifier \"N\" is undefined\n      int arr[N][M];\n              ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c\", line 7: error: identifier \"M\" is undefined\n      int arr[N][M];\n                 ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c\", line 6: warning: variable \"k\" was declared but never referenced [declared_but_not_referenced]\n      int i, j, k;\n                ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16421668298426084
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_collapse_clause.c/loop_construct_collapse_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_collapse_clause.c\", line 33: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3145251710084267
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007822154002496973,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_device_type_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_device_type_clause.c/loop_construct_device_type_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 5: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 5: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 35: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11414450901793316
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_device_type_clause.c/loop_construct_device_type_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_device_type_clause.c\", line 32: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26535785300075077
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007820630999049172,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_private_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_private_clause.c/loop_construct_private_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_private_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_private_clause.c\", line 11: error: identifier \"N\" is undefined\n      for (int i = 0; i < N; i++) {\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_private_clause.c\", line 16: error: identifier \"N\" is undefined\n      if (a != 2 * N) {\n                   ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_private_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11464544601039961
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_private_clause.c/loop_construct_private_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_private_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_private_clause.c\", line 26: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3151801100175362
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007963063020724803,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_vector_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_vector_clause.c/loop_construct_vector_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 6: error: identifier \"N\" is undefined\n      int data[N];\n               ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 8: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 8: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 11: warning: function \"rand\" declared implicitly [implicit_func_decl]\n          data[i] = rand() % 100;\n                    ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 35: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16417914198245853
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_vector_clause.c/loop_construct_vector_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_vector_clause.c\", line 32: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2645714130194392
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007859685021685436,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_construct_worker_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_worker_clause.c/loop_construct_worker_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\", line 10: error: identifier \"N\" is undefined\n      int data[N];\n               ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16438335098791867
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/loop_construct_worker_clause.c/loop_construct_worker_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/loop_construct_worker_clause.c\", line 34: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3149165679933503
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007774183002766222,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_directive.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/routine_directive.c/routine_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/routine_directive.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31453949899878353
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007816333003574982,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_construct.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/serial_construct.c/serial_construct.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c\", line 10: error: identifier \"N\" is undefined\n      for (int i = 0; i < N; i++){\n                          ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c\", line 17: error: expected an expression\n              if (/* serial computation fails */) {\n                                                ^\n\n2 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.2144606449874118
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/serial_construct.c/serial_construct.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/serial_construct.c\", line 29: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2651923580269795
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00779281699215062,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_directive.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/set_directive.c/set_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 6: error: identifier \"N\" is undefined\n      int a[N], b[N];\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 8: warning: function \"srand\" declared implicitly [implicit_func_decl]\n      srand(SEED);\n      ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 8: error: identifier \"SEED\" is undefined\n      srand(SEED);\n            ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 15: warning: function \"rand\" declared implicitly [implicit_func_decl]\n                  a[x] = rand() % 100;\n                         ^\n\n\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 43: error: identifier \"NUM_TEST_CALLS\" is undefined\n      for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                          ^\n\n3 errors detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11416224398999475
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/set_directive.c/set_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/set_directive.c\", line 40: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21463413699530065
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.007709088997216895,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_directive.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/shutdown_directive.c/shutdown_directive.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 9: error: expected a \"(\"\n      #pragma acc parallel shutdown\n                                   ^\n\n1 error detected in the compilation of \"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\".\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.164294632995734
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/shutdown_directive.c/shutdown_directive.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/shutdown_directive.c\", line 22: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3149463350127917
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0077903029741719365,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "wait_clause.c": [
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -o /usa/jarmusch/Nvidia/OpenACCV-V/build/wait_clause.c/wait_clause.c0 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\", line 12: warning: function \"acc_get_worker_num\" declared implicitly [implicit_func_decl]\n          int tid = acc_get_worker_num();\n                    ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\nNVC++-S-1061-Procedures called in a compute region must have acc routine information - acc_get_worker_num (/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c: 12)\ntest1:\n     12, Accelerator restriction: call to 'acc_get_worker_num' with no acc routine information\nNVC++/x86-64 Linux 23.5-0: compilation completed with severe errors\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.21448191601666622
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "nvc -I ~/Nvidia/OpenACCV-V/ -acc=gpu -Minfo=all -DT1 -o /usa/jarmusch/Nvidia/OpenACCV-V/build/wait_clause.c/wait_clause.c1 /usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c",
                    "config": 1,
                    "errors": "\"/usa/jarmusch/Nvidia/OpenACCV-V/Tests/wait_clause.c\", line 22: warning: variable \"failed\" was declared but never referenced [declared_but_not_referenced]\n      int failed;\n          ^\n\nRemark: individual warnings can be suppressed with \"--diag_suppress <warning-name>\"\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2647694300103467
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00795486697461456,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ]
    },
    "summary": {
        "1": {
            "1": {
                "1": {
                    "acc_copyin.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_detach.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_default_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_num_devices.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_hostptr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_init.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_malloc.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_map_data.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_to_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_on_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_type.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_unmap_data.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_async.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "async_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "attachment_counter.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "combined_constucts.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_default_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_firstprivate_clause.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_private_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_reduction_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_self_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "compute_construct_vector_length_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_attach_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_copy_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_copyout_clause.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_construct_create_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_delete_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_construct_no_create_clause.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "declare_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "declare_directive_create_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "declare_directive_device_resident_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "declare_directive_link_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "host_data_construct_if_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "host_data_construct_if_present_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_construct.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_auto_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_collapse_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_device_type_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_private_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_vector_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_construct_worker_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "routine_directive.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_construct.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_directive.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "wait_clause.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    }
                }
            }
        }
    },
    "systems": [
        {
            "id": 1,
            "machine": "x86_64",
            "name": null,
            "node": "leia",
            "processor": "x86_64",
            "release": "5.15.0-82-generic",
            "version": "#91-Ubuntu SMP Mon Aug 14 14:14:14 UTC 2023"
        }
    ],
    "testsuites": [
        {
            "acc_async_test.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int n = 1000;\n    int *a = (int*)malloc(n * sizeof(int));\n    int *b = (int*)malloc(n * sizeof(int));\n    int *c = (int*)malloc(n * sizeof(int));\n\n    // Initialize arrays\n    for (int i = 0; i < n; i++) {\n        a[i] = rand() % 100;\n        b[i] = rand() % 100;\n        c[i] = 0;\n    }\n\n    // Compute the sum of corresponding elements asynchronously\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    #pragma acc kernels async(0)\n    {\n        #pragma acc loop independent\n        for (int i = 0; i < n; i++) {\n            c[i] = a[i] + b[i];\n        }\n    }\n\n    // Wait for the asynchronous operation to finish\n    #pragma acc wait(0)\n\n    // Verify the result\n    for (int i = 0; i < n; i++){\n        if(c[i] != (a[i] + b[i])){\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_attach.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    // Add code to test acc attach feature here\n\n    if () {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_copyin.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int a[10] = {0};\n    int b = 1;\n\n    #pragma acc data copyin(a[:10], b)\n    {\n        // Modify a and b\n        for (int i = 0; i < 10; i++){\n            a[i] += b;\n        }\n        b++;\n    }\n    \n    // Verify the modifications\n    for (int i = 0; i < 10; i++){\n        if (a[i] != 1){\n            err = 1;\n            break;\n        }\n    }\n    if (b != 2){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1()\n{\n    int err = 0;\n    srand(SEED);\n\n    int *arr = (int *)malloc(N * sizeof(int));\n    int *arr_copy = (int *)malloc(N * sizeof(int));\n\n    // Initialize the array\n    for (int i = 0; i < N; ++i)\n    {\n        arr[i] = rand() % 100;\n    }\n\n    // Copy the array to the GPU memory\n    #pragma acc enter data copyin(arr[0:N])\n    \n    // Perform some operations on the GPU\n    #pragma acc parallel loop\n    for (int i = 0; i < N; ++i)\n    {\n        arr[i] *= 2;\n    }\n\n    // Copy the array back to the CPU memory\n    #pragma acc exit data copyout(arr_copy[0:N])\n\n    // Verify the correctness of the results\n    for (int i = 0; i < N; ++i)\n    {\n        if (arr[i] * 2 != arr_copy[i])\n        {\n            err = 1;\n            break;\n        }\n    }\n\n    free(arr);\n    free(arr_copy);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x)\n    {\n        failed = failed + test1();\n    }\n    if (failed != 0)\n    {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_create.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc data create(A)\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < N; ++i) {\n            A[i] = rand() / (float)RAND_MAX;\n        }\n    }\n\n    for (int i = 0; i < N; ++i) {\n        if (A[i] < 0 || A[i] > 1) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode |= (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_delete.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n\n    // Initialize arrays\n    for (int i = 0; i < n; i++) {\n        a[i] = rand() % 100;\n        b[i] = rand() % 100;\n    }\n\n    // Compute the sum of corresponding elements\n    for (int i = 0; i < n; i++) {\n        a[i] = a[i] + b[i];\n    }\n\n#pragma acc parallel loop present(a, b)\n    for (int i = 0; i < n; i++) {\n        a[i] = a[i] + b[i];\n    }\n\n#pragma acc parallel loop present(a) delete(b)\n    for (int i = 0; i < n; i++) {\n        a[i] = a[i] + b[i];\n    }\n\n    for (int i = 0; i < n; i++) {\n        if (a[i] != (b[i] * 2)) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n\n    if (failed != 0) {\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_detach.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc data copyout(err)\n    {\n        int a[N];\n        int b[N];\n        int c[N];\n\n        #pragma acc parallel loop\n        for(int i = 0; i < N; i++){\n            a[i] = i;\n            b[i] = i * 2;\n        }\n\n        #pragma acc parallel loop\n        for(int i = 0; i < N; i++){\n            c[i] = a[i] + b[i];\n        }\n\n        int sum = 0;\n        #pragma acc parallel loop reduction(+:sum)\n        for(int i = 0; i < N; i++){\n            sum += c[i];\n        }\n\n        if(sum != N * (2 * N - 1)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_deviceptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    // Declare variables and allocate memory on host\n    int* a = (int*)malloc(N * sizeof(int));\n    int* b = (int*)malloc(N * sizeof(int));\n\n    // Initialize data on host\n    for (int i = 0; i < N; i++) {\n        a[i] = rand() % 10;\n        b[i] = 0;\n    }\n\n    // Transfer data from host to device\n    #pragma acc data copyin(a[0:N]) create(b[0:N])\n    {\n        // Perform computation on device\n        #pragma acc parallel loop present(a[0:N], b[0:N])\n        for (int i = 0; i < N; i++) {\n            // Store result on device\n            b[i] = a[i] * a[i];\n        }\n    }\n\n    // Transfer data from device to host\n    #pragma acc data copyout(b[0:N]) delete(a[0:N])\n\n    // Verify the results\n    for (int i = 0; i < N; i++) {\n        if (b[i] != a[i] * a[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free memory on host\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_free.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime, data, executable-data, construct-independent, V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    int n = 100;\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n\n    // Initialize arrays\n    for (int i = 0; i < n; i++) {\n        a[i] = rand() % 1000;\n        b[i] = 0;\n    }\n\n    // Perform computation\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < n; i++) {\n            b[i] = a[i] * 2;\n        }\n    }\n\n    // Verify results\n    for (int i = 0; i < n; i++) {\n        if (b[i] != a[i] * 2) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_get_default_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc parallel loop gang vector async(1)\n    for (int i = 0; i < N; ++i){\n        A[i] = B[i] + C[i];\n    }\n\n    #pragma acc update host(A) async(1)\n\n    for (int i = 0; i < N; ++i){\n        if (A[i] != B[i] + C[i]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if(acc_get_device_num(acc_device_nvidia) != acc_get_device_num(acc_device_nvidia)){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_type.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Call the acc_get_device_type function\n    acc_device_t device_type = acc_get_device_type();\n\n    // Verify the returned device type\n    if (device_type != acc_device_not_host){\n        err = 1;\n    }\n    \n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    \n    // Run the test multiple times\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    \n    // Check if any tests failed\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_get_num_devices.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int num_devices = acc_get_num_devices(acc_device_default);\n    if(num_devices < 1){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc parallel\n    {\n        int device_type = acc_get_property(acc_device_nvidia);\n        if (device_type != acc_device_gpu) {\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_hostptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    \n    int size = 100;\n    int *hostData = (int*)malloc(size * sizeof(int));\n\n    // Allocate device memory and copy data\n    int *devData;\n    #pragma acc enter data copyin(hostData[0:size]) create(devData[0:size])\n\n    // Perform computation on the device using acc hostptr\n    #pragma acc parallel loop present(hostData[0:size]) num_gangs(1) num_workers(1) vector_length(1) async(0)\n    for (int i = 0; i < size; ++i) {\n        #pragma acc hostptr(devData)\n        {\n            devData[i] = hostData[i] * 2;\n        }\n    }\n\n    // Retrieve results from the device\n    #pragma acc update self(hostData[0:size])\n\n    // Verify correctness\n    for (int i = 0; i < size; ++i) {\n        if (hostData[i] != (i * 2)) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Deallocate memory\n    #pragma acc exit data delete(hostData[0:size]) delete(devData[0:size])\n    free(hostData);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_init.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int a[10];\n\n    #pragma acc init\n\n    for(int i = 0; i < 10; i++){\n        a[i] = i;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Check if the acc pragma is supported by the compiler\n    #ifdef _OPENACC\n        // OpenACC is supported\n        // Add your test code here\n        // ...\n\n    #else\n        // OpenACC is not supported\n        err = 1;\n    #endif\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if (failed != 0){\n        failcode |= (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_malloc.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Allocate memory on GPU using acc_malloc\n    int *data = (int*)acc_malloc(sizeof(int) * SIZE);\n\n    // Check if memory allocation on GPU was successful\n    if(data == NULL){\n        err = 1;\n    }\n\n    // Free the allocated memory on GPU\n    acc_free(data);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_map_data.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int n = 1000;\n    int *A = (int*)malloc(n * sizeof(int));\n    int *A_copy = (int*)malloc(n * sizeof(int));\n\n    // Initialize data\n    for(int i = 0; i < n; i++){\n        A[i] = rand() % 100;\n        A_copy[i] = A[i];\n    }\n\n    #pragma acc data copy(A[0:n]) map(tofrom: A_copy[0:n])\n    {\n        #pragma acc parallel loop\n        for(int i = 0; i < n; i++){\n            A_copy[i] += 1;\n        }\n    }\n\n    // Verify the result\n    for(int i = 0; i < n; i++){\n        if(A_copy[i] != (A[i] + 1)){\n            err = 1;\n            break;\n        }\n    }\n\n    free(A);\n    free(A_copy);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_d2d.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Create data arrays\n    int* host_data = (int*)malloc(DATA_SIZE * sizeof(int));\n    int* device_data1 = (int*)malloc(DATA_SIZE * sizeof(int));\n    int* device_data2 = (int*)malloc(DATA_SIZE * sizeof(int));\n\n    // Initialize host_data array\n    for (int i = 0; i < DATA_SIZE; ++i){\n        host_data[i] = rand();\n    }\n\n    // Copy data from host to device using acc_memcpy\n    #pragma acc data copy(host_data[0:DATA_SIZE]) \\\n                     create(device_data1[0:DATA_SIZE]) \\\n                     copyout(device_data2[0:DATA_SIZE])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < DATA_SIZE; ++i){\n            device_data1[i] = host_data[i];\n        }\n\n        // Copy data from device to device using acc_memcpy\n        #pragma acc enter data copyin(device_data1[0:DATA_SIZE])\n        #pragma acc parallel loop\n        for (int i = 0; i < DATA_SIZE; ++i){\n            acc_memcpy(&device_data2[i], &device_data1[i], sizeof(int));\n        }\n        #pragma acc exit data delete(device_data1[0:DATA_SIZE])\n    }\n\n    // Verify data on the device is correct\n    for (int i = 0; i < DATA_SIZE; ++i){\n        if (host_data[i] != device_data2[i]){\n            err = 1;\n            break;\n        }\n    }\n\n    // Free memory\n    free(host_data);\n    free(device_data1);\n    free(device_data2);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if (failed != 0){\n        failcode |= (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_memcpy_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    // Test code goes here\n    // Use the acc_memcpy_device function and check for correct behavior\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_memcpy_from_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Declare and initialize variables\n    int n = 100;\n    int *data = (int*)malloc(n * sizeof(int));\n    int *devData;\n\n    // Allocate memory on the device\n    #pragma acc enter data create(data[0:n])\n\n    // Initialize data on the device\n    #pragma acc parallel loop present(data[0:n])\n    for (int i = 0; i < n; i++){\n        data[i] = rand();\n    }\n\n    // Allocate memory on the host\n    devData = (int*)malloc(n * sizeof(int));\n\n    // Copy data from the device to the host using acc_memcpy_from_device\n    #pragma acc host_data use_device(data)\n    {\n        #pragma acc memcpy from(device:data[0:n]) to(host:devData[0:n])\n    }\n\n    // Verify the data on the host matches the data on the device\n    for (int i = 0; i < n; i++){\n        if (devData[i] != data[i]){\n            err = 1;\n            break;\n        }\n    }\n\n    // Free memory on the device and host\n    #pragma acc exit data delete(data[0:n])\n    free(data);\n    free(devData);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_memcpy_to_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n\n    // Declare variables\n    int N = 100;\n    int *hostArray, *deviceArray;\n\n    // Allocate memory on host\n    hostArray = (int*)malloc(N * sizeof(int));\n    if (hostArray == NULL){\n        return 1;\n    }\n\n    // Initialize host array\n    for (int i = 0; i < N; i++){\n        hostArray[i] = i + 1;\n    }\n\n    // Allocate memory on device\n    #pragma acc data create(deviceArray[0:N])\n    {\n        // Transfer data from host to device\n        #pragma acc host_data use_device(deviceArray)\n        #pragma acc update device(deviceArray[0:N])\n\n        // Verify the data transfer\n        #pragma acc parallel loop\n        for (int i = 0; i < N; i++){\n            if (deviceArray[i] != (i + 1)){\n                err = 1;\n                break;\n            }\n        }\n    }\n\n    // Free memory on host\n    free(hostArray);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed != 0){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_on_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Add OpenACC directives here\n\n    // Add code to verify the feature implementation\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_default_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc set default(async)\n\n    // Here goes the code to be tested\n\n    return err;\n}\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_set_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int num_devices;\n    acc_get_num_devices(acc_device_default, &num_devices);\n\n    if(num_devices != NUM_DEVICES){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_type.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Add OpenACC directive to set device type\n    #pragma acc set device(type(nvidia))\n\n    // Add OpenACC region to perform computation\n    #pragma acc parallel loop reduction(+:err)\n    for (int i = 0; i < LENGTH; ++i) {\n        if (a[i] > b[i]) {\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed != 0){\n        failcode |= (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_shutdown.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    // Run the OpenACC shutdown directive\n    #pragma acc shutdown\n\n    if (acc_get_device_num(acc_get_device_type()) != -1) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_unmap_data.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc data copyout(A[0:N]) create(B[0:N])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < N; i++){\n            A[i] = B[i] + 1;\n        }\n    }\n\n    #pragma acc unmap(A[:N])\n  \n    for (int i = 0; i < N; i++){\n        if (A[i] != B[i] + 1) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device.c": {
                "num tests": 0,
                "tests": {}
            },
            "acc_update_self.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n    int *a = (int*)malloc(n * sizeof(int));\n    int *b = (int*)malloc(n * sizeof(int));\n    \n    // Initialize arrays\n    for (int i = 0; i < n; i++) {\n        a[i] = rand() % 100;\n        b[i] = rand() % 100;\n    }\n\n    // OpenACC update self\n    #pragma acc enter data copyin(a[0:n], b[0:n])\n    \n    // Perform calculations on GPU\n    #pragma acc kernels\n    for (int i = 0; i < n; i++) {\n        a[i] += b[i];\n    }\n\n    // OpenACC update self\n    #pragma acc exit data copyout(a[0:n])\n    \n    // Validate the results\n    for (int i = 0; i < n; i++) {\n        if (a[i] != 2 * b[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n\n    if (failed != 0) {\n        failcode |= (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc parallel\n    {\n        int a = 0;\n        #pragma acc loop tile(32)\n        for (int i = 0; i < N; ++i){\n            a += 1;\n        }\n        #pragma acc wait\n        if (a != N){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_any.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n    int a[10], b[10], c[10];\n    int i, j;\n\n    for (i = 0; i < 10; i++) {\n        a[i] = rand() % 10;\n        b[i] = rand() % 10;\n    }\n\n#pragma acc kernels\n    for (i = 0; i < 10; i++) {\n#pragma acc loop\n        for (j = 0; j < 10; j++) {\n            c[i] += a[i] * b[i];\n        }\n    }\n\n#pragma acc wait any\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "acc_wait_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Declare and initialize arrays\n    int n = 100;\n    int a[n];\n    int b[n];\n    int c[n];\n    for (int i = 0; i < n; i++) {\n        a[i] = i;\n        b[i] = n - i;\n    }\n\n    // Compute c[] asynchronously on the GPU using OpenACC\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    #pragma acc kernels async(1)\n    for (int i = 0; i < n; i++) {\n        c[i] = a[i] + b[i];\n    }\n    \n    // Wait for kernel to complete\n    #pragma acc wait async(1)\n\n    // Verify the correctness of the computation\n    for (int i = 0; i < n; i++) {\n        if (c[i] != (a[i] + b[i])) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "async_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // async clause\n    #pragma acc parallel loop async(1)\n    for (int i = 0; i < N; i++) {\n        // code inside the loop\n    }\n    #pragma acc wait(1)\n\n    if(/*check if the code inside the loop was executed asynchronously*/){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_construct.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc parallel loop reduction(+:err)\n    for (int i = 0; i < N; i++) {\n        #pragma acc atomic\n        err++;\n    }\n\n    return err != N;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode |= (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "attachment_counter.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Replace the condition with the attachment counter check\n    if(acc_get_num_devices(acc_device_nvidia) < 1){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "combined_constucts.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc data copyin(x)\n    #pragma acc parallel loop reduction(+:sum)\n    for (int i = 0; i < N; ++i) {\n        sum += x[i];\n    }\n    if(sum != result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_async_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    int *a = (int*)malloc(N * sizeof(int));\n    int *b = (int*)malloc(N * sizeof(int));\n    int *c = (int*)malloc(N * sizeof(int));\n    int *d = (int*)malloc(N * sizeof(int));\n\n    // Initialize the input arrays\n    init_array(N, a);\n    init_array(N, b);\n\n    #pragma acc data copyin(a[0:N], b[0:N]) copyout(c[0:N]) create(d[0:N])\n    {\n        // Perform computation in parallel asynchronously\n        #pragma acc parallel loop async\n        for (int i = 0; i < N; ++i) {\n            d[i] = a[i] + b[i];\n        }\n\n        // Perform computation in parallel\n        #pragma acc parallel loop\n        for (int j = 0; j < N; ++j) {\n            c[j] = d[j] * d[j];\n        }\n\n        // Wait for all previous asynchronous tasks to complete\n        #pragma acc waitall\n    }\n\n    // Validate the result\n    if (!validate(N, c)) {\n        err = 1;\n    }\n\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode |= (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "compute_construct_default_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc compute default(none)\n    for (int i = 0; i < n; ++i) {\n        // Perform some computations here\n        int result = 1 + 2 * i;\n\n        if (result <= 0) {\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_firstprivate_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Define variables\n    int a = 0;\n    int b = 0;\n\n    // Compute construct with firstprivate clause\n    // Compute the sum of a and b using parallel execution on GPU\n    #pragma acc parallel loop num_gangs(1) num_workers(1) vector_length(1) firstprivate(a,b)\n    for (int i = 0; i < 1000; i++) {\n        a += i;\n        b += i;\n    }\n\n    // Verify correctness\n    int expected_sum = (999 * 1000) / 2;\n    if (a != expected_sum || b != expected_sum) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_if_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    if (...) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode |= (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "compute_construct_num_gangs_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // OpenACC compute construct with num_gangs clause\n    #pragma acc parallel num_gangs(10)\n    {\n        // ...\n        // Perform computations here\n        // ...\n    }\n\n    // Validate the results of computations\n    // ...\n    // if (validation fails) {\n    //     err = 1;\n    // }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "compute_construct_num_workersclause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\n\n// Define the problem size\n#define N 1000\n\nint test1() {\n    int err = 0;\n\n    // Input and output arrays\n    float *a = (float *)malloc(N * sizeof(float));\n    float *b = (float *)malloc(N * sizeof(float));\n    float *c = (float *)malloc(N * sizeof(float));\n\n    // Initialize input arrays\n    for (int i = 0; i < N; ++i) {\n        a[i] = 1.0f;\n        b[i] = 2.0f;\n    }\n\n    // Compute c = a + b using OpenACC compute construct with num_workers clause\n    #pragma acc data copyin(a[0:N], b[0:N]), copyout(c[0:N])\n    {\n        #pragma acc parallel loop num_workers(2)\n        for (int i = 0; i < N; ++i) {\n            c[i] = a[i] + b[i];\n        }\n    }\n\n    // Verify the result\n    for (int i = 0; i < N; ++i) {\n        if (c[i] != 3.0f) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free memory\n    free(a);\n    free(b);\n    free(c);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode |= (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "compute_construct_private_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc data pcopy(x, y)\n    {\n        int x[NUM_DEVICES], y[NUM_DEVICES];\n        int thread_num = omp_get_thread_num();\n        \n        #pragma acc compute private(x, y)\n        for(int i = 0; i < NUM_DEVICES; i++) {\n            x[i] = rand();\n            y[i] = x[i] * 2;\n        }\n        \n        for(int i = 0; i < NUM_DEVICES; i++) {\n            if(x[i] % 2 != 0 || y[i] != x[i] * 2) {\n                err = 1;\n                break;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_reduction_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc parallel loop reduction(+:sum)\n    for (int i = 0; i < N; i++){\n        sum += data[i];\n    }\n\n    int expected_sum = 0;\n    for (int i = 0; i < N; i++){\n        expected_sum += data[i];\n    }\n\n    if (sum != expected_sum){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_self_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Add your test code here\n    #pragma acc parallel loop num_gangs(1) num_workers(1) vector_length(1) present(err)\n    for (int i = 0; i < SIZE; i++) {\n        // Add your computation code here\n        err += i;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_vector_length_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int n = 100;\n    float a[n], b[n], c[n];\n\n    // Initialize arrays\n    for (int i = 0; i < n; i++){\n        a[i] = (float)(i+1);\n        b[i] = (float)(i+2);\n        c[i] = 0.0f;\n    }\n\n    // Compute c = a + b using OpenACC compute construct and vector_length clause\n    #pragma acc kernels loop vector_length(4)\n    for (int i = 0; i < n; i++){\n        c[i] = a[i] + b[i];\n    }\n\n    // Verify the results\n    for (int i = 0; i < n; i++){\n        if (c[i] != a[i] + b[i]){\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "compute_construct_wait_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc data copyout(err)\n    {\n        #pragma acc kernels present(err)\n        {\n            int sum = 0;\n            #pragma acc loop reduction(+:sum)\n            for (int i = 0; i < N; i++){\n                sum += i;\n            }\n\n            #pragma acc wait\n            if (sum != (N - 1) * N / 2){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed != 0){\n        failcode |= 1 << 0;\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_construct.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    if (/* fill in your condition here */){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_attach_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int array[10];\n\n    #pragma acc data copyin(array[0:10]) attach(array)\n    {\n        // Access array\n        for (int i = 0; i < 10; i++) {\n            array[i] = i;\n        }\n    }\n    \n    // Verify array values\n    for (int i = 0; i < 10; i++) {\n        if (array[i] != i) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_copy_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int size = 100;\n    int *a = (int *)malloc(size * sizeof(int));\n    int *b = (int *)malloc(size * sizeof(int));\n    int *c = (int *)malloc(size * sizeof(int));\n    int *d = (int *)malloc(size * sizeof(int));\n\n    for (int i = 0; i < size; ++i){\n        a[i] = rand() % 100;\n        b[i] = rand() % 100;\n        c[i] = rand() % 100;\n        d[i] = rand() % 100;\n    }\n\n    #pragma acc data copyin(a[0:size], b[0:size]) copyout(c[0:size])\n    {\n        for (int i = 0; i < size; ++i){\n            c[i] = a[i] + b[i];\n        }\n    }\n\n    for (int i = 0; i < size; ++i){\n        if (c[i] != a[i] + b[i]){\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_copyin_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    int host_a[NUM_ELEMS];\n    int *device_a;\n\n    srand(SEED);\n\n#pragma acc data copyin(host_a[0:NUM_ELEMS])\n    {\n        // Allocate device memory\n        device_a = (int *)acc_malloc(NUM_ELEMS * sizeof(int));\n\n        // Initialize host array\n        for (int i = 0; i < NUM_ELEMS; i++) {\n            host_a[i] = rand();\n        }\n\n        // Copy host data to device\n        #pragma acc update device(host_a[0:NUM_ELEMS])\n\n        // Perform device computations\n        #pragma acc parallel loop\n        for (int i = 0; i < NUM_ELEMS; i++) {\n            device_a[i] = host_a[i] + 1;\n        }\n\n        // Copy device data back to host\n        #pragma acc update self(host_a[0:NUM_ELEMS])\n\n        // Verify the results\n        for (int i = 0; i < NUM_ELEMS; i++) {\n            if (host_a[i] != (device_a[i] - 1)) {\n                err = 1;\n                break;\n            }\n        }\n\n        // Deallocate device memory\n        acc_free(device_a);\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_construct_copyout_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int n = 100;\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n\n    // Initialize the arrays\n    for (int i = 0; i < n; ++i){\n        a[i] = rand() % n;\n        b[i] = 0;\n    }\n\n    // Perform computation on GPU\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < n; ++i){\n            b[i] = a[i] + 1;\n        }\n    }\n\n    // Verify the results\n    for (int i = 0; i < n; ++i){\n        if (b[i] != a[i] + 1){\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed != 0){\n        failcode |= (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_create_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n  \n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *c = (int *)malloc(n * sizeof(int));\n  \n    #pragma acc data create(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < n; ++i){\n            a[i] = rand() % 100;\n            b[i] = rand() % 100;\n        }\n  \n        #pragma acc parallel loop\n        for (int i = 0; i < n; ++i){\n            c[i] = a[i] + b[i];\n        }\n    }\n  \n    for (int i = 0; i < n; ++i){\n        if (c[i] != a[i] + b[i]){\n            err = 1;\n            break;\n        }\n    }\n  \n    free(a);\n    free(b);\n    free(c);\n  \n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_delete_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Perform some operations with OpenACC data constructs\n\n    // Delete the OpenACC data constructs\n    #pragma acc exit data delete(a,b,c)\n\n    // Verify if the OpenACC data constructs are deleted\n    if(a != NULL || b != NULL || c != NULL){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    \n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    \n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_construct_detach_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime, data, executable-data, construct-independent, v:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc data detach\n    {\n        // Code to be executed in parallel\n        // ...\n\n        // Verify the correctness of the detached data\n        if () {\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode |= (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_construct_no_create_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    \n    int n = 100;\n    int *A = (int *)malloc(n * sizeof(int));\n    int *B = (int *)malloc(n * sizeof(int));\n    \n    // Initialize arrays A and B\n    for (int i = 0; i < n; i++) {\n        A[i] = rand() % 10;\n        B[i] = rand() % 10;\n    }\n    \n    #pragma acc data copyin(A[0:n]) no_create(B[0:n])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < n; i++) {\n            B[i] = B[i] + A[i];\n        }\n    }\n    \n    // Verify the result\n    for (int i = 0; i < n; i++) {\n        if (B[i] != 2 * A[i]) {\n            err = 1;\n            break;\n        }\n    }\n    \n    free(A);\n    free(B);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_deviceptr_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // TODO: Add OpenACC directives with the \"data deviceptr\" clause\n    // to offload data to the device and perform some computations\n    // on the device.\n\n    // Check if the computations on the device are correct.\n    // If incorrect, set \"err\" to 1.\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_present_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    int *arr = (int*)malloc(N * sizeof(int));\n\n    #pragma acc data present(arr[0:N])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < N; ++i) {\n            arr[i] = i;\n        }\n    }\n\n    for (int i = 0; i < N; ++i) {\n        if (arr[i] != i) {\n            err = 1;\n            break;\n        }\n    }\n\n    free(arr);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "declare_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Add your OpenACC code to test the declare directive here\n\n    if () {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_directive_create_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    int *a = (int*)malloc(n * sizeof(int));\n    int *b = (int*)malloc(n * sizeof(int));\n    int *sum = (int*)malloc(n * sizeof(int));\n    \n    if (a == NULL || b == NULL || sum == NULL){\n        err = 1;\n    }\n    \n    #pragma acc data create(a[:n], b[:n], sum[:n])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < n; ++i){\n            a[i] = rand() % 100;\n            b[i] = rand() % 100;\n        }\n        \n        #pragma acc parallel loop\n        for (int i = 0; i < n; ++i){\n            sum[i] = a[i] + b[i];\n        }\n    }\n    \n    free(a);\n    free(b);\n    free(sum);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_directive_device_resident_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc declare device_resident(V)\n    {\n        // Perform operations using V on the device\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_directive_link_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc declare link(err)\n    \n    if(err != 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Add code to test the enter data directive here\n    #pragma acc enter data create(a[0:N])\n\n    // Add code to perform data operations here\n\n    // Add code to test the exit data directive here\n    #pragma acc exit data delete(a[0:N])\n\n    // Validate that the data operations were successful\n    for (int i = 0; i < N; ++i){\n        if (a[i] != i){\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed != 0){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "exit_data_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    int n = 100;\n    int *host_a, *host_b, *device_a, *device_b;\n\n    host_a = (int*)malloc(n * sizeof(int));\n    host_b = (int*)malloc(n * sizeof(int));\n\n    // Initialize host arrays\n    for (int i = 0; i < n; i++) {\n        host_a[i] = i;\n        host_b[i] = 0;\n    }\n\n    // Allocate device memory\n    device_a = (int*)acc_malloc(n * sizeof(int));\n    device_b = (int*)acc_malloc(n * sizeof(int));\n\n    // Copy data from host to device\n    #pragma acc enter data copyin(host_a[0:n])\n    #pragma acc enter data create(host_b[0:n])\n\n    // Copy data from device to host\n    #pragma acc exit data copyout(host_b[0:n])\n\n    // Verify the data on host after exiting data region\n    for (int i = 0; i < n; i++) {\n        if (host_b[i] != 0) {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free device memory\n    #pragma acc exit data delete(device_a[0:n])\n    #pragma acc exit data delete(device_b[0:n])\n\n    // Free host memory\n    free(host_a);\n    free(host_b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "host_data_construct_if_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc data present(err) if(0)\n    {\n        #pragma acc host_data use_device(err)\n        {\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "host_data_construct_if_present_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int *data;\n    int present = 1;\n\n    #pragma acc enter data create(data) if(present)\n    #pragma acc exit data copyout(data) if_present(present)\n\n    if(present){\n        int sum = 0;\n        for(int i = 0; i < N; i++){\n            data[i] = rand() % 10;\n            sum += data[i];\n        }\n\n        if(sum != N*9/2){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "host_data_construct_use_device_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    int *host_array = (int *)malloc(N * sizeof(int));\n    int *device_array = (int *)malloc(N * sizeof(int));\n\n    if (host_array == NULL || device_array == NULL) {\n        err = 1;\n    }\n\n    #pragma acc data copyin(host_array[0:N]) copyout(device_array[0:N])\n    {\n        #pragma acc host_data use_device(host_array, device_array)\n        {\n            #pragma acc parallel loop\n            for (int i = 0; i < N; i++) {\n                host_array[i] = 1;\n                device_array[i] = 2;\n            }\n\n            #pragma acc parallel loop\n            for (int i = 0; i < N; i++) {\n                if (host_array[i] != 1 || device_array[i] != 2) {\n                    err = 1;\n                    break;\n                }\n            }\n        }\n    }\n\n    free(host_array);\n    free(device_array);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "id": 1,
            "init_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init\n    {\n        // Code to be executed in parallel region\n        \n        // Check if the parallel region is working correctly\n        if (acc_get_num_devices(acc_device_nvidia) <= 0) {\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "kernels_construct.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    int *a = (int *)malloc(N * sizeof(int));\n    int *b = (int *)malloc(N * sizeof(int));\n    int *c = (int *)malloc(N * sizeof(int));\n\n    srand(SEED);\n    \n    // Initialize arrays\n    for (int i = 0; i < N; i++){\n        a[i] = rand() % 100;\n        b[i] = rand() % 100;\n    }\n\n    // Compute multiplication of arrays\n    #pragma acc kernels\n    for (int i = 0; i < N; i++){\n        c[i] = a[i] * b[i];\n    }\n\n    // Verify correctness of computation\n    for (int i = 0; i < N; i++){\n        if (c[i] != a[i] * b[i]){\n            err = 1;\n            break;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_auto_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    int check = 0;\n    int n = 1000;\n    int x[n], y[n];\n\n    // Initialize arrays\n    for (int i = 0; i < n; ++i) {\n        x[i] = i;\n        y[i] = 0;\n    }\n\n    #pragma acc kernels loop auto\n    for (int i = 0; i < n; ++i) {\n        y[i] = x[i] * 2;\n    }\n\n    // Verify results\n    for (int i = 0; i < n; ++i) {\n        if (y[i] != x[i] * 2) {\n            check = 1;\n            break;\n        }\n    }\n\n    if (check) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_collapse_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    int i, j, k;\n    int arr[N][M];\n\n    // Initialize array\n    for (i = 0; i < N; i++){\n        for (j = 0; j < M; j++){\n            arr[i][j] = i + j;\n        }\n    }\n\n    // Parallelize with collapse clause\n    #pragma acc parallel loop collapse(2)\n    for (i = 0; i < N; i++){\n        for (j = 0; j < M; j++){\n            // Check if each element is correctly calculated\n            if (arr[i][j] != i + j){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_device_type_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    int a[10];\n    int b[10];\n    int c[10];\n\n    #pragma acc data copyin(a,b) copyout(c)\n    {\n        #pragma acc kernels loop device_type(nvidia)\n        for(int i = 0; i < 10; i++){\n            c[i] = a[i] + b[i];\n        }\n    }\n\n    for(int i = 0; i < 10; i++){\n        if(c[i] != a[i] + b[i]){\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_gang_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Insert code to test loop construct gang clause\n\n    if (/* Condition to check if the feature is failing */){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    \n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    \n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "loop_construct_independent_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    int sum = 0;\n    int data[N];\n    for (int i = 0; i < N; i++) {\n        data[i] = rand() % 100;\n    }\n\n    #pragma acc parallel loop independent\n    for (int i = 0; i < N; i++) {\n        sum += data[i];\n    }\n\n    int expected_sum = N * (N - 1) / 2;\n    if (sum != expected_sum) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode |= 1 << 0;\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "loop_construct_private_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Testing OpenACC loop construct with private clause\n    int a = 0;\n    #pragma acc parallel loop private(a)\n    for (int i = 0; i < N; i++) {\n        a += 2;\n    }\n\n    // Check if the private variable 'a' is correctly incremented\n    if (a != 2 * N) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_reduction_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime, data, executable-data, construct-independent, V:2.0-2.7\nint test1() {\n    int err = 0;\n    int sum = 0;\n\n    // Create a vector of size N\n    int N = 1000;\n    int *data = (int *)malloc(N * sizeof(int));\n\n    // Initialize the vector\n    for (int i = 0; i < N; ++i) {\n        data[i] = i;\n    }\n\n    // Compute the sum of the vector using OpenACC reduction clause\n    #pragma acc data copyin(data[0:N]) reduction(+:sum)\n    #pragma acc kernels\n    {\n       #pragma acc loop\n       for (int i = 0; i < N; ++i) {\n           sum += data[i];\n       }\n    }\n\n    // Verify the correctness of the result\n    int expectedSum = N * (N-1) / 2;\n    if (sum != expectedSum) {\n        err = 1;\n    }\n\n    free(data);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode |= (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "loop_construct_seq_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    int a[10];\n    int b[10];\n\n    srand(SEED);\n\n    for (int i = 0; i < 10; i++) {\n        a[i] = rand() % 10;\n        b[i] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:10]) create(b[0:10])\n    #pragma acc parallel loop seq\n    for (int i = 0; i < 10; i++) {\n        b[i] = a[i] * a[i];\n    }\n    #pragma acc exit data delete(a, b)\n\n    for (int i = 0; i < 10; i++) {\n        if (b[i] != a[i] * a[i]) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "loop_construct_tile_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n\n#define WIDTH 1024\n#define HEIGHT 1024\n\n// T1:runtime, data, executable-data, construct-independent, V:2.0-2.7\nint test1()\n{\n    int err = 0;\n    int i, j;\n\n    // Allocate memory for the input and output arrays\n    float *input = (float *)malloc(WIDTH * HEIGHT * sizeof(float));\n    float *output = (float *)malloc(WIDTH * HEIGHT * sizeof(float));\n\n    // Initialize the input array\n    for (i = 0; i < WIDTH * HEIGHT; i++)\n    {\n        input[i] = (float)(i);\n    }\n\n    // Compute the output array using the OpenACC loop construct tile clause\n    #pragma acc parallel loop tile(32,32)\n    for (i = 0; i < HEIGHT; i++)\n    {\n        for (j = 0; j < WIDTH; j++)\n        {\n            output[i * WIDTH + j] = input[i * WIDTH + j];\n        }\n    }\n\n    // Verify the output array\n    for (i = 0; i < WIDTH * HEIGHT; i++)\n    {\n        if (output[i] != input[i])\n        {\n            err = 1;\n            break;\n        }\n    }\n\n    // Free the memory\n    free(input);\n    free(output);\n\n    return err;\n}\n\n#endif\n#ifndef T1\n    failed = 0;\n\n    for (int x = 0; x < NUM_TEST_CALLS; ++x)\n    {\n        failed += test1();\n    }\n\n    if (failed != 0)\n    {\n        failcode = failcode | (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "loop_construct_vector_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    int i, j;\n    int data[N];\n\n    srand(SEED);\n\n    for (i = 0; i < N; i++) {\n        data[i] = rand() % 100;\n    }\n\n    #pragma acc parallel loop vector\n    for (j = 0; j < N; j++) {\n        data[j] = data[j] * 2;\n    }\n\n    for (i = 0; i < N; i++) {\n        if (data[i] % 2 != 0) {\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_construct_worker_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Perform some computations\n    int data[N];\n    for (int i = 0; i < N; i++) {\n        data[i] = rand() % 100;\n    }\n\n    // Compute sum of all elements using OpenACC loop and worker clause\n    int sum = 0;\n#pragma acc parallel loop worker\n    for (int i = 0; i < N; i++) {\n        sum += data[i];\n    }\n\n    // Verify the sum\n    int expected_sum = N * (N - 1) / 2;\n    if (sum != expected_sum) {\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_construct.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1()\n{\n    int err = 0;\n    srand(SEED);\n\n    // Add OpenACC parallel construct here\n    #pragma acc parallel\n    {\n        if (){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    \n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    \n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "reference_counters.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Specify OpenACC directives to test reference counters\n    #pragma acc data copyin(x)\n    #pragma acc parallel loop\n    for (int i = 0; i < N; i++){\n        x[i]++;\n    }\n\n    // Verify results\n    for (int i = 0; i < N; i++){\n        if (x[i] != 1){\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Add your OpenACC routine directive code here\n    \n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    \n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    \n    if (failed != 0){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_construct.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // OpenACC serial construct\n    #pragma acc parallel loop\n    for (int i = 0; i < N; i++){\n        #pragma acc serial\n        {\n            // Do some serial computation\n            // ...\n\n            // Check if the serial computation is correct\n            if (/* serial computation fails */) {\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    int x;\n    int a[N], b[N];\n\n    srand(SEED);\n\n    #pragma acc data copyin(a,b)\n    {\n        #pragma acc kernels\n        {\n            for (x = 0; x < N; x++){\n                a[x] = rand() % 100;\n                b[x] = rand() % 100;\n            }\n        }\n\n        #pragma acc parallel\n        {\n            for (x = 0; x < N; x++){\n                a[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    for (x = 0; x < N; x++){\n        if (a[x] != (b[x] + b[x])){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Add your test code here\n    #pragma acc parallel shutdown\n    {\n        // Code to execute in parallel region\n    }\n\n    // Add your test validation code here\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "variable_implicit_data_attributes.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc data copy(err)\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < 100; i++) {\n            if (i % 2 == 0) {\n                err += i;\n            } else {\n                err -= i;\n            }\n        }\n    }\n\n    return err != 0;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed += test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "variable_predetermined_data_attributes.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    \n    int A[N], B[N], C[N], scalar;\n\n    // Initialize arrays\n    for (int i = 0; i < N; ++i){\n        A[i] = rand() % 100;\n        B[i] = rand() % 100;\n    }  \n    \n    // Predetermined data attribute\n    #pragma acc data copyin(A[0:N], B[0:N])\n    {\n        #pragma acc parallel loop\n        for (int i = 0; i < N; ++i){\n            C[i] = A[i] + B[i];\n        }\n    }\n\n    // Verify the results\n    for (int i = 0; i < N; ++i){\n        if (C[i] != A[i] + B[i]){\n            err = 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    \n    // Run the test multiple times\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    \n    if (failed != 0){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "wait_clause.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    // Add OpenACC `wait` clause\n    #pragma acc parallel num_workers(4) wait(4) // Adjust the number of workers as needed\n    {\n        int tid = acc_get_worker_num();\n        printf(\"Hello from thread %d\\n\", tid);\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "wait_directive.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n// T1: runtime, data, executable-data, construct-independent, V:2.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc data copyout(A)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop independent\n            for (int i = 0; i < N; ++i) {\n                A[i] = 0;\n            }\n        }\n\n        #pragma acc parallel\n        {\n            #pragma acc loop independent\n            for (int i = 0; i < N; ++i) {\n                A[i] = A[i] + 1;\n            }\n        }\n\n        #pragma acc wait\n\n        #pragma acc parallel\n        {\n            #pragma acc loop independent\n            for (int i = 0; i < N; ++i) {\n                A[i] = A[i] + 2;\n            }\n        }\n\n        for (int i = 0; i < N; ++i) {\n            if (A[i] != 3) {\n                err = 1;\n                break;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            }
        }
    ]
}